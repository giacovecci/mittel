# public/admin/config.yml
backend:
  name: git-gateway
  repo: giacovecci/mittel # Make sure this is your correct repo
  branch: adam-feedback-2
  identity_url: https://auth.decapbridge.com/sites/6f47cec6-ee71-4b7d-a4fb-b4518e61898e # Keep your specific URL
  gateway_url: https://gateway.decapbridge.com # Keep your specific URL
  commit_messages:
    create: Create {{collection}} “{{slug}}” - {{author-name}} <{{author-login}}> via DecapBridge
    update: Update {{collection}} “{{slug}}” - {{author-name}} <{{author-login}}> via DecapBridge
    delete: Delete {{collection}} “{{slug}}” - {{author-name}} <{{author-login}}> via DecapBridge
    uploadMedia: Upload “{{path}}” - {{author-name}} <{{author-login}}> via DecapBridge
    deleteMedia: Delete “{{path}}” - {{author-name}} <{{author-login}}> via DecapBridge
    openAuthoring: Message {{message}} - {{author-name}} <{{author-login}}> via DecapBridge

logo_url: https://decapbridge.com/decapcms-with-bridge.svg
site_url: https://mittel.reiseburo.workers.dev # Optional: Replace if different
publish_mode: editorial_workflow

media_folder: "public/uploads"
public_folder: "/uploads"

collections:
  - name: "feed"
    label: "Feed Entries"
    folder: "src/content/feed"
    create: true
    slug: "{{year}}-{{month}}-{{day}}-{{slug}}"
    fields:
      - { label: "Title", name: "title", widget: "string" }
      # Omit _styling_note field unless you explicitly want it back
      - { label: "Publish Date", name: "date", widget: "datetime", required: false }
      - { label: "Thumbnail Image", name: "thumbnail", widget: "image", required: false }
      - label: "Content Blocks"
        name: "contentBlocks"
        widget: "list"
        typeKey: type
        types:
          - label: "Two Column Block"
            name: "twoColumn"
            widget: "object"
            fields:
              - { label: "Left Column (Markdown)", name: "left", widget: "markdown", required: false }
              - { label: "Right Column (Markdown)", name: "right", widget: "markdown", required: false }
          - label: "Full Width Image"
            name: "fullWidthImage"
            widget: "object"
            fields:
              - { label: "Image", name: "image", widget: "image" }
              - { label: "Alt Text", name: "alt", widget: "string", required: false }
          - label: "Full Width Embed"
            name: "fullWidthEmbed"
            widget: "object"
            fields:
              - { label: "Embed Code (Raw HTML)", name: "embedCode", widget: "text" }
          # --- ADDED: Full Width Text Block Type ---
          - label: "Full Width Text"
            name: "fullWidthText"
            widget: "object"
            fields:
              - { label: "Text Content", name: "text", widget: "markdown" }
          # --- END ADDED ---
          # --- ADDED: Horizontal Gallery Block Type ---
          - label: "Horizontal Gallery"
            name: "horizontalGallery"
            widget: "object"
            fields:
              - label: "Images"
                name: "images"
                widget: "list"
                fields:
                  - { label: "Image", name: "image", widget: "image" }
                  - { label: "Alt Text", name: "alt", widget: "string", required: false }
          # --- END ADDED ---<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="robots" content="noindex" />
  <title>Content Manager</title>

  <!-- Stylesheet link removed from here -->

  <style>
    /* Preview pane specific adjustments if needed */
    .nc-preview-pane-container > div {
        padding: 0 !important;
    }
    .feed-entry-preview-wrapper {
        padding: 1rem;
        background-color: var(--color-background, white);
    }
  </style>

</head>
<body>
  <!-- Load Marked library from CDN -->
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

  <!-- Decap CMS Core Script -->
  <script src="https://unpkg.com/decap-cms@^3.1.0/dist/decap-cms.js"></script>

  <!-- Custom Preview Registration Script -->
  <script type="module">
    console.log("Admin script started.");

    if (typeof marked === 'undefined') {
      console.error("Marked library not loaded!");
    } else {
        console.log("Marked library loaded.");
    }

    const CMS = window.CMS;
    const h = window.h;

    if (!CMS || !h) {
        console.error("CMS object or h function not found. Preview registration failed.");
    } else {
        console.log("CMS object and h function found.");

        // --- Register the stylesheet DIRECTLY for the preview pane ---
        try {
            CMS.registerPreviewStyle('/admin-preview.css'); // Use the stable path
            console.log("Registered preview style: /admin-preview.css");
        } catch (error) {
            console.error("Error registering preview style:", error);
        }
        // --- End of stylesheet registration ---
      
        // --- Define the Feed Entry Preview Function ---
        const FeedEntryPreview = (props) => {
            // console.log("FeedEntryPreview props:", props); // Debug: See what props are passed
            const { entry, getAsset } = props;
            if (!entry || !entry.getIn) {
                console.error("Invalid 'entry' object in preview props:", entry);
                return h('div', {}, 'Error: Invalid data received for preview.');
            }

            // --- Extract Data ---
            const title = entry.getIn(['data', 'title'], 'Untitled Entry');
            const dateValue = entry.getIn(['data', 'date'], null);
            const rawThumbnail = entry.getIn(['data', 'thumbnail'], null);
            const contentBlocksData = entry.getIn(['data', 'contentBlocks'], null); // Get Immutable List/Map or null

            // --- Process Data ---
            const formattedDate = dateValue
                ? new Date(dateValue).toLocaleDateString('en-US', {
                    year: 'numeric', month: 'long', day: 'numeric'
                  })
                : null;
            const thumbnailUrl = rawThumbnail ? getAsset(rawThumbnail)?.url || rawThumbnail : null;

            // Helper to parse markdown
            function parseMarkdownClient(markdownString) {
                if (!markdownString || typeof marked === 'undefined') return '';
                try {
                    return marked.parse(markdownString);
                } catch (e) {
                    console.error("Markdown preview parsing error:", e);
                    return '<p><em>Error parsing markdown</em></p>';
                }
            }

            // --- Render Content Blocks ---
            let blockElements = [];
            if (contentBlocksData && typeof contentBlocksData.map === 'function') { // Check if it's map-able (Immutable List)
                blockElements = contentBlocksData.map((block) => {
                    if (!block || typeof block.get !== 'function') return null; // Check if block is valid (Immutable Map)

                    const blockType = block.get('type');
                    switch (blockType) {
                        case 'twoColumn':
                            const leftContent = block.get('left');
                            const rightContent = block.get('right');
                            return h('div', { className: 'content-block block-two-column' },
                                leftContent ? h('div', { className: 'column left-column', dangerouslySetInnerHTML: { __html: parseMarkdownClient(leftContent) } }) : null,
                                rightContent ? h('div', { className: 'column right-column', dangerouslySetInnerHTML: { __html: parseMarkdownClient(rightContent) } }) : null
                            );
                        case 'fullWidthImage':
                            const rawImagePath = block.get('image');
                            const altText = block.get('alt') || '';
                            const imageUrl = rawImagePath ? getAsset(rawImagePath)?.url || rawImagePath : null;
                            return h('div', { className: 'content-block block-full-width-image' },
                                imageUrl ? h('img', { src: imageUrl, alt: altText, style: { display: 'block', width: '100%', height: 'auto', borderRadius: 'var(--border-radius-sm)', backgroundColor: 'var(--color-border-light)' } }) : h('p', {}, 'Image not available')
                            );
                        case 'fullWidthEmbed':
                            const embedCode = block.get('embedCode');
                            return h('div', { className: 'content-block block-full-width-embed', dangerouslySetInnerHTML: { __html: embedCode || '' } });
                        default:
                            return h('div', { className: 'content-block block-unknown' },
                                h('p', {}, h('em', {}, `Unsupported block preview: ${blockType || 'Unknown'}`))
                            );
                    }
                }).filter(el => el !== null); // Filter out any nulls from invalid blocks
            } else {
                 blockElements = [h('p', {}, h('em', {}, 'No content blocks added yet.'))];
            }


            // --- Assemble Preview using h() ---
            // Wrap everything in a div to apply padding/background safely
            return h('div', { className: 'feed-entry-preview-wrapper' },
                h('article', { className: 'feed-entry' },
                    // Title
                    h('h3', {}, title),
                    // Date
                    formattedDate ? h('time', { className: 'feed-entry-date' }, formattedDate) : null,
                    // Thumbnail
                    thumbnailUrl ? h('div', { className: 'thumbnail', style: { marginBottom: '1.5rem', backgroundColor: 'var(--color-border-light)' } },
                        h('img', { src: thumbnailUrl, alt: `Thumbnail for ${title}`, style: { display: 'block', width: '100%', height: 'auto', maxWidth: '100%', objectFit: 'cover' } })
                    ) : null,
                    // Content Blocks
                    h('div', { className: 'feed-entry-blocks' }, ...blockElements), // Spread the array of block elements
                    // Separator
                    h('hr', { className: 'entry-separator' })
                )
            );
        }; // End of FeedEntryPreview function definition

        // --- Register the Preview Component ---
        try {
            CMS.registerPreviewTemplate('feed', FeedEntryPreview);
            console.log("Feed entry preview template (JS function) registered successfully.");
        } catch (error) {
             console.error("Error registering preview template:", error);
        }

    } // End of CMS/h check
  </script>
</body>
</html>/* src/styles/global.css */

/* 1. CSS Reset / Normalization */
*, *::before, *::after { box-sizing: border-box; }
body, h1, h2, h3, h4, h5, h6, p, ul, ol, figure, blockquote, dl, dd { margin: 0; }
button, input, textarea, select { font: inherit; margin: 0; }
ul, ol { padding: 0; list-style: none; }
img, video, picture, svg { display: block; max-width: 100%; height: auto; }
a { color: inherit; text-decoration: none; }
button { background: none; border: none; padding: 0; cursor: pointer; color: inherit; }

/* 2. CSS Custom Properties (Variables) */
:root {
  /* --- FONT STYLE --- */
  --font-family-unified: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
  /* Default/Desktop responsive size */
  --font-size-desktop-unified: clamp(1.1rem, 1rem + 0.2vw, 1.3rem);
  /* Mobile Responsive Sizes */
  --font-size-mobile-content-responsive: clamp(0.85rem, 0.75rem + 0.3vw, 1.0rem);
  --font-size-mobile-header-responsive: clamp(1.3rem, 1.1rem + 0.6vw, 1.6rem);
  /* Weights */
  --font-weight-unified: 700; /* Default weight */
  --font-weight-bold: 900;    /* Bold weight */
  --line-height-unified: 1.6;
  --color-text-unified: #ccc;

  /* Background & Border Colors */
  --color-background: #000000;
  --color-header-bg: #111111;
  --color-border: #555555;
  --line-thickness: 2px;

  /* Accent for Hover/Active */
  --color-accent: #e70221;
  --color-text-hover: var(--color-accent);

  /* Spacing Unit */
  --spacing-unit: 1rem;
  /* Spacing Scale */
  --spacing-xxs: calc(0.25 * var(--spacing-unit));
  --spacing-xs: calc(0.5 * var(--spacing-unit));
  --spacing-sm: calc(0.75 * var(--spacing-unit));
  --spacing-md: var(--spacing-unit);
  --spacing-lg: calc(1.5 * var(--spacing-unit));
  --spacing-xl: calc(2 * var(--spacing-unit));
  --spacing-xxl: calc(3 * var(--spacing-unit));

  /* Layout Specific Variables */
  --content-padding-x-desktop: var(--spacing-lg);
  --content-padding-x-mobile: var(--spacing-md);
  --column-gap-desktop: var(--spacing-lg);
  --column-gap-mobile: var(--spacing-md);
}

/* 3. Core Body & Universal Text Styling */
html { scroll-behavior: smooth; }
body {
  background-color: var(--color-background);
  font-family: var(--font-family-unified);
  /* Apply Default/Desktop Size */
  font-size: var(--font-size-desktop-unified);
  font-weight: var(--font-weight-unified);
  line-height: var(--line-height-unified);
  color: var(--color-text-unified);
  min-height: 100vh;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  position: relative;
}

/* Default heading/paragraph styles */
h1, h2, h3, h4, h5, h6 {
    font-weight: var(--font-weight-bold);
    /* font-size: inherit; Let em control relative size */
    line-height: 1.3;
    margin-bottom: var(--spacing-sm);
}
/* Keep heading size relative to current context (body) */
h3 { font-size: 1.1em; }

p, li, dt, dd, span, label {
    font-weight: inherit;
    font-size: inherit; /* Inherit from parent */
    line-height: inherit;
    margin-bottom: var(--spacing-sm);
}
*:last-child { margin-bottom: 0; } /* Applies too broadly, use with caution or more specific selectors */

/* 4. Basic Link & Button Hover Styling */
a:hover,
button:hover { color: var(--color-text-hover); }
button.active { color: var(--color-text-hover); }
button { cursor: pointer; }


/* ================================== */
/* --- GLOBAL MOBILE OVERRIDES --- */
/* ================================== */
@media (max-width: 768px) {
    body {
        /* Apply Mobile Content Responsive Font Size */
        font-size: var(--font-size-mobile-content-responsive);
    }
    /* Example mobile heading adjustment if needed */
    /* h3 { font-size: 1.2em; } */
}
---
// src/cms-previews/FeedEntryPreview.astro
// This component renders the live preview in the Decap CMS UI.
// It receives data from the CMS editor as props.

// Import necessary types or helpers if needed (e.g., for date formatting)
// Note: We can't use Astro's <Image> component here as it runs client-side.
// We'll use standard <img> tags.
// We'll need a client-side markdown parser for markdown content.

import { marked } from 'marked'; // Import client-side markdown parser

// Define the expected props based on CMS fields for 'feed' collection
interface PreviewProps {
  entry: {
    getIn: (path: string[], defaultValue?: any) => any; // Decap CMS helper to get data
  };
  widgetFor: (field: string) => any; // Decap CMS helper (less common for previews)
  widgetsFor: (field: string) => any[]; // Decap CMS helper for list items
  getAsset: (path: string) => { url: string; toString: () => string }; // Decap CMS helper for assets/images
}

const { entry, getAsset } = Astro.props as PreviewProps;

// --- Extract data using entry.getIn ---
// Provide default values to prevent errors if fields are empty initially
const title = entry.getIn(['data', 'title'], 'Untitled Entry');
const dateValue = entry.getIn(['data', 'date'], null);
const rawThumbnail = entry.getIn(['data', 'thumbnail'], null);
const contentBlocks = entry.getIn(['data', 'contentBlocks'], []); // Get the raw list/map data

// --- Process Data ---
const formattedDate = dateValue
    ? new Date(dateValue).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      })
    : null;

// Process thumbnail path using getAsset
const thumbnailUrl = rawThumbnail ? getAsset(rawThumbnail)?.url || rawThumbnail : null;

// Helper to safely parse markdown client-side
function parseMarkdownClient(markdownString?: string): string {
    if (!markdownString) return '';
    try {
        // Ensure marked output is treated as a string
        const htmlResult = String(marked.parse(markdownString));
        return htmlResult;
    } catch (e) {
        console.error("Error parsing Markdown in preview:", e);
        return '<p><em>Error rendering markdown preview.</em></p>';
    }
}

// Helper function to render an image block
function renderImage(blockData: any) {
    const rawImagePath = blockData.get('image'); // Use .get() for map-like access
    const altText = blockData.get('alt') || '';
    const imageUrl = rawImagePath ? getAsset(rawImagePath)?.url || rawImagePath : null;

    if (!imageUrl) {
        return '<div class="content-block block-missing-image"><p><em>Image preview not available (path missing or invalid).</em></p></div>';
    }

    // Note: Use standard <img> tag for preview
    return `
        <div class="content-block block-full-width-image">
            <img src="${imageUrl}" alt="${altText}" style="display: block; width: 100%; height: auto; border-radius: var(--border-radius-sm); background-color: var(--color-border-light);" />
        </div>
    `;
}
---

{/* This is the HTML structure for the preview pane */}
{/* Apply classes that match your actual FeedEntry component for styling */}
<article class="feed-entry">
  <h3>{title}</h3>
  {formattedDate && (
    <time class="feed-entry-date">{formattedDate}</time>
  )}

  {/* Preview for Thumbnail (if exists) */}
  {thumbnailUrl && (
    <div class="thumbnail" style="margin-bottom: 1.5rem; background-color: var(--color-border-light);">
      <img src={thumbnailUrl} alt={`Thumbnail for ${title}`} style="display: block; width: 100%; height: auto; max-width: 100%; object-fit: cover;" />
    </div>
  )}

  {/* --- Content Block Preview Rendering --- */}
  <div class="feed-entry-blocks">
    {Array.isArray(contentBlocks) && contentBlocks.length > 0 ? (
       contentBlocks.map((block) => {
         // block is likely an Immutable.js Map here
         const blockType = block?.get('type'); // Get type using .get()

         switch (blockType) {
            case 'twoColumn':
                const leftContent = block?.get('left');
                const rightContent = block?.get('right');
                return (
                    <div class="content-block block-two-column">
                        {leftContent && (
                            <div class="column left-column" set:html={parseMarkdownClient(leftContent)}></div>
                        )}
                        {rightContent && (
                            <div class="column right-column" set:html={parseMarkdownClient(rightContent)}></div>
                        )}
                    </div>
                );
            case 'fullWidthImage':
                // Use the helper function to render the image HTML string
                return <Fragment set:html={renderImage(block)} />;

            case 'fullWidthEmbed':
                 const embedCode = block?.get('embedCode');
                 return embedCode ? (
                     <div class="content-block block-full-width-embed" set:html={embedCode}>
                         {/* Raw HTML injected. Note: iframe CSS from global.css SHOULD apply if linked correctly */}
                     </div>
                 ) : null;

            default:
                console.warn("Unsupported block type in preview:", blockType);
                return (
                     <div class="content-block block-unknown">
                         <p><em>Unsupported block preview for type: {blockType || 'Unknown'}</em></p>
                     </div>
                 );
         }
       })
    ) : (
       <p><em>No content blocks added yet.</em></p>
    )}
  </div>

  {/* Separator not strictly needed in preview, but can add for visual consistency */}
  <hr class="entry-separator" />
</article>

{/* We rely on the global CSS linked in admin/index.html for styling */}
{/* Avoid adding component-specific styles here unless absolutely necessary */}
<style is:global>
  /* Add any minor PREVIEW-SPECIFIC overrides here if the global styles aren't enough */
  /* For example, forcing a background color if the global one relies on layout context */
  .feed-entry {
    padding: 1rem; /* Ensure some padding in the preview pane */
    background-color: var(--color-background, white); /* Example fallback */
  }
  /* Ensure markdown columns have styles applied */
  .block-two-column .column p { line-height: var(--line-height-unified); margin-bottom: var(--spacing-sm); }
  .block-two-column .column h1,
  .block-two-column .column h2,
  .block-two-column .column h3,
  .block-two-column .column h4 { margin-bottom: var(--spacing-xs); margin-top: var(--spacing-md); line-height: 1.2; }
  /* Add other markdown element styles if needed */
</style>