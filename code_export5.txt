---
// src/pages/index.astro
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import IdentityHeader from '../components/IdentityHeader.astro';
import Header from '../components/Header.astro';
import StaticInfo from '../components/StaticInfo.astro';
import FeedEntry from '../components/FeedEntry.astro';
import OverviewGrid from '../components/OverviewGrid.astro';
import type { CollectionEntry } from 'astro:content';

// Data Fetching
const feedEntriesFetched: CollectionEntry<'feed'>[] = await getCollection('feed');
const feedEntries = feedEntriesFetched.sort((a, b) => {
    const dateA = a.data.date ? new Date(a.data.date).getTime() : 0;
    const dateB = b.data.date ? new Date(b.data.date).getTime() : 0;
    return dateB - dateA;
});
const overviewItems = feedEntries.map(entry => ({
    id: entry.slug,
    title: entry.data.title || 'Untitled',
    imageUrl: entry.data.thumbnail || '/placeholder.jpg',
    altText: entry.data.title || 'Feed item thumbnail'
}));
---
<BaseLayout title="Å»akowiecki | fixer supreme XD">

    {/* Slot for Identity Header */}
    <div slot="identity-header">
        <IdentityHeader />
    </div>

    {/* Slot for Main Header (Nav/Contact) */}
    <div slot="main-header">
        <Header />
    </div>

    {/* Slot for Info Content Area */}
    <div slot="info-content" id="info-content-wrapper"> {/* Use wrapper ID if needed */}
        <StaticInfo />
    </div>

    {/* Slot for Feed Content Area */}
    <section slot="feed-content" id="feed-content-wrapper"> {/* Use wrapper ID if needed */}
        {feedEntries.map(entry => (
            <FeedEntry entry={entry} />
        ))}
    </section>

    {/* Slot for Overview Content Area */}
    <div slot="overview-content" id="overview-content-wrapper"> {/* Use wrapper ID if needed */}
        <div id="overview-grid-wrapper">
            <OverviewGrid items={overviewItems} />
        </div>
    </div>

</BaseLayout>

{/* --- Script for View Switching --- */}
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Selectors
        const appContainer = document.getElementById('app-container');
        const identityHeaderArea = document.getElementById('identity-header-area');
        const mainHeaderArea = document.getElementById('main-header-area');
        const mobileHeaderRow = document.getElementById('mobile-header-row');
        const dividerArea = document.getElementById('divider-area');
        const infoContentArea = document.getElementById('info-content-area');
        const feedContentArea = document.getElementById('feed-content-area');
        const overviewContentArea = document.getElementById('overview-content-area');
        const infoBtn = document.getElementById('info-view-btn') as HTMLButtonElement | null;
        const feedBtn = document.getElementById('feed-view-btn') as HTMLButtonElement | null;
        const overviewBtn = document.getElementById('overview-view-btn') as HTMLButtonElement | null;
        const overviewGridWrapper = document.getElementById('overview-grid-wrapper');

        // Null Check
        if (!appContainer || !identityHeaderArea || !mainHeaderArea || !mobileHeaderRow || !dividerArea || !infoContentArea || !feedContentArea || !overviewContentArea || !infoBtn || !feedBtn || !overviewBtn || !overviewGridWrapper) {
            console.error("Essential elements missing for view switching script."); return;
        }

        const MOBILE_BREAKPOINT = 768;
        let wasMobile = window.innerWidth <= MOBILE_BREAKPOINT;

        function isMobile(): boolean { return window.innerWidth <= MOBILE_BREAKPOINT; }
        function isDesktop(): boolean { return !isMobile(); }

        function setActiveButton(activeBtn: HTMLButtonElement | null): void {
            [infoBtn, feedBtn, overviewBtn].forEach(btn => {
                if (btn) { btn.classList.toggle('active', btn === activeBtn); }
            });
        }

        // --- REVERTED to direct style manipulation ---
        function setMainView(view: 'feed' | 'overview' | 'info'): void {
            console.log("%cSetting view:", "color: purple; font-weight: bold;", view, "isMobile:", isMobile());

            // --- Default States (assume desktop initially, mobile adjustments below) ---
            infoContentArea!.style.display = 'none';
            feedContentArea!.style.display = 'none';
            overviewContentArea!.style.display = 'none';
            dividerArea!.style.display = 'block';
            identityHeaderArea!.style.display = 'flex';
            mainHeaderArea!.style.display = 'flex';
            mobileHeaderRow!.style.display = 'none';

            // --- Apply View Logic ---
            if (view === 'overview') {
                console.log("  Applying OVERVIEW styles...");
                overviewContentArea!.style.display = 'block';
                infoContentArea!.style.display = 'none';
                feedContentArea!.style.display = 'none';
                dividerArea!.style.display = 'none'; // Hide divider in overview
                setActiveButton(overviewBtn);
            } else if (view === 'info') { // Info only applies on mobile
                 console.log("  Applying INFO styles (Mobile expected)...");
                 if (isMobile()) {
                    infoContentArea!.style.display = 'block';
                    feedContentArea!.style.display = 'none'; // Ensure feed hidden
                    overviewContentArea!.style.display = 'none'; // Ensure overview hidden
                    setActiveButton(infoBtn);
                 } else { // If info clicked on desktop, treat as feed view
                     console.log("  INFO requested on desktop, defaulting to FEED");
                     infoContentArea!.style.display = 'block';
                     feedContentArea!.style.display = 'block';
                     overviewContentArea!.style.display = 'none'; // Ensure overview hidden
                     dividerArea!.style.display = 'block'; // Ensure divider shown
                     setActiveButton(feedBtn);
                 }
            } else { // Default to 'feed' view
                 console.log("  Applying FEED styles...");
                 overviewContentArea!.style.display = 'none'; // Ensure overview hidden
                 if (isDesktop()) {
                     infoContentArea!.style.display = 'block';
                     feedContentArea!.style.display = 'block';
                     dividerArea!.style.display = 'block'; // Ensure divider shown
                     setActiveButton(feedBtn);
                 } else { // Mobile feed view
                     feedContentArea!.style.display = 'block';
                     infoContentArea!.style.display = 'none'; // Ensure info hidden
                     dividerArea!.style.display = 'none'; // Ensure divider hidden
                     setActiveButton(feedBtn);
                 }
            }

             // --- Mobile Specific Overrides ---
            if (isMobile()) {
                console.log("  Applying MOBILE overrides...");
                dividerArea!.style.display = 'none'; // Always hide divider
                mobileHeaderRow!.style.display = 'flex'; // Show mobile header row wrapper
                // Let BaseLayout CSS handle display of areas inside mobileHeaderRow
                identityHeaderArea!.style.display = '';
                mainHeaderArea!.style.display = '';
            } else {
                 // Ensure Mobile row is hidden on Desktop
                 mobileHeaderRow!.style.display = 'none';
                  // Ensure desktop headers use flex (might already be set)
                  if (identityHeaderArea!.style.display !== 'flex') identityHeaderArea!.style.display = 'flex';
                  if (mainHeaderArea!.style.display !== 'flex') mainHeaderArea!.style.display = 'flex';
            }
        }

        // Event Listeners
        overviewBtn.addEventListener('click', () => setMainView('overview'));
        feedBtn.addEventListener('click', () => setMainView('feed'));
        infoBtn.addEventListener('click', () => { if (isMobile()) setMainView('info'); });

        // Grid Click
        if (overviewGridWrapper) {
            overviewGridWrapper.addEventListener('click', (event: MouseEvent) => {
                console.log("Overview grid clicked."); // DEBUG
                if (event.target instanceof Element) {
                    const gridItemLink = event.target.closest<HTMLAnchorElement>('.grid-item');
                    if (gridItemLink && gridItemLink.dataset.targetId && feedContentArea) {
                        event.preventDefault();
                        const targetId = gridItemLink.dataset.targetId;
                        console.log("Target ID from grid item:", targetId); // DEBUG

                        // 1. Switch view first
                        setMainView('feed');

                        // 2. Wait for rendering and scroll
                        requestAnimationFrame(() => {
                            setTimeout(() => {
                                const targetFeedElement = feedContentArea.querySelector<HTMLElement>(`.feed-entry#${targetId}`);
                                if (targetFeedElement) {
                                    console.log("Target feed element found:", targetFeedElement); // DEBUG
                                    targetFeedElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                                    console.log("scrollIntoView called."); // DEBUG
                                } else { console.error(`Target element '.feed-entry#${targetId}' not found within feed area.`); }
                            }, 100); // Delay
                        });
                    } else if (gridItemLink) { console.error("Grid item link missing 'data-target-id'."); }
                }
            });
        }

        // Initial View & Resize Handling (Keep ResizeObserver fix)
        console.log("Initializing view...");
        setMainView('feed');
        const resizeObserver = new ResizeObserver(() => {
            const isNowMobile = isMobile();
            if (isNowMobile !== wasMobile) {
                console.log(`Resize detected: Switched state. Resetting view.`);
                setMainView('feed');
                wasMobile = isNowMobile;
            }
        });
        resizeObserver.observe(document.body);

        // Gallery Logic (Keep as is)
        // ...
    });
</script>/* src/styles/global.css */

/* 1. CSS Reset / Normalization */
*, *::before, *::after { box-sizing: border-box; }
body, h1, h2, h3, h4, h5, h6, p, ul, ol, figure, blockquote, dl, dd { margin: 0; }
button, input, textarea, select { font: inherit; margin: 0; }
ul, ol { padding: 0; list-style: none; }
img, video, picture, svg { display: block; max-width: 100%; height: auto; }
a { color: inherit; text-decoration: none; }
button { background: none; border: none; padding: 0; cursor: pointer; color: inherit; }

/* 2. CSS Custom Properties (Variables) */
:root {
  /* --- FONT STYLE --- */
  --font-family-unified: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
  /* Default/Desktop responsive size */
  --font-size-desktop-unified: clamp(1.1rem, 1rem + 0.2vw, 1.3rem);
  /* Mobile Responsive Sizes */
  --font-size-mobile-content-responsive: clamp(0.85rem, 0.75rem + 0.3vw, 1.0rem);
  --font-size-mobile-header-responsive: clamp(1.3rem, 1.1rem + 0.6vw, 1.6rem);
  /* Font Weights */
  --font-weight-regular: 400;
  --font-weight-medium: 500;
  --font-weight-bold: 700;
  /* Set the default weight variable */
  --font-weight-unified: var(--font-weight-regular); /* Default to Regular */

  --line-height-unified: 1.6;
  --color-text-unified: #ccc;

  /* Background & Border Colors */
  --color-background: #000000;
  --color-header-bg: #111111;
  --color-border: #555555;
  --line-thickness: 2px;

  /* Other Colors */
  --color-text-secondary: #aaa;
  --color-border-light: #444;
  --border-radius-sm: 4px;
  --color-background-muted: #1a1a1a;
  --color-surface-light: #2a2a2a;
  --color-surface-light-hover: #383838;
  --color-text-unified-rgb: 204, 204, 204; /* Corresponds to #ccc */

  /* Accent for Hover/Active */
  --color-accent: #e70221;
  --color-text-hover: var(--color-accent);

  /* Spacing Unit & Scale */
  --spacing-unit: 1rem;
  --spacing-xxs: calc(0.25 * var(--spacing-unit));
  --spacing-xs: calc(0.5 * var(--spacing-unit));
  --spacing-sm: calc(0.75 * var(--spacing-unit));
  --spacing-md: var(--spacing-unit);
  --spacing-lg: calc(1.5 * var(--spacing-unit));
  --spacing-xl: calc(2 * var(--spacing-unit));
  --spacing-xxl: calc(3 * var(--spacing-unit));

  /* Layout Specific Variables */
  --content-padding-x-desktop: var(--spacing-lg);
  --content-padding-x-mobile: var(--spacing-md);
  --column-gap-desktop: var(--spacing-lg);
  --column-gap-mobile: var(--spacing-md);
  /* --- ADDED: Global Desktop Column Split --- */
  --desktop-info-column-width: 33.33%; /* Approx 1/3 */
  --desktop-feed-column-width: calc(100% - var(--desktop-info-column-width)); /* Approx 2/3 */
}

/* 3. Core Body & Universal Text Styling */
html { scroll-behavior: smooth; }
body {
  background-color: var(--color-background);
  font-family: var(--font-family-unified);
  font-size: var(--font-size-desktop-unified);
  /* Apply default font weight (now 400) */
  font-weight: var(--font-weight-unified);
  line-height: var(--line-height-unified);
  color: var(--color-text-unified);
  min-height: 100vh;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  position: relative;
}

/* Default heading/paragraph styles */
h1, h2, h3, h4, h5, h6 {
  /* Ensure headings use bold weight */
  font-weight: var(--font-weight-bold); /* 700 */
  line-height: 1.3;
  margin-bottom: var(--spacing-sm);
}
h3 { font-size: 1.1em; }

p, li, dt, dd, span, label {
  /* Inherit weight (defaults to body's 400) */
  font-weight: inherit;
  font-size: inherit;
  line-height: inherit;
  margin-bottom: var(--spacing-sm);
}

/* --- Header Text Weights --- */
/* Apply specific weights to header elements as needed */
.header-site-name-text {
    font-weight: var(--font-weight-bold); /* Keep site name bold (700) */
}
/* If tagline, nav buttons, contact link need specific weights, add rules here: */
/* Example: */
/* .header-nav button, .header-contact-item a { */
/*     font-weight: var(--font-weight-medium); /* 500 */
/* } */


/* 4. Basic Link & Button Hover Styling */
a:hover,
button:hover { color: var(--color-text-hover); }
button.active { color: var(--color-text-hover); }
button { cursor: pointer; }

/* 5. Utility Classes */
.accent-text {
  color: var(--color-accent);
  /* Optional: font-weight: var(--font-weight-bold); */
}

/* ================================== */
/* --- GLOBAL MOBILE OVERRIDES --- */
/* ================================== */
@media (max-width: 768px) {
    body {
        font-size: var(--font-size-mobile-content-responsive);
    }
    /* h3 { font-size: 1.2em; } */
  }


/* ===================================================== */
/* --- Font Size Adjustment for Landscape Mobile/Tablet --- */
/* ===================================================== */
@media (max-width: 992px) and (orientation: landscape) {
  body {
      font-size: 0.8rem;
  }
}---
// src/components/FeedEntry.astro
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { marked } from 'marked';

type BaseBlock = { type: string };
type ContentBlock = NonNullable<CollectionEntry<'feed'>['data']['contentBlocks']>[number];

interface Props {
    entry: CollectionEntry<'feed'>;
}

const { entry } = Astro.props;
const { slug, data } = entry;

const formattedDate = data.date
    ? new Date(data.date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    })
    : null;

function parseMarkdown(markdownString?: string): string {
    if (!markdownString) return '';
    try {
        const parsed = marked.parse(markdownString, { gfm: true, breaks: false });
        const trimmed = String(parsed).trim();
        if (trimmed && !trimmed.match(/^<(p|h[1-6]|ul|ol|li|blockquote|hr|table|div|pre|figure|img)/i)) {
           return `<p>${trimmed}</p>`;
        }
        return trimmed;
    } catch (e) {
        console.error("Error parsing Markdown:", e);
        return '<p>Error rendering content.</p>';
    }
}
---
<article class="feed-entry" id={slug}>
    <h3>{data.title || 'Untitled Entry'}</h3>
    {formattedDate && (
        <time class="feed-entry-date" datetime={data.date?.toISOString()}>{formattedDate}</time>
    )}

    <div class="feed-entry-blocks">
        {data.contentBlocks && data.contentBlocks.length > 0 ? (
            data.contentBlocks.map((block: ContentBlock, index: number) => {
                const galleryId = `gallery-${slug}-${index}`;
                const prevBtnId = `gallery-prev-${slug}-${index}`;
                const nextBtnId = `gallery-next-${slug}-${index}`;

                switch (block.type) {
                    case 'twoColumn':
                        return (
                            <div class="content-block block-two-column">
                                {block.left && (
                                    <div class="column left-column" set:html={parseMarkdown(block.left)}></div>
                                )}
                                {block.right && (
                                    <div class="column right-column" set:html={parseMarkdown(block.right)}></div>
                                )}
                            </div>
                        );

                    case 'fullWidthImage':
                        return block.image ? (
                            <div class="content-block block-full-width-image">
                                <Image
                                    src={block.image}
                                    alt={block.alt || ''}
                                    width={1200}
                                    height={900}
                                    format="webp"
                                    quality={80}
                                    loading="lazy"
                                    densities={[1, 1.5, 2]}
                                />
                            </div>
                        ) : <div class="content-block block-missing-image"><p><em>Image missing or path incorrect.</em></p></div>;

                    case 'fullWidthEmbed':
                        return block.embedCode ? (
                            <div class="content-block block-full-width-embed" set:html={block.embedCode}></div>
                        ) : null;

                    case 'fullWidthText':
                        return block.text ? (
                            <div class="content-block block-full-width-text markdown-content" set:html={parseMarkdown(block.text)}></div>
                        ) : null;

                    case 'horizontalGallery':
                         return (
                            <div class="content-block block-horizontal-gallery">
                                <div class="gallery-scroll-container" id={galleryId}>
                                    {block.images && block.images.length > 0 ? (
                                        block.images.map(img => (
                                            img.image ? (
                                                <div class="gallery-item">
                                                    {/* --- CAREFULLY CORRECTED IMAGE ATTRIBUTES --- */}
                                                    <Image
                                                        src={img.image}
                                                        alt={img.alt || ''}
                                                        width={800}
                                                        height={600}
                                                        format="webp"
                                                        quality={75}
                                                        loading="lazy"
                                                        densities={[1, 1.5]}
                                                    />
                                                    {/* --- END CORRECTIONS --- */}
                                                </div>
                                            ) : null
                                        ))
                                    ) : (
                                        <div class="gallery-item placeholder"><p><em>No images in gallery.</em></p></div>
                                    )}
                                </div>
                                <button type="button" class="gallery-nav-button prev" id={prevBtnId} data-target={`#${galleryId}`} aria-label="Previous image">â¹</button>
                                <button type="button" class="gallery-nav-button next" id={nextBtnId} data-target={`#${galleryId}`} aria-label="Next image">âº</button>
                            </div>
                        );


                    default:
                        const unknownBlock = block as BaseBlock;
                        console.warn(`Unsupported content block type found in entry '${slug}':`, unknownBlock?.type || block);
                         return (
                             <div class="content-block block-unknown">
                                 <p><em>Unsupported block type: {unknownBlock?.type || 'Unknown'}. Check config and component.</em></p>
                             </div>
                         );
                }
            })
        ) : (
             entry.body ? (
                 <div class="content-block markdown-content" set:html={parseMarkdown(entry.body)}></div>
             ) : (
                 <p><em>No content found for this entry.</em></p>
             )
        )}
    </div>

    <hr class="entry-separator" />
</article>

<style>
    /* --- Base and Existing Styles --- */
    :root {
        --feed-entry-column-gap: var(--column-gap-desktop, var(--spacing-lg));
        --gallery-nav-button-size: 2.5rem;
        /* --- ADDED: Define gap size --- */
        --gallery-item-gap: var(--spacing-md); /* e.g., 1rem */
    }

    /* ... (keep all styles from .feed-entry down to .block-full-width-text) ... */
    .feed-entry { margin-bottom: var(--spacing-xl); padding-bottom: var(--spacing-md); scroll-margin-top: 2rem; }
    .feed-entry h3 { margin-top: 0; margin-bottom: var(--spacing-xxs); font-weight: var(--font-weight-bold); font-size: 1.1em; line-height: 1.3; }
    .feed-entry-date { display: block; font-size: 0.9em; color: var(--color-accent); margin-bottom: var(--spacing-md); }
    .feed-entry-blocks { margin-top: var(--spacing-lg); }
    .content-block { margin-bottom: var(--spacing-lg); }
    .content-block:last-child { margin-bottom: 0; }
    .block-two-column { display: flex; gap: var(--feed-entry-column-gap); }
    .block-two-column .column { flex: 1; min-width: 0; }
    .block-two-column .column > *:first-child { margin-top: 0; }
    .block-two-column .column > *:last-child { margin-bottom: 0; }
    .block-two-column .column :global(p), .block-two-column .column :global(li), .block-two-column .column :global(dt), .block-two-column .column :global(dd) { line-height: var(--line-height-unified); margin-bottom: var(--spacing-sm); font-size: 1em; }
    .block-two-column .column :global(h1), .block-two-column .column :global(h2), .block-two-column .column :global(h3), .block-two-column .column :global(h4) { margin-bottom: var(--spacing-xs); margin-top: var(--spacing-md); line-height: 1.2; }
    .block-two-column .column :global(ul), .block-two-column .column :global(ol) { margin-bottom: var(--spacing-sm); padding-left: var(--spacing-lg); }
    .block-two-column .column :global(li) > :global(p) { margin-bottom: var(--spacing-xxs); }
    .block-two-column .column :global(blockquote) { margin-left: var(--spacing-sm); padding-left: var(--spacing-md); border-left: 3px solid var(--color-border-light); color: var(--color-text-secondary); font-style: italic; margin-bottom: var(--spacing-sm); }
    .block-full-width-image img, .block-full-width-image picture { display: block; width: 100%; height: auto; border-radius: var(--border-radius-sm); background-color: var(--color-border-light); }
    .block-missing-image p { font-style: italic; color: var(--color-text-secondary); background-color: var(--color-background-muted); padding: var(--spacing-md); border-radius: var(--border-radius-sm); text-align: center; }
    .block-full-width-embed { width: 100%; max-width: 100%; overflow: hidden; background-color: var(--color-border-light); }
    .block-full-width-embed :global(iframe), .block-full-width-embed :global(video) { display: block !important; width: 100% !important; max-width: 100% !important; height: auto !important; aspect-ratio: 16 / 9; border: none; margin: 0; }
    .block-full-width-text {} /* Uses .markdown-content */


    /* --- UPDATED: Horizontal Gallery --- */
    .block-horizontal-gallery {
        position: relative;
        width: 100%;
        box-sizing: border-box;
    }
    .gallery-scroll-container {
        display: flex;
        overflow-x: auto !important;
        overflow-y: hidden;
        /* --- ADDED: Gap between flex items --- */
        gap: var(--gallery-item-gap);

        /* Adjust padding to account for gap AND buttons */
        padding-bottom: calc(var(--spacing-md) + var(--scrollbar-width));
        padding-left: calc(var(--gallery-nav-button-size) / 2 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
        padding-right: calc(var(--gallery-nav-button-size) / 2 + var(--spacing-xs) + var(--gallery-item-gap) / 2);

        scroll-snap-type: x mandatory;
        /* --- ADDED: Scroll padding to offset snap point by gap --- */
        scroll-padding-left: calc(var(--gallery-nav-button-size) / 2 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
        scroll-padding-right: calc(var(--gallery-nav-button-size) / 2 + var(--spacing-xs) + var(--gallery-item-gap) / 2);

        scrollbar-width: thin;
        scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);
        max-height: 70vh;
        width: 100%;
        box-sizing: border-box;
        margin-left: auto;
        margin-right: auto;
    }
    /* Optional: Custom scrollbar styling */
    .gallery-scroll-container::-webkit-scrollbar { height: var(--scrollbar-width); }
    .gallery-scroll-container::-webkit-scrollbar-track { background: var(--scrollbar-track-color); border-radius: calc(var(--scrollbar-width) / 2); }
    .gallery-scroll-container::-webkit-scrollbar-thumb { background-color: var(--scrollbar-thumb-color); border-radius: calc(var(--scrollbar-width) / 2); border: 2px solid var(--scrollbar-track-color); }

    .gallery-item {
        /* Keep item itself as 100% of the theoretical *scroll area width* */
        flex: 0 0 100%;
        min-width: 100%;
        scroll-snap-align: center; /* Keep snap to center */
        height: auto;
        max-height: 100%;
        border-radius: var(--border-radius-sm);
        overflow: hidden;
        background-color: var(--color-border-light);
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .gallery-item img, .gallery-item picture {
        display: block;
        width: auto;
        max-width: 100%;
        height: auto;
        max-height: 100%;
        aspect-ratio: 4 / 3;
        object-fit: contain;
        margin: 0 auto;
    }
     .gallery-item.placeholder p {
         font-style: italic;
         color: var(--color-text-secondary);
         padding: var(--spacing-md);
     }

    /* --- Gallery Navigation Buttons (Keep as is) --- */
    .gallery-nav-button { /* ... */
        position: absolute; top: 50%; transform: translateY(-50%); z-index: 10;
        background-color: rgba(0, 0, 0, 0.5); color: white; border: none; border-radius: 50%;
        width: var(--gallery-nav-button-size); height: var(--gallery-nav-button-size);
        font-size: calc(var(--gallery-nav-button-size) * 0.6);
        line-height: var(--gallery-nav-button-size); text-align: center;
        cursor: pointer; opacity: 0.7; transition: opacity 0.2s ease, background-color 0.2s ease;
        padding: 0; display: flex; align-items: center; justify-content: center;
    }
    .gallery-nav-button:hover { opacity: 1; background-color: rgba(0, 0, 0, 0.7); }
    .gallery-nav-button.prev { left: var(--spacing-sm); }
    .gallery-nav-button.next { right: var(--spacing-sm); }
    .gallery-nav-button.hidden { display: none; }


    /* ... (keep remaining styles: .markdown-content, .block-unknown, .entry-separator, @media mobile) ... */
     /* Fallback Markdown Content */
    .markdown-content :global(p), .markdown-content :global(ul), .markdown-content :global(ol), .markdown-content :global(blockquote) { line-height: var(--line-height-unified); margin-bottom: var(--spacing-sm); }
    .markdown-content :global(h1), .markdown-content :global(h2), .markdown-content :global(h3), .markdown-content :global(h4) { margin-top: var(--spacing-lg); margin-bottom: var(--spacing-xs); line-height: 1.2; }
    .markdown-content :global(ul), .markdown-content :global(ol) { padding-left: var(--spacing-lg); }
    .markdown-content :global(li) > :global(p) { margin-bottom: var(--spacing-xxs); }
    .markdown-content :global(blockquote) { margin-left: var(--spacing-sm); padding-left: var(--spacing-md); border-left: 3px solid var(--color-border-light); color: var(--color-text-secondary); font-style: italic; }
    .markdown-content :global(img) { max-width: 100%; height: auto; display: block; margin-top: var(--spacing-md); margin-bottom: var(--spacing-md); border-radius: var(--border-radius-sm); }
    .markdown-content :global(a) { color: var(--color-text-hover); text-decoration: underline; text-decoration-thickness: 1px; text-underline-offset: 2px; }
    .markdown-content :global(a:hover) { color: var(--color-text-unified); text-decoration: none; }
    /* Unknown Block */
    .block-unknown p { font-style: italic; color: var(--color-text-secondary); border: 1px dashed var(--color-border); padding: var(--spacing-sm); }
    /* Separator */
    .entry-separator { border: none; border-top: var(--line-thickness) solid var(--color-border); margin-top: var(--spacing-xl); }
    /* --- Mobile Styles --- */
    @media (max-width: 768px) {
        /* --- ADDED: Mobile gap size --- */
        :root {
             --gallery-item-gap: var(--spacing-sm); /* Smaller gap on mobile */
        }

        .feed-entry { margin-bottom: var(--spacing-lg); padding-bottom: var(--spacing-sm); scroll-margin-top: calc(var(--header-height-estimate-mobile-px, 92px) + 6rem); }
        .feed-entry-blocks { margin-top: var(--spacing-md); }
        .content-block { margin-bottom: var(--spacing-md); }
        .block-two-column { flex-direction: column; gap: var(--spacing-md); }
        .entry-separator { margin-top: var(--spacing-lg); }
        .feed-entry-date { font-size: 0.85em; }

        /* --- UPDATED: Mobile Gallery Adjustments --- */
        .gallery-scroll-container {
             gap: var(--gallery-item-gap); /* Use mobile gap */
             max-height: 50vh;
             /* Adjust padding for mobile button size and gap */
             padding-left: calc(var(--gallery-nav-button-size) / 3 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
             padding-right: calc(var(--gallery-nav-button-size) / 3 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
             /* Adjust scroll-padding */
             scroll-padding-left: calc(var(--gallery-nav-button-size) / 3 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
             scroll-padding-right: calc(var(--gallery-nav-button-size) / 3 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
        }
        .gallery-item img, .gallery-item picture { aspect-ratio: 4 / 3; }
        .gallery-nav-button { --gallery-nav-button-size: 2rem; }
         .gallery-nav-button.prev { left: var(--spacing-xs); }
         .gallery-nav-button.next { right: var(--spacing-xs); }
    }

</style>---
// src/layouts/BaseLayout.astro
interface Props {
    title?: string;
}
const { title = 'Portfolio' } = Astro.props;
---
<!doctype html>
<html lang="en" class="desktop-layout">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <title>{title}</title>
    <style is:global>
        @import '../styles/global.css'; /* Keep */
  
       :root {
          /* Keep variables */
          --scrollbar-track-color: #222;
          --scrollbar-thumb-color: #555;
          --scrollbar-width: 8px;
          --desktop-identity-width: 31.8%;
          --desktop-divider-width: 2%;
          --desktop-main-header-width: 66.2%;
          --desktop-content-padding: var(--content-padding-x-desktop, 20px);
          --header-area-height: 90px;
          --desktop-content-padding-top: var(--spacing-xl);
          --desktop-content-padding-bottom: var(--spacing-lg);
       }
  
      html {
           height: 100%; /* Ensure html takes full height */
           box-sizing: border-box;
      }
      *, *:before, *:after {
          box-sizing: inherit;
      }
  
      body {
          background-color: var(--color-background);
          margin: 0;
          overscroll-behavior: none;
          min-height: 100%; /* Use min-height */
          height: 100%; /* Explicit height */
          overflow: hidden; /* Hide body overflow for desktop grid */
          position: relative; /* Ensure body is positioning context if needed */
      }
  
      /* --- TARGET #app-container DIRECTLY for DESKTOP --- */
      /* Apply grid layout only when screen is wider than mobile breakpoint */
      @media (min-width: 769px) { /* Use min-width for desktop */
          #app-container {
              display: grid !important; /* Force grid display */
              grid-template-columns:
                  var(--desktop-content-padding)
                  var(--desktop-identity-width)
                  var(--desktop-divider-width)
                  var(--desktop-main-header-width)
                  var(--desktop-content-padding);
              grid-template-rows:
                  var(--header-area-height)
                  1fr; /* Content row takes remaining space */
              height: 100vh; /* Full viewport height */
              box-sizing: border-box;
              overflow: hidden; /* Prevent container itself from scrolling */
              position: relative; /* Ensure positioning context */
          }
  
          /* Grid Area Assignments for Desktop */
          #identity-header-area,
          #main-header-area {
              grid-row: 1 / 2; position: relative; overflow: hidden;
              box-sizing: border-box; border-bottom: var(--line-thickness) solid var(--color-border);
              display: flex !important; /* Force flex display */
              align-items: center; font-size: 1.5em;
              z-index: 20; background-color: var(--color-header-bg);
          }
          #identity-header-area { grid-column: 2 / 3; justify-content: flex-start; }
          #main-header-area { grid-column: 4 / 5; justify-content: space-between; }
  
          #divider-area {
              grid-column: 3 / 4; grid-row: 1 / 3; background-color: var(--color-border);
              z-index: 10; position: relative;
               display: block !important; /* Ensure visible */
          }
          #divider-area::before {
               content: ''; position: absolute; top: 0; bottom: 0; left: 50%;
               transform: translateX(-50%); width: 1px; background-color: #ffffff;
               opacity: 0.6;
          }
  
          #info-content-area {
              grid-column: 2 / 3; grid-row: 2 / 3; position: relative;
              overflow: hidden; /* No scroll */
              padding: var(--desktop-content-padding-top) 0 var(--desktop-content-padding-bottom);
              box-sizing: border-box;
               display: block !important; /* Ensure visible in default view */
          }
          #feed-content-area {
              grid-column: 4 / 5; grid-row: 2 / 3; position: relative;
              overflow-y: auto; /* Scroll */
              padding: var(--desktop-content-padding-top) 0 var(--desktop-content-padding-bottom);
              box-sizing: border-box;
              scrollbar-width: thin;
              scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);
               display: block !important; /* Ensure visible in default view */
          }
          #feed-content-area::-webkit-scrollbar { width: var(--scrollbar-width); }
          #feed-content-area::-webkit-scrollbar-track { background: var(--scrollbar-track-color); }
          #feed-content-area::-webkit-scrollbar-thumb { background-color: var(--scrollbar-thumb-color); border-radius: calc(var(--scrollbar-width) / 2); border: 2px solid var(--scrollbar-track-color); }
  
          #overview-content-area {
              grid-column: 2 / 5; grid-row: 2 / 3; position: relative;
              overflow-y: auto;
              padding: var(--desktop-content-padding-top) 0 var(--desktop-content-padding-bottom);
              box-sizing: border-box;
              display: none; /* Still hidden by default */
              scrollbar-width: thin;
              scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);
          }
  
           /* Hide Mobile Header Row on Desktop */
           #mobile-header-row { display: none !important; }
  
      } /* End of desktop media query */
  
  
      /* --- Mobile Styles (Simplified) --- */
      @media (max-width: 768px) {
          body {
              height: auto; /* Allow body height to grow */
              overflow: visible; /* Allow body scroll */
          }
           #app-container {
              display: flex; flex-direction: column;
              height: auto; overflow: visible;
               position: static; /* Reset position */
          }
          #divider-area { display: none; }
  
          #mobile-header-row {
              display: flex !important; /* Ensure visible */
              width: 100%; box-sizing: border-box;
              padding: 0 var(--content-padding-x-mobile);
              border-bottom: var(--line-thickness) solid var(--color-border);
              font-size: initial; position: static; z-index: auto;
          }
  
          #identity-header-area,
          #main-header-area {
              grid-column: auto; grid-row: auto; position: static; overflow: visible;
              padding: var(--spacing-sm) 0; border-bottom: none; max-height: none;
              box-sizing: border-box; display: flex; align-items: baseline;
              font-size: var(--font-size-mobile-header-responsive);
              z-index: auto; background-color: transparent;
               width: 50%; /* Keep 50/50 split */
          }
          #identity-header-area { justify-content: flex-start; }
          #main-header-area { justify-content: flex-end; }
  
          #info-content-area,
          #feed-content-area,
          #overview-content-area {
               grid-column: auto; grid-row: auto; position: static; overflow: visible;
               padding: var(--spacing-lg) var(--content-padding-x-mobile);
               border: none; max-height: none; width: 100%; box-sizing: border-box;
               display: none; /* Hidden by default - controlled by JS */
          }
              /* Default State (Desktop Feed View) */
    .layout-desktop #info-content-area,
    .layout-desktop #feed-content-area { display: block; }
    .layout-desktop #overview-content-area { display: none; }
    .layout-desktop #divider-area { display: block; }
    .layout-desktop #mobile-header-row { display: none; }


    /* Desktop Overview View */
    .layout-desktop.view-overview #info-content-area,
    .layout-desktop.view-overview #feed-content-area { display: none; }
    .layout-desktop.view-overview #overview-content-area { display: block; }
    .layout-desktop.view-overview #divider-area { display: none; } /* Hide divider */

    /* Mobile Default State (Feed View) */
    .layout-mobile #info-content-area,
    .layout-mobile #overview-content-area { display: none; }
    .layout-mobile #feed-content-area { display: block; }
    .layout-mobile #divider-area { display: none; }
    .layout-mobile #mobile-header-row { display: flex; } /* Ensure visible */
     /* Hide desktop grid headers on mobile */
     .layout-mobile #identity-header-area,
     .layout-mobile #main-header-area {
         /* Display handled by mobileHeaderRow flex */
     }


    /* Mobile Info View */
    .layout-mobile.view-info #info-content-area { display: block; }
    .layout-mobile.view-info #feed-content-area,
    .layout-mobile.view-info #overview-content-area { display: none; }

    /* Mobile Overview View */
    .layout-mobile.view-overview #overview-content-area { display: block; }
    .layout-mobile.view-overview #info-content-area,
    .layout-mobile.view-overview #feed-content-area { display: none; }
    /* Keep headers visible in mobile overview */
    .layout-mobile.view-overview #mobile-header-row { display: flex; }
      }
      </style>
</head>
<body>
    <div id="app-container">
        {/* Mobile Header Row Wrapper */}
        <div id="mobile-header-row">
            <div id="identity-header-area"><slot name="identity-header" /></div>
            <div id="main-header-area"><slot name="main-header" /></div>
        </div>
        {/* Divider */}
        <div id="divider-area"></div>
        {/* Content Areas */}
        <div id="info-content-area"><slot name="info-content" /></div>
        <div id="feed-content-area"><slot name="feed-content" /></div>
        <div id="overview-content-area"><slot name="overview-content" /></div>
    </div>
    {/* Script lives in index.astro */}
</body>
</html>---
// src/components/Header.astro (Right Side Only)
const contactEmail = "hey@mittel.tv";
---
<div class="main-header-wrapper">
    {/* --- Direct Children for Flex Layout --- */}
    <div class="header-sub-col feed-button-desktop-container">
        <button type="button" id="feed-view-btn" class="desktop-only">
            Feed
        </button>
    </div>
    <div class="header-sub-col overview-button-container">
        <button type="button" id="overview-view-btn">
           {/* Arrow only needed for mobile? Kept structure for now */}
           <span class="arrow mobile-only">â</span> Overview
        </button>
    </div>
    <div class="header-contact-item">
        <a href={`mailto:${contactEmail}`} id="contact-link">
           <span class="arrow mobile-only">â</span> Contact
        </a>
    </div>

    {/* --- Mobile Specific Buttons (Hidden on Desktop) --- */}
    <div class="header-sub-col info-button-mobile-container">
        <button type="button" id="info-view-btn" class="mobile-only">
            <span class="arrow">â</span> Info
        </button>
    </div>
</div>

<style>
    /* Styles specific to the main (right-side) header */
    .main-header-wrapper {
        display: flex;
        /* --- Use space-around for even distribution --- */
        justify-content: space-around;
        align-items: baseline;
        width: 100%;
        height: 100%;
        box-sizing: border-box;
        font-size: inherit; /* Inherit base size (1.5em on desktop) */
        padding-left: var(--header-internal-padding); /* Space after divider */
        padding-right: 0; /* Padding is on parent grid area */
    }

    /* Style direct children for flex distribution */
    .main-header-wrapper > div {
        flex-basis: auto;
        /* Let items grow/shrink somewhat to fill space */
        flex-grow: 1;
        flex-shrink: 1;
        display: flex;
        align-items: baseline;
        /* Center content within each item's space */
        justify-content: center;
        text-align: center;
    }
     /* Override for contact link - stay right, don't grow */
     .header-contact-item {
        justify-content: flex-end;
        text-align: right;
        flex-grow: 0;
        flex-shrink: 0; /* Prevent shrinking */
     }


    /* Specific item styles */
    .header-contact-item a {
        color: inherit; text-decoration: none; line-height: inherit; margin: 0;
    }
    button { /* Base button reset if needed */
        font-size: inherit; /* Inherit header font size */
    }
    .arrow { display: inline-block; margin-right: var(--arrow-spacing); }

    /* Visibility toggles */
    .mobile-only { display: none; }
    .desktop-only { display: inline-block; }
    .info-button-mobile-container { display: none; } /* Hidden by default */


    /* --- Mobile Styles --- */
    @media (max-width: 768px) and (orientation: portrait) {
        .main-header-wrapper {
            display: flex;
            flex-direction: column; /* Stack */
            align-items: flex-end; /* Align right */
            justify-content: flex-start; /* Align top */
            gap: var(--spacing-xxs);
            /* Inherit mobile size */
            font-size: inherit;
            height: auto;
            padding: 0; /* Padding handled by parent area */
            width: 100%;
        }
        /* Ensure items flow correctly in column */
        .main-header-wrapper > div {
            width: auto;
            flex-grow: 0; /* Reset grow */
            justify-content: flex-end; /* Align button content right */
            text-align: right;
            order: 0; /* Default order */
        }
        /* Hide desktop button, show mobile info button */
        .feed-button-desktop-container { display: none !important; }
        .info-button-mobile-container { display: flex !important; order: 1; }
        .overview-button-container { display: flex; order: 2; }
        .header-contact-item { display: flex; order: 3; }

        .mobile-only { display: inline-block !important; }
        .desktop-only { display: none !important; }

        /* Specific mobile button/link styling */
        .main-header-wrapper button,
        .main-header-wrapper a {
            padding: var(--spacing-xxs) 0; width: auto;
            line-height: 1.3; display: inline-flex; align-items: baseline; margin: 0;
        }
         .main-header-wrapper button { /* Astro scopes CSS, separate rule ok */ }
    }
    /* Landscape uses desktop styles via inheritance */

</style>---
// src/components/StaticInfo.astro
const introText = "Good that you're here. I'll gladly help you out with a variety of tasks related to on-the-ground reporting and media production in Poland, Germany and beyond. Clients who have relied on my services include Channel 4 News, NPR, The New York Times, The Washington Post and many others. Have a look at some of my recent work highlights and don't hesitate to get in touch if I can support your assignment."
---
<div class="static-info-wrapper">
    <div class="static-column static-column-left">
        <div class="placeholder-visual">STATIC VISUAL</div>
    </div>
    <div class="static-column static-column-right">
        <p>{introText}</p>
    </div>
</div>

<style>
    /* --- DESKTOP / DEFAULT / LANDSCAPE --- */
    .static-info-wrapper {
        display: flex;
        flex-direction: row; /* Default: side-by-side */
        gap: var(--column-gap-desktop); /* Use layout variable */
        height: 100%;
    }
    .static-column {
        flex-basis: 0;
        flex-grow: 1;
        min-width: 0;
    }
    .static-column p {
        margin-top: 0;
        line-height: var(--line-height-unified);
    }
    .placeholder-visual {
        width: 100%;
        min-height: 200px;
        background-color: rgba(var(--color-text-unified-rgb, 204, 204, 204), 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.9em;
        color: rgba(var(--color-text-unified-rgb, 204, 204, 204), 0.6);
        border: var(--line-thickness) dashed var(--color-border);
        padding: var(--spacing-md);
    }
    /* Ensure RGB var is defined globally */

    /* ================================== */
    /* --- MOBILE - PORTRAIT ONLY --- */
    /* ================================== */
    @media (max-width: 768px) and (orientation: portrait) {
        .static-info-wrapper {
             flex-direction: column; /* Stack columns in portrait */
             gap: var(--spacing-lg);
        }
        .placeholder-visual {
            min-height: 150px;
        }
    }
     /* --- NO specific landscape override needed, uses default --- */
</style>---
// src/components/IdentityHeader.astro
const siteName = "Piotr Å»akowiecki";
const tagline = "field producer | videojournalist | researcher";
---
<div class="identity-header-wrapper">
    <span class="identity-site-name-text">{siteName}</span>
    <span class="identity-tagline">{tagline}</span>
</div>

<style>
    .identity-header-wrapper {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: center; /* Try centering vertically */
        line-height: 1.2;
        width: 100%;
        height: 100%;
        box-sizing: border-box;
        font-size: inherit; /* Inherit base size (1.5em on desktop) */
        padding-left: 0; /* Padding is on parent grid area */
        padding-right: var(--header-internal-padding); /* Space before divider */
    }
    .identity-site-name-text {
        display: inline-block;
        margin: 0; padding: 0;
        font-weight: var(--font-weight-bold);
        margin-bottom: 0;
        /* Slightly larger relative to wrapper */
        font-size: 1.1em;
    }
    .identity-tagline {
        display: block;
        color: var(--color-text-secondary);
        /* Adjusted relative size */
        font-size: 0.7em;
        font-weight: var(--font-weight-regular);
        line-height: inherit;
        margin: 0;
    }

     @media (max-width: 768px) {
         .identity-header-wrapper {
             /* Inherit mobile size set on #identity-header-area */
             font-size: inherit;
             height: auto;
             padding: 0; /* No internal padding needed */
             justify-content: baseline; /* Align top */
             align-items: flex-start;
         }
         .identity-site-name-text { font-size: 1em; } /* Reset relative size */
         .identity-tagline { font-size: 0.6em; }
     }
</style>---
// src/components/OverviewGrid.astro
import GridItem from './GridItem.astro';

export interface Props {
    items: Array<{ id: string; title: string; imageUrl?: string; altText?: string; }>;
}
const { items = [] } = Astro.props;
---
<div id="overview-grid-wrapper" class="overview-grid-wrapper">
    {items.length > 0 ? (
        <div class="overview-grid">
            {items.map(item => (
                <GridItem item={item} />
            ))}
        </div>
    ) : (
        <p>No overview items found.</p>
    )}
</div>

<style>
    .overview-grid-wrapper {
      padding: 0;
    }

    /* --- DESKTOP / DEFAULT / LANDSCAPE --- */
    .overview-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr); /* Default: 4 columns */
        gap: 1.5rem; /* Default gap */
        /* Removed debug border */
    }

    /* ================================== */
    /* --- MOBILE - PORTRAIT ONLY --- */
    /* ================================== */
    @media (max-width: 768px) and (orientation: portrait) {
        .overview-grid {
            grid-template-columns: repeat(2, 1fr); /* Mobile Portrait: 2 columns */
            gap: 1rem; /* Mobile gap */
        }
    }
     /* Removed landscape specific rule - landscape uses default */
     /* Removed max-width: 480px rule */
</style>---
// src/components/GridItem.astro
export interface Props {
    item: { id: string; title: string; imageUrl?: string; altText?: string; };
}
const { item } = Astro.props;
const itemLink = `#${item.id}`;
---
<a href={itemLink} class="grid-item" data-target-id={item.id}>
    <div class="grid-item-thumbnail">
        {item.imageUrl ? (
            <img src={item.imageUrl} alt={item.altText ?? `Thumbnail for ${item.title}`} loading="lazy" />
        ) : (
            <span class="placeholder-text">THUMB</span>
        )}
    </div>
    <div class="grid-item-label">{item.title ?? 'Untitled'}</div>
</a>

<style>
    /* Ensure variables used below are defined in global.css */

    .grid-item {
        display: block;
        text-decoration: none;
        color: inherit;
        text-align: center;
        /* --- RESTORED BACKGROUND and BORDER --- */
        background-color: var(--color-surface-light);
        border: var(--line-thickness) solid var(--color-border);
        padding: var(--spacing-xs); /* Keep padding */
        /* --- RESTORED TRANSITION --- */
        transition: background-color 0.2s ease, border-color 0.2s ease;
        box-sizing: border-box;
        overflow: hidden; /* Keep overflow hidden */
    }

    .grid-item-thumbnail {
        aspect-ratio: 1 / 1;
        background-color: rgba(var(--color-text-unified-rgb), 0.1);
        margin-bottom: var(--spacing-xs);
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        /* Removed internal border, main border is on .grid-item */
        /* border: 1px solid rgba(var(--color-text-unified-rgb), 0.2); */
        width: 100%;
    }
     .grid-item-thumbnail .placeholder-text {
        font-size: 0.8em;
        color: rgba(var(--color-text-unified-rgb), 0.6);
     }

    .grid-item-thumbnail img {
        display: block;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .grid-item-label {
        font-size: 0.9em;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        color: var(--color-text-unified);
        padding: 0 var(--spacing-xxs);
        display: block;
        width: 100%;
    }

    /* --- RESTORED HOVER STYLE --- */
    .grid-item:hover {
        background-color: var(--color-surface-light-hover); /* Use variable */
        /* border-color: var(--color-accent); */ /* Keep optional border commented */
    }

     /* --- Mobile Adjustments --- */
     @media (max-width: 768px) {
        .grid-item {
            padding: var(--spacing-xxs);
        }
        .grid-item-thumbnail {
            margin-bottom: var(--spacing-xxs);
        }
        .grid-item-label {
            font-size: 0.85em;
        }
     }
</style>