---
// src/layouts/LandingLayout.astro
interface Props {
    title?: string;
    backgroundImageUrl?: string;
    backgroundAltText?: string; 
}
const { 
    title = 'Mittel.TV', 
    backgroundImageUrl = '/uploads/placeholder-landing-bg.jpg',
    backgroundAltText = 'Abstract background image' 
} = Astro.props;
---
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <title>{title}</title>
    
    <script is:inline>
      // ... (your theme script remains the same) ...
      const THEME_KEY = 'theme-preference';
      const THEME_CLASS_LIGHT = 'light-mode';
      const THEME_CLASS_DARK = 'dark-mode';

      const getThemePreference = () => {
        if (typeof localStorage !== 'undefined') {
          return localStorage.getItem(THEME_KEY);
        }
        return window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
      };

      const applyTheme = (theme) => {
        document.documentElement.classList.remove(THEME_CLASS_LIGHT, THEME_CLASS_DARK);
        if (theme === 'light') {
          document.documentElement.classList.add(THEME_CLASS_LIGHT);
        } else {
          // document.documentElement.classList.add(THEME_CLASS_DARK); 
        }
      };

      let currentTheme = getThemePreference();
      applyTheme(currentTheme);

      window.toggleTheme = () => {
        currentTheme = currentTheme === 'light' ? 'dark' : 'light';
        localStorage.setItem(THEME_KEY, currentTheme);
        applyTheme(currentTheme);
        document.dispatchEvent(new CustomEvent('themechanged', { detail: { theme: currentTheme } }));
      };
    </script>

    <style is:global>
        @import '../styles/global.css'; 

        html {
            height: 100%; /* Ensure html takes full height */
        }
        body.landing-body-fullscreen { /* Applied to body */
            background-image: var(--landing-bg-image-url-var); /* Renamed for clarity */
            background-size: cover;
            background-position: center center;
            background-attachment: fixed; 
            background-repeat: no-repeat;
            min-height: 100%; /* Changed from 100vh to 100% to work with html height */
            width: 100%;     /* Changed from 100vw to 100% */
            margin: 0; /* Ensure no body margin */
            
            display: flex; 
            flex-direction: column; /* Main axis for content alignment */
            align-items: center;    /* Center slot content horizontally */
            justify-content: flex-start;/* Center slot content vertically */
            padding-top: 55vh;

            color: var(--color-text-unified); 
            padding-left: var(--spacing-lg);  /* Keep side padding */
            padding-right: var(--spacing-lg); /* Keep side padding */
            padding-bottom: var(--spacing-lg);/* Add bottom padding too */
            text-align: center;
            overflow: hidden; 
            box-sizing: border-box;
            font-size: var(--font-size-desktop-unified); 
            line-height: var(--line-height-unified);
            background-color: var(--color-background); 
        }
    </style>
    {/* MODIFIED: Renamed variable to avoid potential conflicts and for clarity */}
    <style define:vars={{ 'landing-bg-image-url-var': `url('${backgroundImageUrl}')` }}>
    </style>
</head>
<body class="landing-body-fullscreen">
    {/* The slot will contain the theme button and the main content wrapper */}
    <slot /> 
</body>
</html>