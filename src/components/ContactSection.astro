---
// src/components/ContactSection.astro
import { getEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { render as parseMarkdown } from './MarkdownRenderer.astro';

const contactEntry = await getEntry('general_content', 'contact_page');

let imageUrl: string | undefined = undefined;
let imageAlt: string = "";
let htmlContactText: string = "<p>Error: Contact content not loaded or empty.</p>";

if (contactEntry && contactEntry.data) {
  imageUrl = contactEntry.data.contactPageImage;
  imageAlt = contactEntry.data.contactPageImageAlt || "Contact image";
  if (typeof contactEntry.data.contactPageText === 'string') {
    htmlContactText = parseMarkdown(contactEntry.data.contactPageText);
  }
} else {
  console.error("ContactSection.astro: Could not load content from 'general_content/contact_page.md'. Entry:", contactEntry);
}
---

<div class="contact-section-wrapper">
  {imageUrl && (
    <div class="contact-image-container">
      <Image src={imageUrl} alt={imageAlt} width={1000} height={750} format="webp" quality={80} loading="lazy" />
    </div>
  )}
  <div class="contact-text-container markdown-content" set:html={htmlContactText}>
    {/* Content injected by set:html */}
  </div>
</div>

<style>
  .contact-section-wrapper {
    display: grid; /* CHANGED to grid for desktop */
    /* Define 3 columns using the global variables for desktop column widths */
    /* These percentages will apply to the width of .contact-section-wrapper itself */
    grid-template-columns: var(--desktop-identity-width) var(--desktop-divider-width) var(--desktop-main-header-width);
    align-items: flex-start;
    /* No 'gap' property here; the middle column acts as the conceptual gap,
       or padding on the text container will create visual separation. */
  }

  .contact-image-container {
    /* Image container will span the first two columns (identity + divider width) */
    grid-column: 1 / span 2; /* Start at column 1, span 2 columns */
    
    min-width: 0; /* Prevent overflow */
    max-height: 70vh; 
    overflow: hidden;
    border-radius: var(--border-radius-sm);
    background-color: var(--color-border-light); /* Fallback if image doesn't load or has transparency */
    /* No padding-right needed here as it spans the divider column area */
  }

  .contact-image-container :global(img) {
    display: block;
    width: 100%;
    height: 100%; 
    object-fit: cover; 
    object-position: top center;
    /* border-radius can be on the image if it always fills, or on container with overflow:hidden */
  }

  .contact-text-container {
    /* Text container will occupy the third column (main header width) */
    grid-column: 3 / 4; 
    
    /* This padding-left aligns the text content within this container
       to match the content start of #main-header-area (e.g., "Highlights" button) */
    padding-left: var(--spacing-md); 
    min-width: 0; /* Prevent overflow */
  }

  .contact-text-container :global(h3:first-child) {
    margin-top: 0;
  }

  @media (max-width: 768px) {
    /* Mobile: Revert to flex column layout */
    .contact-section-wrapper {
      display: flex; /* Revert to flex for mobile */
      flex-direction: column;
      gap: var(--column-gap-mobile, var(--spacing-md));
      /* Reset grid properties if any were inherited that might conflict */
      grid-template-columns: none; 
    }
    .contact-image-container {
      grid-column: auto; /* Reset grid placement */
      width: 100%;
      max-width: 100%;
      max-height: 50vh;
    }
    .contact-text-container {
      grid-column: auto; /* Reset grid placement */
      width: 100%;
      padding-left: 0; /* Reset desktop-specific padding */
    }
  }
</style>