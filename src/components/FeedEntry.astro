---
// src/components/FeedEntry.astro
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { marked } from 'marked'; // Import marked directly

// --- Define Types for Content Blocks ---
interface TwoColumnBlock {
    twoColumn: {
        left?: string;
        right?: string;
    };
}
interface FullWidthImageBlock {
    fullWidthImage: {
        image?: string;
        alt?: string;
    };
}
interface FullWidthEmbedBlock {
    fullWidthEmbed: {
        embedCode?: string;
    };
}
type ContentBlock = TwoColumnBlock | FullWidthImageBlock | FullWidthEmbedBlock;

// --- Component Props ---
interface Props {
    entry: CollectionEntry<'feed'> & {
        data: {
            contentBlocks?: ContentBlock[];
            title?: string;
            date?: Date;
            thumbnail?: string;
        }
    };
}

const { entry } = Astro.props;
const { slug, data } = entry;

const formattedDate = data.date
    ? new Date(data.date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    })
    : null;

function isValidImageSource(src: any): src is string {
    return typeof src === 'string' && src.trim() !== '';
}

// Function to safely parse Markdown (ensure synchronous operation)
// marked.parse should be synchronous by default unless extensions make it async.
// We'll add explicit type assertion for the return.
function parseMarkdown(markdownString?: string): string {
    if (!markdownString) return '';
    try {
        // Explicitly use synchronous parsing if available or needed
        // Or cast the result if we're sure it's sync in our config
        const htmlResult = marked.parse(markdownString) as string; // Type assertion
        return htmlResult;
    } catch (e) {
        console.error("Error parsing Markdown:", e);
        return '<p>Error rendering content.</p>';
    }
}
---
<article class="feed-entry" id={slug}>
    <h3>{data.title || 'Untitled Entry'}</h3>
    {formattedDate && (
        <time class="feed-entry-date" datetime={data.date?.toISOString()}>{formattedDate}</time>
    )}

    {/* --- Content Block Rendering --- */}
    <div class="feed-entry-blocks">
        {data.contentBlocks && data.contentBlocks.length > 0 ? (
            // Add explicit type to 'block' parameter here
            data.contentBlocks.map((block: ContentBlock) => {
                // --- Two Column Block ---
                if ('twoColumn' in block && block.twoColumn) {
                    const content = block.twoColumn;
                    return (
                        <div class="content-block block-two-column">
                            {content.left && (
                                <div class="column left-column" set:html={parseMarkdown(content.left)}>
                                    {/* HTML injected */}
                                </div>
                            )}
                            {content.right && (
                                <div class="column right-column" set:html={parseMarkdown(content.right)}>
                                    {/* HTML injected */}
                                </div>
                            )}
                        </div>
                    );
                }
                // --- Full Width Image Block ---
                else if ('fullWidthImage' in block && block.fullWidthImage) {
                    const content = block.fullWidthImage;
                    const imagePath = content.image;
                    const altText = content.alt || '';

                    return isValidImageSource(imagePath) ? (
                        <div class="content-block block-full-width-image">
                            {/* --- IMPORTANT: NO COMMENTS INSIDE THE <Image /> TAG --- */}
                            <Image
                                src={imagePath}
                                alt={altText}
                                width={1200}
                                height={900}
                                format="webp"
                                loading="lazy"
                                densities={[1, 1.5, 2]}
                            />
                            {/* Add comments outside the tag if needed */}
                            {/* Example width=1200. Adjust as needed. */}
                            {/* Optional height can be added. */}
                            {/* Optional responsive densities specified. */}
                        </div>
                    ) : (
                         <div class="content-block block-missing-image">
                             <p><em>Image not available ({imagePath || 'path missing'})</em></p>
                         </div>
                    );
                }
                // --- Full Width Embed Block ---
                else if ('fullWidthEmbed' in block && block.fullWidthEmbed) {
                    const content = block.fullWidthEmbed;
                    return content.embedCode ? (
                        <div class="content-block block-full-width-embed" set:html={content.embedCode}>
                            {/* Raw HTML injected */}
                        </div>
                    ) : null;
                }
                // --- Fallback for Unknown Blocks ---
                 else {
                    console.warn("Unsupported content block type found:", block);
                    return (
                        <div class="content-block block-unknown">
                            <p><em>Unsupported content block type.</em></p>
                        </div>
                    );
                 }
            })
        ) : (
            <p><em>No content blocks found for this entry.</em></p>
        )}
    </div>
    {/* --- End Content Block Rendering --- */}

    <hr class="entry-separator" />
</article>

{/* Styles remain unchanged - keep your existing <style> block */}
<style>
    :root {
        --feed-entry-column-gap: var(--column-gap-desktop, var(--spacing-lg));
    }

    .feed-entry {
        margin-bottom: var(--spacing-xl);
        padding-bottom: var(--spacing-md);
        scroll-margin-top: 2rem;
    }

    .feed-entry h3 {
        margin-top: 0;
        margin-bottom: var(--spacing-xxs);
        font-weight: var(--font-weight-unified);
        font-size: 1.1em;
        line-height: 1.3;
    }

    .feed-entry-date {
        display: block;
        font-size: var(--font-size-sm);
        color: var(--color-text-secondary);
        margin-bottom: var(--spacing-md);
    }

    .feed-entry-blocks {
        margin-top: var(--spacing-lg);
    }

    .content-block {
        margin-bottom: var(--spacing-lg);
    }
    .content-block:last-child {
        margin-bottom: 0;
    }

    /* Two Column Block */
    .block-two-column {
        display: flex;
        gap: var(--feed-entry-column-gap);
    }
    .block-two-column .column {
        flex: 1;
        min-width: 0;
    }
    .block-two-column .column > *:first-child { margin-top: 0; }
    .block-two-column .column > *:last-child { margin-bottom: 0; }
    .block-two-column .column p { line-height: var(--line-height-unified); margin-bottom: var(--spacing-sm); }
     .block-two-column .column h1,
     .block-two-column .column h2,
     .block-two-column .column h3,
     .block-two-column .column h4 { margin-bottom: var(--spacing-xs); margin-top: var(--spacing-md); line-height: 1.2; }
     .block-two-column .column ul,
     .block-two-column .column ol { margin-bottom: var(--spacing-sm); padding-left: var(--spacing-lg); }
     .block-two-column .column li > p { margin-bottom: var(--spacing-xxs); }
     .block-two-column .column blockquote {
         margin-left: var(--spacing-sm);
         padding-left: var(--spacing-md);
         border-left: 3px solid var(--color-border-light);
         color: var(--color-text-secondary);
         font-style: italic;
         margin-bottom: var(--spacing-sm);
     }


    /* Full Width Image Block */
    .block-full-width-image img,
    .block-full-width-image picture {
        display: block;
        width: 100%;
        height: auto;
        border-radius: var(--border-radius-sm);
        background-color: var(--color-border-light);
    }
     .block-missing-image p {
         font-style: italic;
         color: var(--color-text-secondary);
         background-color: var(--color-background-muted);
         padding: var(--spacing-md);
         border-radius: var(--border-radius-sm);
         text-align: center;
     }


    /* Full Width Embed Block */
    .block-full-width-embed > * {
        max-width: 100%;
    }
    .block-full-width-embed iframe {
        display: block;
        width: 100%;
        aspect-ratio: 16 / 9;
        border: none;
        background-color: var(--color-border-light);
    }

    .block-unknown p {
        font-style: italic;
        color: var(--color-text-secondary);
        border: 1px dashed var(--color-border);
        padding: var(--spacing-sm);
    }

    .entry-separator {
        border: none;
        border-top: var(--line-thickness) solid var(--color-border);
        margin-top: var(--spacing-xl);
    }

    @media (max-width: 768px) {
        :root { }
        .feed-entry {
            margin-bottom: var(--spacing-lg);
            padding-bottom: var(--spacing-sm);
            scroll-margin-top: calc(var(--header-height-estimate-mobile-px) + 1rem);
        }
        .feed-entry-blocks {
            margin-top: var(--spacing-md);
        }
        .content-block {
            margin-bottom: var(--spacing-md);
        }

        .block-two-column {
            flex-direction: column;
            gap: var(--spacing-md);
        }

        .entry-separator {
            margin-top: var(--spacing-lg);
        }
    }
</style>