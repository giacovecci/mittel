---
// src/components/FeedEntry.astro
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { marked } from 'marked';

// --- Define the type for a single content block based on the collection schema ---
// This extracts the type of the items within the 'contentBlocks' array
type ContentBlock = CollectionEntry<'feed'>['data']['contentBlocks'][number];

// --- Component Props ---
interface Props {
    entry: CollectionEntry<'feed'>;
}

const { entry } = Astro.props;
const { slug, data } = entry;

// --- Date Formatting ---
const formattedDate = data.date
    ? new Date(data.date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    })
    : null;

// --- Helper Functions ---
function isValidImageSource(src: any): src is string {
    return typeof src === 'string' && src.trim() !== '';
}

function parseMarkdown(markdownString?: string): string {
    if (!markdownString) return '';
    try {
        const htmlResult = marked.parse(markdownString) as string;
        return htmlResult;
    } catch (e) {
        console.error("Error parsing Markdown:", e);
        return '<p>Error rendering content.</p>';
    }
}
---
<article class="feed-entry" id={slug}>
    {/* --- Entry Header --- */}
    <h3>{data.title || 'Untitled Entry'}</h3>
    {formattedDate && (
        <time class="feed-entry-date" datetime={data.date?.toISOString()}>{formattedDate}</time>
    )}

    {/* --- Content Block Rendering --- */}
    <div class="feed-entry-blocks">
        {data.contentBlocks && data.contentBlocks.length > 0 ? (
            // Add the explicit type 'ContentBlock' to the 'block' parameter
            data.contentBlocks.map((block: ContentBlock) => {
                // --- Use block.type (from discriminated union) to determine rendering ---
                switch (block.type) {
                    // --- Two Column Block ---
                    case 'twoColumn':
                        return (
                            <div class="content-block block-two-column">
                                {block.left && (
                                    <div class="column left-column" set:html={parseMarkdown(block.left)}></div>
                                )}
                                {block.right && (
                                    <div class="column right-column" set:html={parseMarkdown(block.right)}></div>
                                )}
                            </div>
                        );

                    // --- Full Width Image Block ---
                    case 'fullWidthImage':
                        const imagePath = block.image;
                        const altText = block.alt || '';

                        return isValidImageSource(imagePath) ? (
                            <div class="content-block block-full-width-image">
                                {/* Re-verified <Image> syntax: width/height expect numbers */}
                                <Image
                                    src={imagePath}
                                    alt={altText}
                                    width={1200}
                                    height={900}
                                    format="webp"
                                    loading="lazy"
                                    densities={[1, 1.5, 2]}
                                />
                            </div>
                        ) : (
                             <div class="content-block block-missing-image">
                                 <p><em>Image not available ({imagePath || 'path missing'})</em></p>
                             </div>
                        );

                    // --- Full Width Embed Block ---
                    case 'fullWidthEmbed':
                        return block.embedCode ? (
                            <div class="content-block block-full-width-embed" set:html={block.embedCode}>
                                {/* Raw HTML injected */}
                            </div>
                        ) : null;

                    // --- Fallback for Unknown Blocks ---
                    default:
                        console.warn("Unsupported content block type found:", block);
                        return (
                            <div class="content-block block-unknown">
                                <p><em>Unsupported content block type.</em></p>
                            </div>
                        );
                }
            })
        ) : (
            <p><em>No content blocks found for this entry.</em></p>
        )}
    </div>
    {/* --- End Content Block Rendering --- */}

    <hr class="entry-separator" />
</article>

{/* Styles remain the same - No changes needed here */}
<style>
    :root {
        --feed-entry-column-gap: var(--column-gap-desktop, var(--spacing-lg));
    }

    .feed-entry {
        margin-bottom: var(--spacing-xl);
        padding-bottom: var(--spacing-md);
        scroll-margin-top: 2rem; /* Adjust based on sticky header height */
    }

    .feed-entry h3 {
        margin-top: 0;
        margin-bottom: var(--spacing-xxs);
        font-weight: var(--font-weight-unified);
        font-size: 1.1em; /* Consider using clamp() or responsive units */
        line-height: 1.3;
    }

    .feed-entry-date {
        display: block;
        font-size: var(--font-size-sm);
        color: var(--color-text-secondary);
        margin-bottom: var(--spacing-md);
    }

    .feed-entry-blocks {
        margin-top: var(--spacing-lg);
    }

    .content-block {
        margin-bottom: var(--spacing-lg);
    }
    .content-block:last-child {
        margin-bottom: 0;
    }

    /* Two Column Block */
    .block-two-column {
        display: flex;
        gap: var(--feed-entry-column-gap);
    }
    .block-two-column .column {
        flex: 1;
        min-width: 0; /* Prevents overflow issues */
    }
    .block-two-column .column > *:first-child { margin-top: 0; }
    .block-two-column .column > *:last-child { margin-bottom: 0; }
    .block-two-column .column p { line-height: var(--line-height-unified); margin-bottom: var(--spacing-sm); }
     .block-two-column .column h1,
     .block-two-column .column h2,
     .block-two-column .column h3,
     .block-two-column .column h4 { margin-bottom: var(--spacing-xs); margin-top: var(--spacing-md); line-height: 1.2; }
     .block-two-column .column ul,
     .block-two-column .column ol { margin-bottom: var(--spacing-sm); padding-left: var(--spacing-lg); }
     .block-two-column .column li > p { margin-bottom: var(--spacing-xxs); }
     .block-two-column .column blockquote {
         margin-left: var(--spacing-sm);
         padding-left: var(--spacing-md);
         border-left: 3px solid var(--color-border-light);
         color: var(--color-text-secondary);
         font-style: italic;
         margin-bottom: var(--spacing-sm);
     }


    /* Full Width Image Block */
    .block-full-width-image img,
    .block-full-width-image picture { /* Target generated elements */
        display: block;
        width: 100%;
        height: auto; /* Maintain aspect ratio */
        border-radius: var(--border-radius-sm);
        background-color: var(--color-border-light); /* Placeholder background */
    }
     .block-missing-image p {
         font-style: italic;
         color: var(--color-text-secondary);
         background-color: var(--color-background-muted);
         padding: var(--spacing-md);
         border-radius: var(--border-radius-sm);
         text-align: center;
     }


    /* Full Width Embed Block */
    .block-full-width-embed > * { /* Target potentially injected elements */
        max-width: 100%;
    }
    /* Style common embed elements */
    .block-full-width-embed iframe,
    .block-full-width-embed video {
        display: block; /* Ensure block display */
        width: 100%;
        aspect-ratio: 16 / 9; /* Default aspect ratio */
        border: none;
        background-color: var(--color-border-light); /* Placeholder background */
    }

    .block-unknown p {
        font-style: italic;
        color: var(--color-text-secondary);
        border: 1px dashed var(--color-border);
        padding: var(--spacing-sm);
    }

    .entry-separator {
        border: none;
        border-top: var(--line-thickness) solid var(--color-border);
        margin-top: var(--spacing-xl);
    }

    /* --- Mobile Styles --- */
    @media (max-width: 768px) {
        .feed-entry {
            margin-bottom: var(--spacing-lg);
            padding-bottom: var(--spacing-sm);
            scroll-margin-top: calc(var(--header-height-estimate-mobile-px) + 1rem); /* Adjust if header height changes */
        }
        .feed-entry-blocks {
            margin-top: var(--spacing-md);
        }
        .content-block {
            margin-bottom: var(--spacing-md);
        }

        /* Stack two columns on mobile */
        .block-two-column {
            flex-direction: column;
            gap: var(--spacing-md); /* Add gap between stacked columns */
        }

        .entry-separator {
            margin-top: var(--spacing-lg);
        }
    }
</style>