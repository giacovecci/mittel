---
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { marked } from 'marked';

type ContentBlock = NonNullable<CollectionEntry<'feed'>['data']['contentBlocks']>[number];

interface Props {
    entry: CollectionEntry<'feed'>;
}

const { entry } = Astro.props;
const { slug, data } = entry;

const formattedDate = data.date
    ? new Date(data.date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    })
    : null;

function parseMarkdown(markdownString?: string): string {
    if (!markdownString) return '';
    try {
        const htmlResult = String(marked.parse(markdownString));
        return htmlResult;
    } catch (e) {
        console.error("Error parsing Markdown:", e);
        return '<p>Error rendering content.</p>';
    }
}
---
<article class="feed-entry" id={slug}>
    <h3>{data.title || 'Untitled Entry'}</h3>
    {formattedDate && (
        <time class="feed-entry-date" datetime={data.date?.toISOString()}>{formattedDate}</time>
    )}

    <div class="feed-entry-blocks">
        {data.contentBlocks && data.contentBlocks.length > 0 ? (
            data.contentBlocks.map((block: ContentBlock) => {
                switch (block.type) {
                    case 'twoColumn':
                        return (
                            <div class="content-block block-two-column">
                                {block.left && (
                                    <div class="column left-column" set:html={parseMarkdown(block.left)}></div>
                                )}
                                {block.right && (
                                    <div class="column right-column" set:html={parseMarkdown(block.right)}></div>
                                )}
                            </div>
                        );

                    case 'fullWidthImage':
                        return (
                            <div class="content-block block-full-width-image">
                                <Image
                                    src={block.image}
                                    alt={block.alt || ''}
                                    width={1200}
                                    height={900}
                                    format="webp"
                                    quality={80}
                                    loading="lazy"
                                    densities={[1, 1.5, 2]}
                                />
                            </div>
                        );

                    case 'fullWidthEmbed':
                        return block.embedCode ? (
                            <div class="content-block block-full-width-embed" set:html={block.embedCode}></div>
                        ) : null;

                    default:
                        const exhaustiveCheck: never = block;
                        console.warn("Unsupported content block type found:", exhaustiveCheck);
                         return (
                             <div class="content-block block-unknown">
                                 <p><em>Unsupported content block type encountered.</em></p>
                             </div>
                         );
                }
            })
        ) : (
             entry.body ? (
                 <div class="content-block markdown-content" set:html={parseMarkdown(entry.body)}></div>
             ) : (
                 <p><em>No content found for this entry.</em></p>
             )
        )}
    </div>

    <hr class="entry-separator" />
</article>

<style>
    /* --- Keep existing desktop styles --- */
    :root {
        --feed-entry-column-gap: var(--column-gap-desktop, var(--spacing-lg));
        /* These variables should be defined in global.css */
    }

    .feed-entry {
        margin-bottom: var(--spacing-xl);
        padding-bottom: var(--spacing-md);
        scroll-margin-top: 2rem; /* Desktop scroll margin */
    }

    .feed-entry h3 {
        margin-top: 0;
        margin-bottom: var(--spacing-xxs);
        font-weight: var(--font-weight-unified);
        font-size: 1.1em;
        line-height: 1.3;
    }

    .feed-entry-date {
        display: block;
        font-size: 0.9em;
        color: var(--color-accent); /* Use variable */
        margin-bottom: var(--spacing-md);
    }

    .feed-entry-blocks {
        margin-top: var(--spacing-lg);
    }

    .content-block {
        margin-bottom: var(--spacing-lg);
    }
    .content-block:last-child {
        margin-bottom: 0;
    }

    .block-two-column {
        display: flex;
        gap: var(--feed-entry-column-gap);
    }
    .block-two-column .column {
        flex: 1;
        min-width: 0;
    }
    .block-two-column .column > *:first-child { margin-top: 0; }
    .block-two-column .column > *:last-child { margin-bottom: 0; }

    /* Using :global() for nested markdown elements */
    .block-two-column .column :global(p),
    .block-two-column .column :global(li),
    .block-two-column .column :global(dt),
    .block-two-column .column :global(dd) {
        line-height: var(--line-height-unified); margin-bottom: var(--spacing-sm); font-size: 1em;
    }
     .block-two-column .column :global(h1),
     .block-two-column .column :global(h2),
     .block-two-column .column :global(h3),
     .block-two-column .column :global(h4) { margin-bottom: var(--spacing-xs); margin-top: var(--spacing-md); line-height: 1.2; }
     .block-two-column .column :global(ul),
     .block-two-column .column :global(ol) { margin-bottom: var(--spacing-sm); padding-left: var(--spacing-lg); }
     .block-two-column .column :global(li) > :global(p) { margin-bottom: var(--spacing-xxs); }
     .block-two-column .column :global(blockquote) {
         margin-left: var(--spacing-sm);
         padding-left: var(--spacing-md);
         border-left: 3px solid var(--color-border-light); /* Use variable */
         color: var(--color-text-secondary); /* Use variable */
         font-style: italic;
         margin-bottom: var(--spacing-sm);
     }

    .block-full-width-image img,
    .block-full-width-image picture {
        display: block;
        width: 100%;
        height: auto;
        border-radius: var(--border-radius-sm); /* Use variable */
        background-color: var(--color-border-light); /* Use variable */
    }
     .block-missing-image p { /* Style for missing image placeholder */
         font-style: italic;
         color: var(--color-text-secondary);
         background-color: var(--color-background-muted);
         padding: var(--spacing-md);
         border-radius: var(--border-radius-sm);
         text-align: center;
     }

     .block-full-width-embed {
         width: 100%;
         max-width: 100%;
         overflow: hidden;
         background-color: var(--color-border-light); /* Use variable */
    }
    .block-full-width-embed :global(iframe),
    .block-full-width-embed :global(video) {
        display: block !important;
        width: 100% !important;
        max-width: 100% !important;
        height: auto !important;
        aspect-ratio: 16 / 9;
        border: none;
        margin: 0;
    }

    /* Styles for Markdown rendered directly from entry.body */
    .markdown-content :global(p),
    .markdown-content :global(ul),
    .markdown-content :global(ol),
    .markdown-content :global(blockquote) {
         line-height: var(--line-height-unified);
         margin-bottom: var(--spacing-sm);
    }
    .markdown-content :global(h1),
    .markdown-content :global(h2),
    .markdown-content :global(h3),
    .markdown-content :global(h4) {
        margin-top: var(--spacing-lg);
        margin-bottom: var(--spacing-xs);
        line-height: 1.2;
    }
     .markdown-content :global(ul),
     .markdown-content :global(ol) {
         padding-left: var(--spacing-lg);
     }
     .markdown-content :global(li) > :global(p) {
         margin-bottom: var(--spacing-xxs);
     }
     .markdown-content :global(blockquote) {
          margin-left: var(--spacing-sm);
          padding-left: var(--spacing-md);
          border-left: 3px solid var(--color-border-light); /* Use variable */
          color: var(--color-text-secondary); /* Use variable */
          font-style: italic;
     }
     .markdown-content :global(img) {
         max-width: 100%;
         height: auto;
         display: block;
         margin-top: var(--spacing-md);
         margin-bottom: var(--spacing-md);
         border-radius: var(--border-radius-sm); /* Use variable */
     }

    .block-unknown p {
        font-style: italic;
        color: var(--color-text-secondary); /* Use variable */
        border: 1px dashed var(--color-border); /* Use variable */
        padding: var(--spacing-sm);
    }

    .entry-separator {
        border: none;
        border-top: var(--line-thickness) solid var(--color-border); /* Use variable */
        margin-top: var(--spacing-xl);
    }

    /* --- MOBILE STYLES --- */
    @media (max-width: 768px) {
        .feed-entry {
            margin-bottom: var(--spacing-lg);
            padding-bottom: var(--spacing-sm);
            /* --- UPDATED scroll-margin-top (Significantly Increased) --- */
            scroll-margin-top: calc(var(--header-height-estimate-mobile-px, 92px) + 6rem); /* Increased extra space to 6rem */
        }
        .feed-entry-blocks {
            margin-top: var(--spacing-md);
        }
        .content-block {
            margin-bottom: var(--spacing-md);
        }
        .block-two-column {
            flex-direction: column;
            gap: var(--spacing-md);
        }
        .entry-separator {
            margin-top: var(--spacing-lg);
        }
        .feed-entry-date {
             font-size: 0.85em;
        }
    }
</style>