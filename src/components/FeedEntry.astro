---
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { render as parseMarkdown } from './MarkdownRenderer.astro';

type BaseBlock = { type: string };
type ContentBlock = NonNullable<CollectionEntry<'feed'>['data']['contentBlocks']>[number];

interface Props {
    entry: CollectionEntry<'feed'>;
}

const { entry } = Astro.props;
const { slug, data } = entry;

const formattedDate = data.date
    ? new Date(data.date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    })
    : null;
---
<article class="feed-entry" id={slug}>
    <h3>{data.title || 'Untitled Entry'}</h3>
    {formattedDate && (
        <time class="feed-entry-date" datetime={data.date?.toISOString()}>{formattedDate}</time>
    )}

    <div class="feed-entry-blocks">
        {data.contentBlocks && data.contentBlocks.length > 0 ? (
            data.contentBlocks.map((block: ContentBlock, index: number) => {
                const galleryId = `gallery-${slug}-${index}`;
                const prevBtnId = `gallery-prev-${slug}-${index}`;
                const nextBtnId = `gallery-next-${slug}-${index}`;

                switch (block.type) {
                    case 'twoColumn':
                        return (
                            <div class="content-block block-two-column">
                                {block.left && (
                                    <div class="column left-column markdown-content" set:html={parseMarkdown(block.left)}></div>
                                )}
                                {block.right && (
                                    <div class="column right-column markdown-content" set:html={parseMarkdown(block.right)}></div>
                                )}
                            </div>
                        );

                    case 'fullWidthImage':
                        return block.image ? (
                            <div class="content-block block-full-width-image">
                                <Image
                                    src={block.image}
                                    alt={block.alt || ''}
                                    width={1200}
                                    height={900}
                                    format="webp"
                                    quality={80}
                                    loading="lazy"
                                    densities={[1, 1.5, 2]}
                                />
                            </div>
                        ) : <div class="content-block block-missing-image"><p><em>Image missing or path incorrect.</em></p></div>;

                    case 'fullWidthEmbed':
                        return block.embedCode ? (
                            <div class="content-block block-full-width-embed" set:html={block.embedCode}></div>
                        ) : null;

                    case 'fullWidthText':
                        return block.text ? (
                            <div class="content-block block-full-width-text markdown-content" set:html={parseMarkdown(block.text)}></div>
                        ) : null;

                    case 'horizontalGallery':
                         return (
                            <div class="content-block block-horizontal-gallery">
                                <div class="gallery-scroll-container" id={galleryId}>
                                    {block.images && block.images.length > 0 ? (
                                        block.images.map(img => (
                                            img.image ? (
                                                <div class="gallery-item">
                                                    <Image
                                                        src={img.image}
                                                        alt={img.alt || ''}
                                                        width={800}
                                                        height={600}
                                                        format="webp"
                                                        quality={75}
                                                        loading="lazy"
                                                        densities={[1, 1.5]}
                                                    />
                                                </div>
                                            ) : null
                                        ))
                                    ) : (
                                        <div class="gallery-item placeholder"><p><em>No images in gallery.</em></p></div>
                                    )}
                                </div>
                                <button type="button" class="gallery-nav-button prev" id={prevBtnId} data-target={`#${galleryId}`} aria-label="Previous image">‹</button>
                                <button type="button" class="gallery-nav-button next" id={nextBtnId} data-target={`#${galleryId}`} aria-label="Next image">›</button>
                            </div>
                        );


                    default:
                        const unknownBlock = block as BaseBlock;
                        // console.warn(`Unsupported content block type found in entry '${slug}':`, unknownBlock?.type || block);
                         return (
                             <div class="content-block block-unknown">
                                 <p><em>Unsupported block type: {unknownBlock?.type || 'Unknown'}. Check config and component.</em></p>
                             </div>
                         );
                }
            })
        ) : (
             entry.body ? ( 
                 <div class="content-block markdown-content" set:html={parseMarkdown(entry.body)}></div>
             ) : (
                 <p><em>No content found for this entry.</em></p>
             )
        )}
    </div>

    <hr class="entry-separator" />
</article>

<script>
    // Gallery script remains the same
    function setupGallery(galleryElement: any) {
        const scrollContainer = galleryElement.querySelector('.gallery-scroll-container');
        const prevButton = galleryElement.querySelector('.gallery-nav-button.prev');
        const nextButton = galleryElement.querySelector('.gallery-nav-button.next');
        const items = galleryElement.querySelectorAll('.gallery-item');

        if (!scrollContainer || !prevButton || !nextButton || items.length === 0) {
            if (prevButton) prevButton.style.display = 'none';
            if (nextButton) nextButton.style.display = 'none';
            return;
        }

        const itemWidth = items[0].offsetWidth; 
        const gap = parseFloat(getComputedStyle(scrollContainer).gap) || 0; 

        function updateButtonVisibility() {
            const tolerance = 5;
            if (prevButton) {
                prevButton.classList.toggle('hidden', scrollContainer.scrollLeft <= tolerance);
            }
            if (nextButton) {
                nextButton.classList.toggle('hidden', scrollContainer.scrollLeft >= (scrollContainer.scrollWidth - scrollContainer.clientWidth - tolerance));
            }
        }

        prevButton.addEventListener('click', () => {
            const currentScroll = scrollContainer.scrollLeft;
            const targetScroll = currentScroll - itemWidth - gap;
            scrollContainer.scrollTo({ left: targetScroll, behavior: 'smooth' });
        });

        nextButton.addEventListener('click', () => {
            const currentScroll = scrollContainer.scrollLeft;
            const targetScroll = currentScroll + itemWidth + gap;
            scrollContainer.scrollTo({ left: targetScroll, behavior: 'smooth' });
        });

        scrollContainer.addEventListener('scroll', updateButtonVisibility, { passive: true });
        updateButtonVisibility();

        const resizeObserver = new ResizeObserver(_ => {
            updateButtonVisibility();
        });
        resizeObserver.observe(scrollContainer);
    }

    const galleriesInThisEntry = document.querySelectorAll('.block-horizontal-gallery');
    galleriesInThisEntry.forEach(galleryInstance => {
        setupGallery(galleryInstance);
    });
</script>

<style>
    :root {
        --feed-entry-column-gap: var(--column-gap-desktop, var(--spacing-lg));
        --gallery-nav-button-size: 2.5rem;
        --gallery-item-gap: var(--spacing-md); 
        --scrollbar-width: 8px; 
        --scrollbar-thumb-color: var(--color-text-secondary, #aaa); 
        --scrollbar-track-color: var(--color-background-muted, #1a1a1a); 
    }

    .feed-entry { margin-bottom: var(--spacing-xl); padding-bottom: var(--spacing-md); scroll-margin-top: 2rem; }
    .feed-entry h3 { margin-top: 0; margin-bottom: var(--spacing-xxs); font-weight: var(--font-weight-bold); font-size: 1.1em; line-height: 1.3; }
    .feed-entry-date { display: block; font-size: 0.9em; color: var(--color-accent); margin-bottom: var(--spacing-md); }
    .feed-entry-blocks { margin-top: var(--spacing-lg); }
    .content-block { margin-bottom: var(--spacing-lg); }
    .content-block:last-child { margin-bottom: 0; }

    .block-two-column { display: flex; gap: var(--feed-entry-column-gap); }
    .block-two-column .column { 
        flex: 1; 
        min-width: 0; /* Crucial for flex items to shrink properly */
        overflow-wrap: break-word; /* Allow long words/strings to break */
        word-break: break-word; /* More aggressive breaking if needed */
    }
    .block-two-column .column.markdown-content > *:first-child { margin-top: 0; }
    .block-two-column .column.markdown-content > *:last-child { margin-bottom: 0; }
    
    /* Target iframes specifically within two-column blocks or any markdown content */
    .block-two-column .column :global(iframe),
    .markdown-content :global(iframe) {
        max-width: 100% !important; /* Ensure iframe itself scales down */
        width: 100% !important;     /* Force it to take container width */
        height: auto !important;    /* Adjust height proportionally if original embed doesn't have aspect ratio */
        aspect-ratio: 16 / 9; /* Common aspect ratio, adjust if needed or make it configurable */
        display: block; /* Remove extra space below */
        border: none; /* Remove default iframe border */
    }
    /* If the iframe is wrapped in a div by the embed code, target that too */
    .block-two-column .column :global(div[style*="width"]) > :global(iframe),
    .markdown-content :global(div[style*="width"]) > :global(iframe) {
        width: 100% !important;
        max-width: 100% !important;
    }
    .block-two-column .column :global(div[style*="width"]), /* Target wrapper divs with inline width */
    .markdown-content :global(div[style*="width"]) {
        width: auto !important; /* Override inline width */
        max-width: 100% !important;
    }


    .block-full-width-image img, .block-full-width-image picture { display: block; width: 100%; height: auto; border-radius: var(--border-radius-sm); background-color: var(--color-border-light); }
    .block-missing-image p { font-style: italic; color: var(--color-text-secondary); background-color: var(--color-background-muted); padding: var(--spacing-md); border-radius: var(--border-radius-sm); text-align: center; }
    
    .block-full-width-embed :global(iframe) { 
        display: block; /* Ensures it behaves like a block element */
        width: 100% !important; /* Takes full width of its container */
        max-width: 100% !important; /* Prevents exceeding container width */
        /* REMOVED: height: auto !important; */
        /* REMOVED: aspect-ratio: 16 / 9; */
        /* The height will now be determined by the 'height' attribute in the embed code,
           or by the iframe's content, or a browser default (e.g., 150px). */
        border: none; 
        margin: 0; /* Reset any default margins */
    }
    /* More specific iframe styling for full-width embeds */
    .block-full-width-embed :global(iframe) { 
        display: block; 
        width: 100% !important; 
        height: auto !important; /* Let aspect-ratio or embed itself define height */
        max-width: 100% !important; 
        aspect-ratio: 16 / 9; /* Default aspect ratio, can be overridden by embed */
        border: none; 
        margin: 0;
        /* position: absolute; top: 0; left: 0; /* Only if using padding-bottom trick on parent */
    }
    /* If the iframe is wrapped by a div with fixed width from the embed code */
    .block-full-width-embed :global(div[style*="width"]) {
        width: auto !important; /* Override inline width */
        max-width: 100% !important;
    }
     .block-full-width-embed :global(div[style*="width"]) > :global(iframe) {
        width: 100% !important;
        max-width: 100% !important;
    }

    .block-full-width-text {} 

    .block-horizontal-gallery { position: relative; width: 100%; box-sizing: border-box; }
    .gallery-scroll-container {
        display: flex; overflow-x: auto; overflow-y: hidden; gap: var(--gallery-item-gap);
        padding-bottom: calc(var(--spacing-md) + var(--scrollbar-width));
        padding-left: calc(var(--gallery-nav-button-size) / 2 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
        padding-right: calc(var(--gallery-nav-button-size) / 2 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
        scroll-snap-type: x mandatory;
        scroll-padding-left: calc(var(--gallery-nav-button-size) / 2 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
        scroll-padding-right: calc(var(--gallery-nav-button-size) / 2 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
        scrollbar-width: thin; scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);
        max-height: 70vh; width: 100%; box-sizing: border-box; margin-left: auto; margin-right: auto;
    }
    .gallery-scroll-container::-webkit-scrollbar { height: var(--scrollbar-width); }
    .gallery-scroll-container::-webkit-scrollbar-track { background: var(--scrollbar-track-color); border-radius: calc(var(--scrollbar-width) / 2); }
    .gallery-scroll-container::-webkit-scrollbar-thumb { background-color: var(--scrollbar-thumb-color); border-radius: calc(var(--scrollbar-width) / 2); border: 2px solid var(--scrollbar-track-color); }
    .gallery-item {
        flex: 0 0 100%; min-width: 100%; scroll-snap-align: center; height: auto; max-height: 100%;
        border-radius: var(--border-radius-sm); overflow: hidden; background-color: var(--color-border-light);
        position: relative; display: flex; align-items: center; justify-content: center;
    }
    .gallery-item img, .gallery-item picture {
        display: block; width: auto; max-width: 100%; height: auto; max-height: 100%;
        aspect-ratio: 4 / 3; object-fit: contain; margin: 0 auto;
    }
     .gallery-item.placeholder p { font-style: italic; color: var(--color-text-secondary); padding: var(--spacing-md); }
    .gallery-nav-button {
        position: absolute; top: 50%; transform: translateY(-50%); z-index: 10;
        background-color: rgba(0, 0, 0, 0.5); color: white; border: none; border-radius: 50%;
        width: var(--gallery-nav-button-size); height: var(--gallery-nav-button-size);
        font-size: calc(var(--gallery-nav-button-size) * 0.6);
        line-height: var(--gallery-nav-button-size); text-align: center;
        cursor: pointer; opacity: 0.7; transition: opacity 0.2s ease, background-color 0.2s ease;
        padding: 0; display: flex; align-items: center; justify-content: center;
    }
    .gallery-nav-button:hover { opacity: 1; background-color: rgba(0, 0, 0, 0.7); }
    .gallery-nav-button.prev { left: var(--spacing-sm); }
    .gallery-nav-button.next { right: var(--spacing-sm); }
    .gallery-nav-button.hidden { display: none; }
    
    .block-unknown p { font-style: italic; color: var(--color-text-secondary); border: 1px dashed var(--color-border); padding: var(--spacing-sm); }
    .entry-separator { border: none; border-top: var(--line-thickness) solid var(--color-border); margin-top: var(--spacing-xl); }
    
    @media (max-width: 768px) {
        .feed-entry {
             --gallery-item-gap: var(--spacing-sm); 
        }
        .feed-entry { margin-bottom: var(--spacing-lg); padding-bottom: var(--spacing-sm); scroll-margin-top: calc(var(--mobile-header-height, 125px) + 1rem); } /* Adjusted scroll margin */
        .feed-entry-blocks { margin-top: var(--spacing-md); }
        .content-block { margin-bottom: var(--spacing-md); }
        .block-two-column { flex-direction: column; gap: var(--spacing-md); }
        /* Ensure columns in two-column layout don't cause overflow on mobile */
        .block-two-column .column {
            width: 100%; /* Take full width of the parent flex container */
            flex-basis: auto; /* Reset flex-basis */
        }

        .entry-separator { margin-top: var(--spacing-lg); }
        .feed-entry-date { font-size: 0.85em; }
        .gallery-scroll-container {
             gap: var(--gallery-item-gap); 
             max-height: 50vh;
             padding-left: calc(var(--gallery-nav-button-size) / 3 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
             padding-right: calc(var(--gallery-nav-button-size) / 3 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
             scroll-padding-left: calc(var(--gallery-nav-button-size) / 3 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
             scroll-padding-right: calc(var(--gallery-nav-button-size) / 3 + var(--spacing-xs) + var(--gallery-item-gap) / 2);
        }
        .gallery-item img, .gallery-item picture { aspect-ratio: 4 / 3; }
        .gallery-nav-button { --gallery-nav-button-size: 2rem; }
         .gallery-nav-button.prev { left: var(--spacing-xs); }
         .gallery-nav-button.next { right: var(--spacing-xs); }
    }
</style>