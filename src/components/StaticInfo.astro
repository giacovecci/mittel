---
// src/components/StaticInfo.astro
import { getEntry } from 'astro:content';
import { render as parseMarkdown } from './MarkdownRenderer.astro';
import { Image } from 'astro:assets'; // Import Astro's Image component

interface ClientLogo {
  image: string;
  alt: string;
  link?: string;
  name?: string;
  alreadySuitsDarkMode?: boolean;
}

const entry = await getEntry('general_content', 'static_info');
let rawIntroText = "";
let clientLogos: ClientLogo[] = [];
let introTextLoaded = false;
let profileImage: string | undefined = undefined;
let profileImageAlt: string = "";

if (entry && entry.data) {
    if (typeof entry.data.introText === 'string') {
        rawIntroText = entry.data.introText;
        introTextLoaded = true;
    } else if (entry.data.introText !== undefined) {
        console.warn("StaticInfo.astro: introText field is present but not a string.", entry.data.introText);
    }

    // Profile Image
    if (typeof entry.data.staticInfoProfileImage === 'string' && entry.data.staticInfoProfileImage.trim() !== '') {
        profileImage = entry.data.staticInfoProfileImage;
        profileImageAlt = typeof entry.data.staticInfoProfileImageAlt === 'string' ? entry.data.staticInfoProfileImageAlt : "Profile image";
    } else if (entry.data.staticInfoProfileImage !== undefined && entry.data.staticInfoProfileImage.trim() === '') {
        // Field exists but is empty, treat as no image
    } else if (entry.data.staticInfoProfileImage) {
        console.warn("StaticInfo.astro: staticInfoProfileImage field is present but not a valid string path.", entry.data.staticInfoProfileImage);
    }


    if (Array.isArray(entry.data.clientLogos)) {
        clientLogos = entry.data.clientLogos.filter(logo => 
            typeof logo.image === 'string' && logo.image.trim() !== '' && 
            typeof logo.alt === 'string' && logo.alt.trim() !== ''
        );
    } else if (entry.data.clientLogos !== undefined) {
        console.warn("StaticInfo.astro: clientLogos field is present but not an array.", entry.data.clientLogos);
    }
} else {
    console.error("StaticInfo.astro: Could not load entry 'general_content/static_info.md'.");
}

const htmlIntroText = parseMarkdown(rawIntroText);
const hasContent = introTextLoaded || clientLogos.length > 0 || profileImage;
---

<div class="static-info-wrapper">
    {rawIntroText && (
        <div class="static-text-container markdown-content" set:html={htmlIntroText}></div>
    )}

    {profileImage && (
        <div class="static-info-profile-image-container">
            <Image 
                src={profileImage} 
                alt={profileImageAlt} 
                width={800} /* Adjust intrinsic width as appropriate for original image */
                height={600} /* Adjust intrinsic height */
                format="webp" 
                quality={75}
                loading="lazy"
                densities={[1, 1.5, 2]}
            />
        </div>
    )}

    {clientLogos.length > 0 && (
        <div class="client-logos-container">
            <h3 class="client-logos-title">Trusted By</h3>
            <div class="logos-grid">
                {clientLogos.map(logo => (
                    <div class="logo-item">
                        {logo.link ? (
                            <a href={logo.link} target="_blank" rel="noopener noreferrer" aria-label={`Visit ${logo.alt || logo.name || 'client website'}`}>
                                <img 
                                    src={logo.image} 
                                    alt={logo.alt || 'Client Logo'} 
                                    class:list={{ 'needs-dark-filter': !logo.alreadySuitsDarkMode }}
                                />
                            </a>
                        ) : (
                            <img 
                                src={logo.image} 
                                alt={logo.alt || 'Client Logo'} 
                                class:list={{ 'needs-dark-filter': !logo.alreadySuitsDarkMode }}
                            />
                        )}
                    </div>
                ))}
            </div>
        </div>
    )}

    {!hasContent && (
        <p class="error-message">Static information could not be loaded.</p>
    )}
</div>

<style>
    .static-info-wrapper {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-lg); /* Gap between intro text, image, and logos */
        height: 100%;
        box-sizing: border-box;
    }
    .static-text-container {
        /* Markdown styles apply globally */
    }

    .static-info-profile-image-container {
        width: 100%;
        margin-top: var(--spacing-sm); /* Space above the image if introText is present */
        /* margin-bottom will be handled by the gap in .static-info-wrapper or next element's margin-top */
    }
    .static-info-profile-image-container :global(img) { /* Target img generated by Astro <Image> */
        display: block;
        max-width: 100%;
        height: auto;
        border-radius: var(--border-radius-sm);
        background-color: var(--color-border-light); /* Placeholder bg if image is transparent or slow loading */
    }

    .client-logos-container {
        margin-top: var(--spacing-md); 
        padding-top: var(--spacing-md);
        border-top: 1px solid var(--color-border-subtle);
    }
    /* ... (rest of .client-logos-title, .logos-grid, .logo-item, theme-dependent logo styles, .error-message remain the same) ... */
    .client-logos-title { font-size: 0.9em; font-weight: var(--font-weight-medium); color: var(--color-text-secondary); text-align: left; margin-bottom: var(--spacing-md); text-transform: uppercase; letter-spacing: 0.075em; }
    .logos-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); gap: var(--spacing-md); align-items: center; }
    .logo-item { display: flex; justify-content: center; align-items: center; min-height: 50px; }
    .logo-item img { display: block; max-width: 100%; max-height: 45px; width: auto; height: auto; object-fit: contain; transition: opacity 0.3s ease-in-out, filter 0.3s ease-in-out; }
    html:not(.light-mode) .logo-item img { opacity: 0.7; }
    html:not(.light-mode) .logo-item img.needs-dark-filter { filter: brightness(0) invert(1); }
    html:not(.light-mode) .logo-item a:hover img, html:not(.light-mode) .logo-item a:focus img { opacity: 1; }
    html.light-mode .logo-item img { filter: grayscale(100%) opacity(0.65); }
    html.light-mode .logo-item a:hover img, html.light-mode .logo-item a:focus img { filter: grayscale(0%) opacity(1); }
    .error-message { color: var(--color-text-secondary); font-style: italic; }


    @media (max-width: 768px) {
        .static-info-wrapper {
            gap: var(--spacing-md);
        }
        .static-info-profile-image-container {
            display: none; /* Hide profile image on mobile */
        }
        /* Ensure client logos container doesn't get double margin if profile image is hidden */
        .client-logos-container {
            /* margin-top: var(--spacing-md); /* This might be too much if profile image is gone, rely on wrapper gap */
        }

        .logos-grid {
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: var(--spacing-sm);
        }
        .logo-item img { max-height: 40px; }
        .client-logos-title { font-size: 0.85em; }
    }
</style>