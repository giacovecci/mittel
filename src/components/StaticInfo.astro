---
import { getEntry } from 'astro:content';
import { render as parseMarkdown } from './MarkdownRenderer.astro';
import { Image } from 'astro:assets';

interface ClientLogo {
  image: string;
  alt: string;
  link?: string;
  name?: string;
  alreadySuitsDarkMode?: boolean;
}

const entry = await getEntry('general_content', 'static_info');

let rawIntroText = "";
let clientLogos: ClientLogo[] = [];

let portraitImageUrl: string | undefined = undefined;
let portraitImageAlt: string | undefined = undefined;
let introTextOnlyMd = "";

const PORTRAIT_RENDER_WIDTH = 1000; 
const PORTRAIT_RENDER_HEIGHT = 1500;


if (entry && entry.data) {
    if (typeof entry.data.introText === 'string') {
        rawIntroText = entry.data.introText;
        
        const imageRegex = /!\[(?<alt>.*?)\]\((?<url>.*?)\)/;
        const match = rawIntroText.match(imageRegex);

        if (match && match.groups) {
            portraitImageUrl = match.groups.url;
            portraitImageAlt = match.groups.alt || 'Portrait image';
            introTextOnlyMd = rawIntroText.replace(imageRegex, '').trim();
        } else {
            introTextOnlyMd = rawIntroText;
        }
    } else if (entry.data.introText !== undefined) {
        console.warn("StaticInfo.astro: introText field is present but not a string.", entry.data.introText);
    }

    if (Array.isArray(entry.data.clientLogos)) {
        clientLogos = entry.data.clientLogos.filter(logo => 
            typeof logo.image === 'string' && logo.image.trim() !== '' && 
            typeof logo.alt === 'string' && logo.alt.trim() !== ''
        );
    } else if (entry.data.clientLogos !== undefined) {
        console.warn("StaticInfo.astro: clientLogos field is present but not an array.", entry.data.clientLogos);
    }
} else {
    console.error("StaticInfo.astro: Could not load entry 'general_content/static_info.md'.");
}

const htmlIntroTextPortion = await parseMarkdown(introTextOnlyMd);
const hasTextContent = introTextOnlyMd.trim() !== "";
const hasLogos = clientLogos.length > 0;
const hasPortrait = !!portraitImageUrl;

const displayError = !hasTextContent && !hasLogos && !hasPortrait;

---

<div class="static-info-wrapper">
    {hasTextContent && (
        <div class="intro-text-content markdown-content" set:html={htmlIntroTextPortion}></div>
    )}

    {hasLogos && (
        <div class="client-logos-container">
            <h3 class="client-logos-title">Trusted By</h3>
            <div class="logos-grid">
                {clientLogos.map(logo => (
                    <div class="logo-item">
                        {logo.link ? (
                            <a href={logo.link} target="_blank" rel="noopener noreferrer" aria-label={`Visit ${logo.alt || logo.name || 'client website'}`}>
                                <img 
                                    src={logo.image} 
                                    alt={logo.alt || 'Client Logo'} 
                                    class:list={{ 'needs-dark-filter': !logo.alreadySuitsDarkMode }}
                                />
                            </a>
                        ) : (
                            <img 
                                src={logo.image} 
                                alt={logo.alt || 'Client Logo'} 
                                class:list={{ 'needs-dark-filter': !logo.alreadySuitsDarkMode }}
                            />
                        )}
                    </div>
                ))}
            </div>
        </div>
    )}

    {hasPortrait && portraitImageUrl && (
        <div class="portrait-image-container">
            <Image 
                src={portraitImageUrl} 
                alt={portraitImageAlt || 'Piotr Å»akowiecki portrait'} 
                width={PORTRAIT_RENDER_WIDTH}  
                height={PORTRAIT_RENDER_HEIGHT}
                format="webp" 
                quality={80}
                loading="lazy"
                densities={[1, 1.5, 2]} 
            />
        </div>
    )}

    {displayError && (
        <p class="error-message">Static information, portrait, or client logos could not be loaded.</p>
    )}
</div>

<style>
    /* MODIFICATION: Define a CSS variable for minimum logo item width */
    :root {
        --logo-item-min-width: 100px; /* Adjust this value as needed */
    }

    .static-info-wrapper {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-lg);
        height: 100%;
        box-sizing: border-box;
    }

    .intro-text-content { order: 1; }
    .portrait-image-container { order: 2; display: none; } 
    .client-logos-container {
        order: 3;
        padding-top: var(--spacing-md);
        border-top: 1px solid var(--color-border-subtle);
    }

    .portrait-image-container :global(img) { 
        display: block;
        width: 100%; 
        height: auto; 
        max-width: 100%; 
        border-radius: var(--border-radius-sm);
        background-color: var(--color-border-light); 
        object-fit: cover; 
    }

    .client-logos-title {
        font-size: 0.9em; font-weight: var(--font-weight-medium); color: var(--color-text-secondary);
        text-align: left; margin-bottom: var(--spacing-md); text-transform: uppercase; letter-spacing: 0.075em;
    }

    /* MODIFICATION: Updated .logos-grid to be responsive based on item width */
    .logos-grid {
        display: grid;
        /* This will create as many columns as fit, each at least --logo-item-min-width wide */
        /* and at most 1fr (distributing extra space) */
        grid-template-columns: repeat(auto-fill, minmax(var(--logo-item-min-width), 1fr));
        gap: var(--spacing-md); 
        align-items: center; 
    }

    .logo-item {
        display: flex; 
        justify-content: center; 
        align-items: center; 
        min-height: 50px; 
    }
    .logo-item img { 
        display: block; 
        max-width: 100%; 
        max-height: 45px; 
        width: auto; 
        height: auto; 
        object-fit: contain; 
        transition: opacity 0.3s ease-in-out, filter 0.3s ease-in-out;
    }
    html:not(.light-mode) .logo-item img { opacity: 0.7; }
    html:not(.light-mode) .logo-item img.needs-dark-filter { filter: brightness(0) invert(1); }
    html:not(.light-mode) .logo-item a:hover img,
    html:not(.light-mode) .logo-item a:focus img { opacity: 1; }
    html.light-mode .logo-item img { filter: grayscale(100%) opacity(0.65); }
    html.light-mode .logo-item a:hover img,
    html.light-mode .logo-item a:focus img { filter: grayscale(0%) opacity(1); }

    .error-message {
        color: var(--color-text-secondary); font-style: italic;
    }

    @media (max-width: 768px) { /* Mobile refinements */
        .static-info-wrapper { gap: var(--spacing-md); }
        
        /* MODIFICATION: Adjust gap and potentially min-width for smaller screens if needed */
        .logos-grid {
            gap: var(--spacing-sm);
            /* You could also adjust --logo-item-min-width here if 100px is too large for very narrow mobile */
            /* Example: grid-template-columns: repeat(auto-fill, minmax(80px, 1fr)); */
        }
        .logo-item img { max-height: 40px; } 
        .client-logos-title { font-size: 0.85em; }
    }

    /* --- Desktop Order and Styling --- */
    @media (min-width: 769px) {
        .intro-text-content { order: 1; }
        .client-logos-container {
            order: 2;
            padding-top: var(--spacing-md);
            border-top: 1px solid var(--color-border-subtle);
        }
        .portrait-image-container {
            order: 3;
            display: block; 
            padding-top: var(--spacing-md);
            border-top: 1px solid var(--color-border-subtle);
            width: 100%; 
        }
        /* No specific changes needed for .logos-grid here, auto-fill handles it */
    }
</style>