---
// src/components/StaticInfo.astro
import { getEntry } from 'astro:content';
// MODIFICATION: Import render function from MarkdownRenderer
import { render as parseMarkdown } from './MarkdownRenderer.astro';

const entry = await getEntry('general_content', 'static_info');
let rawIntroText = "Error: Intro text not loaded."; 

if (entry && entry.data && typeof entry.data.introText === 'string') {
    rawIntroText = entry.data.introText;
} else {
    console.error("StaticInfo.astro: Could not load introText from 'general_content/static_info.md'. Entry:", entry);
}

// MODIFICATION: Use imported parseMarkdown function
const htmlIntroText = parseMarkdown(rawIntroText);

---
<div class="static-info-wrapper">
    <div class="static-text-container markdown-content" set:html={htmlIntroText}>
        {htmlIntroText === "" && <p>Error: Intro text not loaded or empty.</p>}
    </div>
</div>

<style>
    .static-info-wrapper { display: flex; flex-direction: column; gap: var(--spacing-lg); height: 100%; box-sizing: border-box; }
    .static-visual-container { width: 100%; }
    .static-visual-container :global(img) { display: block; max-width: 100%; height: auto; border-radius: var(--border-radius-sm); }
    
    .static-text-container {
        /* Styles for p, ul etc. will come from global .markdown-content */
    }
    /* MODIFICATION: Removed specific p rule, rely on global .markdown-content */
    /* .static-text-container p { ... } */

    @media (max-width: 768px) and (orientation: portrait) { .static-info-wrapper { gap: var(--spacing-md); } }
</style>