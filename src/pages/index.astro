---
// src/pages/index.astro
// ... (imports and data fetching remain the same) ...
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import IdentityHeader from '../components/IdentityHeader.astro';
import Header from '../components/Header.astro';
import StaticInfo from '../components/StaticInfo.astro';
import OverviewGrid from '../components/OverviewGrid.astro';
import HighlightsColumn from '../components/HighlightsColumn.astro';
import AboutSection from '../components/AboutSection.astro';
import AllFeedColumn from '../components/AllFeedColumn.astro';
import type { CollectionEntry } from 'astro:content';

const feedEntriesFetched: CollectionEntry<'feed'>[] = await getCollection('feed');
const feedEntries = feedEntriesFetched.sort((a, b) => {
    const dateA = a.data.date ? new Date(a.data.date).getTime() : 0;
    const dateB = b.data.date ? new Date(b.data.date).getTime() : 0;
    return dateB - dateA;
});
const overviewItems = feedEntries.map(entry => ({
    id: entry.slug,
    title: entry.data.title || 'Untitled',
    imageUrl: entry.data.thumbnail || '/placeholder.jpg',
    altText: entry.data.title || 'Feed item thumbnail'
}));
---
<BaseLayout title="Å»akowiecki | Portfolio">
    <div slot="identity-header"><IdentityHeader /></div>
    <div slot="main-header"><Header /></div>
    <div slot="info-content" id="info-content-wrapper"><StaticInfo /></div>
    <section slot="feed-content" id="feed-content-wrapper"></section>
    <div slot="overview-content" id="overview-content-wrapper">
        <div id="overview-grid-wrapper"><OverviewGrid items={overviewItems} /></div>
    </div>
    <div slot="dynamic-content" id="dynamic-content-wrapper">
        <div id="highlights-content-wrapper-actual"> <HighlightsColumn /> </div>
        <div id="about-content-wrapper-actual"> <AboutSection /> </div>
    </div>
    <div slot="all-feed-content" id="all-feed-content-wrapper">
        <AllFeedColumn />
    </div>
</BaseLayout>

<style>
    #highlights-content-wrapper-actual,
    #about-content-wrapper-actual {
        display: none;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const appContainer = document.getElementById('app-container');
        const infoContentArea = document.getElementById('info-content-area');
        const dynamicContentArea = document.getElementById('dynamic-content-area');
        const highlightsContentWrapper = document.getElementById('highlights-content-wrapper-actual');
        const aboutContentWrapper = document.getElementById('about-content-wrapper-actual');
        const allFeedContentArea = document.getElementById('all-feed-content-area');
        const overviewContentArea = document.getElementById('overview-content-area');
        
        // Desktop Buttons
        const desktopHighlightsBtn = document.getElementById('highlights-view-btn-desktop') as HTMLButtonElement | null;
        const desktopAllFeedBtn = document.getElementById('all-feed-view-btn-desktop') as HTMLButtonElement | null;
        const desktopOverviewBtn = document.getElementById('overview-view-btn-desktop') as HTMLButtonElement | null;
        const desktopAboutBtn = document.getElementById('about-view-btn-desktop') as HTMLButtonElement | null;

        // Mobile Header Elements
        // const mobileSectionTitleEl = document.getElementById('mobile-section-title') as HTMLSpanElement | null; // REMOVED
        const hamburgerMenuBtn = document.getElementById('hamburger-menu-btn') as HTMLButtonElement | null;
        const mobileNavPanel = document.getElementById('mobile-nav-panel') as HTMLElement | null;
        const mobileNavLinks = mobileNavPanel?.querySelectorAll<HTMLButtonElement>('.mobile-nav-link');

        const overviewGridWrapper = document.getElementById('overview-grid-wrapper');
        const highlightsListWrapper = document.getElementById('highlights-content-wrapper-actual');
        const allFeedListWrapper = document.getElementById('all-feed-content-wrapper');

        if (!appContainer || !highlightsContentWrapper || !aboutContentWrapper ||
            !desktopHighlightsBtn || !desktopAllFeedBtn || !desktopOverviewBtn || !desktopAboutBtn ||
            /* !mobileSectionTitleEl || */ !hamburgerMenuBtn || !mobileNavPanel || !mobileNavLinks) { // mobileSectionTitleEl removed from check
            console.error("Essential elements missing. Check IDs.");
            return;
        }

        const MOBILE_BREAKPOINT = 768;
        let currentView = 'home'; 
        let wasMobile = window.innerWidth <= MOBILE_BREAKPOINT;

        function isMobile(): boolean { return window.innerWidth <= MOBILE_BREAKPOINT; }

        function updateActiveStates() {
            // Desktop buttons
            if (!isMobile()) {
                [desktopHighlightsBtn, desktopAllFeedBtn, desktopOverviewBtn, desktopAboutBtn].forEach(btn => btn?.classList.remove('active'));
                if (currentView === 'home') desktopHighlightsBtn.classList.add('active');
                else if (currentView === 'all-feed') desktopAllFeedBtn.classList.add('active');
                else if (currentView === 'overview') desktopOverviewBtn.classList.add('active');
                else if (currentView === 'about') desktopAboutBtn.classList.add('active');
            }

            // Mobile menu items active state
            mobileNavLinks.forEach(link => {
                link.classList.remove('active-menu-item');
                const linkTarget = link.dataset.viewtarget;
                let isActive = linkTarget === currentView;
                // Adjust for 'info' view on mobile mapping to 'highlights' conceptually
                if ((currentView === 'home' || currentView === 'info') && linkTarget === 'info') isActive = true;
                if (isActive) {
                    link.classList.add('active-menu-item');
                }
            });
        }
        
        function setMainView(view: 'home' | 'all-feed' | 'overview' | 'info' | 'about'): void {
            currentView = view;

            appContainer.classList.remove('view-home', 'view-all-feed', 'view-overview', 'view-info', 'view-about', 'is-mobile', 'is-desktop');

            if (isMobile()) appContainer.classList.add('is-mobile');
            else appContainer.classList.add('is-desktop');

            highlightsContentWrapper.style.display = 'none';
            aboutContentWrapper.style.display = 'none';

            switch (view) {
                case 'home': 
                    appContainer.classList.add('view-home');
                    highlightsContentWrapper.style.display = 'block';
                    break;
                case 'info': 
                    appContainer.classList.add('view-info');
                    highlightsContentWrapper.style.display = 'block';
                    break;
                case 'all-feed':
                    appContainer.classList.add('view-all-feed');
                    break;
                case 'overview':
                    appContainer.classList.add('view-overview');
                    break;
                case 'about':
                    appContainer.classList.add('view-about');
                    aboutContentWrapper.style.display = 'block';
                    break;
            }
            updateActiveStates();
        }

        function toggleMobileMenu(forceClose = false) {
            // ... (function remains the same) ...
            const isOpen = mobileNavPanel.classList.contains('is-open');
            if (forceClose || isOpen) {
                mobileNavPanel.classList.remove('is-open');
                hamburgerMenuBtn.setAttribute('aria-expanded', 'false');
                hamburgerMenuBtn.classList.remove('is-active');
                document.body.classList.remove('mobile-menu-open');
            } else {
                mobileNavPanel.classList.add('is-open');
                hamburgerMenuBtn.setAttribute('aria-expanded', 'true');
                hamburgerMenuBtn.classList.add('is-active');
                document.body.classList.add('mobile-menu-open');
            }
        }

        hamburgerMenuBtn.addEventListener('click', () => toggleMobileMenu());

        mobileNavLinks.forEach(link => {
            link.addEventListener('click', () => {
                const targetView = link.dataset.viewtarget as 'home' | 'all-feed' | 'overview' | 'info' | 'about';
                if (targetView) {
                    setMainView(targetView);
                    toggleMobileMenu(true); 
                }
            });
        });

        // Desktop Button Listeners
        desktopHighlightsBtn.addEventListener('click', () => setMainView('home'));
        desktopAllFeedBtn.addEventListener('click', () => setMainView('all-feed'));
        desktopOverviewBtn.addEventListener('click', () => setMainView('overview'));
        desktopAboutBtn.addEventListener('click', () => setMainView('about'));
        
        // Navigation and other event listeners (navigateToFeedItem, overviewGridWrapper, etc.)
        // remain the same as the previous correct version.
        let navigateToFeedItem = (targetId: string) => {
            setMainView('all-feed'); 
            requestAnimationFrame(() => {
                setTimeout(() => {
                    const targetElement = document.getElementById(targetId);
                    if (targetElement && allFeedContentArea && allFeedContentArea.contains(targetElement)) {
                        targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    } else { console.error(`Target feed element '${targetId}' not found or not in scroll container.`); }
                }, 100); 
            });
        };
        overviewGridWrapper.addEventListener('click', (event: MouseEvent) => {
            if (!(event.target instanceof Element)) return;
            const link = event.target.closest<HTMLAnchorElement>('.grid-item');
            if (link && link.dataset.targetId) {
                event.preventDefault();
                navigateToFeedItem(link.dataset.targetId);
            }
        });
        highlightsListWrapper.addEventListener('click', (event: MouseEvent) => {
                if (!(event.target instanceof Element)) return;
            const link = event.target.closest<HTMLAnchorElement>('.highlight-link-wrapper');
            if (link && link.dataset.targetId) {
                event.preventDefault();
                navigateToFeedItem(link.dataset.targetId);
            }
        });
        allFeedListWrapper.addEventListener('click', (event: MouseEvent) => {
            if (!(event.target instanceof Element)) return;
            const clickedLink = event.target.closest('a');
            if (clickedLink) { return; }
        });


        // Initial setup
        if (isMobile()) { setMainView('info'); } 
        else { setMainView('home'); }
        wasMobile = isMobile();

        const resizeObserver = new ResizeObserver(() => {
            const isNowMobile = isMobile();
            if (isNowMobile !== wasMobile) {
                let targetView = currentView;
                if (isNowMobile) { 
                    if (currentView === 'home') targetView = 'info';
                } else { 
                    if (currentView === 'info') targetView = 'home';
                    toggleMobileMenu(true); 
                }
                setMainView(targetView as 'home' | 'all-feed' | 'overview' | 'info' | 'about');
                wasMobile = isNowMobile;
            } else { 
                updateActiveStates(); 
            }
        });
        resizeObserver.observe(document.body);
    });
</script>