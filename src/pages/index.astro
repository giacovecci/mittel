---
// src/pages/index.astro
// Simplified structure, CSS, and JS
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import StaticInfo from '../components/StaticInfo.astro';
import FeedEntry from '../components/FeedEntry.astro';
import OverviewGrid from '../components/OverviewGrid.astro';

// Sample data - ensure it matches what GridItem expects (id, title, imageUrl, altText)
const feedItems = [
    { id: 'project-1', title: 'Project Alpha', imageUrl: '/placeholder.jpg', altText: 'Placeholder 1' },
    { id: 'project-2', title: 'Project Beta', imageUrl: '/placeholder.jpg', altText: 'Placeholder 2' },
    { id: 'project-3', title: 'Another Project', imageUrl: '/placeholder.jpg', altText: 'Placeholder 3' },
    { id: 'project-4', title: 'Case Study Four', imageUrl: '/placeholder.jpg', altText: 'Placeholder 4' },
    { id: 'project-5', title: 'Fifth Entry', imageUrl: '/placeholder.jpg', altText: 'Placeholder 5' },
    { id: 'project-6', title: 'Sixth Thing', imageUrl: '/placeholder.jpg', altText: 'Placeholder 6' },
    { id: 'project-7', title: 'Item Seven', imageUrl: '/placeholder.jpg', altText: 'Placeholder 7' },
    { id: 'project-8', title: 'The Last One', imageUrl: '/placeholder.jpg', altText: 'Placeholder 8' },
];
---
<BaseLayout title="My Portfolio - Home">
    <Header />

    {/* Use 'feed-active' (default) or 'overview-active' on main */}
    <main id="main-content" class="feed-active">
        <div class="vertical-divider"></div>

        {/* Content Areas - Structure remains simple */}
        <aside id="info-content" class="left-column">
            <StaticInfo />
        </aside>

        <section id="feed-content" class="right-column">
            {feedItems.map(item => (
                <FeedEntry entryId={item.id} />
            ))}
        </section>

        <div id="overview-content">
            <OverviewGrid items={feedItems} />
        </div>
    </main>
</BaseLayout>

{/* Styles */}
<style>
    :root { /* Define fallbacks if needed */
        --content-padding-x: 1.25rem;
        --column-gap: 1.25rem;
        /* Get estimate from BaseLayout/Header */
        --header-height-estimate-desktop: 3.5rem;
        --header-height-estimate-mobile-px: 92px; /* Match BaseLayout/Header */
        --scrollbar-track-color: #222;
        --scrollbar-thumb-color: #555;
        --scrollbar-width: 8px;
    }

    main {
        padding: 1rem var(--content-padding-x) 1.25rem;
        position: relative;
        box-sizing: border-box;
        /* --- Desktop: Fixed height, flex for split view --- */
        height: calc(100vh - var(--header-height-estimate-desktop) - 1rem - 1.25rem);
        overflow: hidden; /* Hide main overflow */
        display: flex; /* Default flex for desktop */
        gap: var(--column-gap);
    }

    /* --- Default Content Visibility (Desktop Feed View) --- */
    #info-content { display: block; width: 50%; overflow: hidden; padding-right: calc(var(--column-gap) / 2); }
    #feed-content { display: block; width: 50%; overflow-y: auto; padding-left: calc(var(--column-gap) / 2); scroll-behavior: smooth; }
    #overview-content { display: none; width: 100%; height: 100%; overflow-y: auto; } /* Hidden by default */

    /* --- Desktop Overview View --- */
    main.overview-active { display: block; /* Override flex */ }
    main.overview-active #info-content,
    main.overview-active #feed-content { display: none; }
    main.overview-active #overview-content { display: block; }
    main.overview-active .vertical-divider { display: none; }

    /* Vertical Divider Styling */
    .vertical-divider {
        position: absolute; top: 1rem; bottom: 1.25rem;
        left: 50%; transform: translateX(-50%);
        width: 0.125rem; background-color: #ccc; z-index: 999;
    }

    /* Scrollbar styles */
    #feed-content, #overview-content {
        scrollbar-width: thin;
        scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);
    }
    #feed-content::-webkit-scrollbar, #overview-content::-webkit-scrollbar { width: var(--scrollbar-width); }
    #feed-content::-webkit-scrollbar-track, #overview-content::-webkit-scrollbar-track { background: var(--scrollbar-track-color); }
    #feed-content::-webkit-scrollbar-thumb, #overview-content::-webkit-scrollbar-thumb { background-color: var(--scrollbar-thumb-color); border-radius: calc(var(--scrollbar-width) / 2); border: 2px solid var(--scrollbar-track-color); }

    /* ================================== */
    /* --- MOBILE STYLES (max-width: 768px) --- */
    /* ================================== */
     @media (max-width: 768px) {
        main {
            display: block; /* Stack everything */
            height: auto; /* Allow content height */
            overflow-y: visible; /* Let body scroll */
            /* --- Add top/bottom padding to main container --- */
            padding: 1rem var(--content-padding-x); /* Adjust 1rem as needed */
            position: relative;
            transform: none;
        }

        /* Stack columns, reset desktop specifics */
        #info-content, #feed-content, #overview-content {
            width: 100%;
            height: auto;
            overflow-y: visible;
            padding: 0; /* Keep internal padding reset */
            /* --- Remove specific margin-top logic --- */
            /* Spacing is now handled by main's padding-top */
             /* Optionally add margin-bottom for spacing between sections if multiple could be visible */
             margin-bottom: 1.5rem; /* Example spacing below each section */
        }
         /* Ensure last element has no bottom margin */
         #info-content:last-child,
         #feed-content:last-child,
         #overview-content:last-child {
            margin-bottom: 0;
         }


        /* --- Mobile Content Visibility Rules (Remain the same) --- */
        main.feed-active #info-content { display: none; }
        main.feed-active #feed-content { display: block; }
        main.feed-active #overview-content { display: none; }

        main.overview-active #info-content,
        main.overview-active #feed-content { display: none; }
        main.overview-active #overview-content { display: block; }

        main.info-visible #info-content { display: block; }
        main.info-visible #feed-content { display: none; }
        main.info-visible #overview-content { display: none; }

        /* Hide desktop divider */
        .vertical-divider { display: none; }
    }
</style>

{/* --- Corrected Script --- */}
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Get elements
        const mainElement = document.getElementById('main-content');
        const infoBtn = document.getElementById('info-view-btn') as HTMLButtonElement | null;
        const feedBtn = document.getElementById('feed-view-btn') as HTMLButtonElement | null;
        const overviewBtn = document.getElementById('overview-view-btn') as HTMLButtonElement | null;
        const overviewGridWrapper = document.getElementById('overview-grid-wrapper');
        const infoContent = document.getElementById('info-content');
        const feedContent = document.getElementById('feed-content'); // Scroll target

        // --- Critical Check: Ensure all essential elements exist ---
        if (!mainElement || !infoBtn || !feedBtn || !overviewBtn || !overviewGridWrapper || !infoContent || !feedContent) {
            console.error("Essential elements missing, script cannot run. Check IDs in index.astro HTML.");
            return; // Stop script execution
        }

        // --- Constants and State ---
        const MOBILE_BREAKPOINT = 768;
        let currentMobileInfoVisible = false;

        // --- Type-Safe Functions ---
        function isMobileView(): boolean {
            return window.innerWidth <= MOBILE_BREAKPOINT;
        }

        function setActiveButton(activeBtn: HTMLButtonElement | null): void {
             [infoBtn, feedBtn, overviewBtn].forEach(btn => {
                 if (btn) { // Check button exists
                     btn.classList.toggle('active', btn === activeBtn);
                 }
             });
         }

        function setMainView(view: 'feed' | 'overview'): void {
            mainElement!.classList.remove('feed-active', 'overview-active', 'info-visible'); // Use non-null assertion

            if (view === 'overview') {
                mainElement!.classList.add('overview-active');
                setActiveButton(overviewBtn);
                currentMobileInfoVisible = false; // Reset info state
            } else { // Feed view
                mainElement!.classList.add('feed-active');
                // Restore info visibility if needed on mobile feed view
                if (isMobileView() && currentMobileInfoVisible) {
                    mainElement!.classList.add('info-visible');
                    setActiveButton(infoBtn);
                } else {
                    setActiveButton(feedBtn); // Default to feed button active
                }
            }
             console.log(`Main view set to: ${view}`);
        }

         function toggleMobileInfoFeed(showInfo: boolean): void {
             if (!isMobileView()) return;
             currentMobileInfoVisible = showInfo;
             mainElement!.classList.toggle('info-visible', showInfo); // Use non-null assertion

             setActiveButton(showInfo ? infoBtn : feedBtn);
             console.log(`Mobile info visibility toggled: ${showInfo}`);

             if (mainElement!.classList.contains('overview-active')) {
                  setMainView('feed');
             }
         }

        // --- Event Listeners ---
        overviewBtn.addEventListener('click', () => { setMainView('overview'); });
        feedBtn.addEventListener('click', () => {
            setMainView('feed');
            if (isMobileView()) { toggleMobileInfoFeed(false); }
        });
        infoBtn.addEventListener('click', () => { toggleMobileInfoFeed(true); });

        overviewGridWrapper.addEventListener('click', (event: MouseEvent) => {
            if (event.target instanceof Element) {
                 const gridItemLink = event.target.closest<HTMLAnchorElement>('.grid-item');
                 if (gridItemLink) {
                     event.preventDefault();
                     const targetId = gridItemLink.dataset.targetId;
                     if (!targetId) { console.error("Grid item missing data-target-id"); return; };

                     const targetFeedElement = document.getElementById(targetId);
                     if (targetFeedElement) {
                         setMainView('feed');
                         if (isMobileView()) { toggleMobileInfoFeed(false); }
                         requestAnimationFrame(() => {
                              targetFeedElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                         });
                     } else { console.error(`Target element #${targetId} not found.`); }
                 }
            }
        });

        // --- Initial Setup ---
        console.log("Initializing view...");
        setMainView('feed');
        if (isMobileView()) { toggleMobileInfoFeed(false); }
        else { setActiveButton(feedBtn); }
        console.log("Portfolio script initialized successfully.");

    }); // End DOMContentLoaded
</script>