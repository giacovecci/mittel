---
// src/pages/index.astro
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import IdentityHeader from '../components/IdentityHeader.astro';
import Header from '../components/Header.astro';
import StaticInfo from '../components/StaticInfo.astro';
import FeedEntry from '../components/FeedEntry.astro';
import OverviewGrid from '../components/OverviewGrid.astro';
import type { CollectionEntry } from 'astro:content';

const feedEntriesFetched: CollectionEntry<'feed'>[] = await getCollection('feed');
const feedEntries = feedEntriesFetched.sort((a, b) => {
    const dateA = a.data.date ? new Date(a.data.date).getTime() : 0;
    const dateB = b.data.date ? new Date(b.data.date).getTime() : 0;
    return dateB - dateA;
});
const overviewItems = feedEntries.map(entry => ({
    id: entry.slug,
    title: entry.data.title || 'Untitled',
    imageUrl: entry.data.thumbnail || '/placeholder.jpg', 
    altText: entry.data.title || 'Feed item thumbnail'
}));
---
<BaseLayout title="Å»akowiecki | fixer supreme XD">

    <div slot="identity-header">
        <IdentityHeader />
    </div>

    <div slot="main-header">
        <Header />
    </div>

    <div slot="info-content" id="info-content-wrapper"> 
        <StaticInfo />
    </div>

    <section slot="feed-content" id="feed-content-wrapper"> 
        {feedEntries.map(entry => (
            <FeedEntry entry={entry} />
        ))}
    </section>

    <div slot="overview-content" id="overview-content-wrapper"> 
        <div id="overview-grid-wrapper">
            <OverviewGrid items={overviewItems} />
        </div>
    </div>

</BaseLayout>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const appContainer = document.getElementById('app-container');
        const identityHeaderArea = document.getElementById('identity-header-area');
        const mainHeaderArea = document.getElementById('main-header-area');
        const dividerArea = document.getElementById('divider-area');
        const infoContentArea = document.getElementById('info-content-area');
        const feedContentArea = document.getElementById('feed-content-area');
        const overviewContentArea = document.getElementById('overview-content-area');
        const infoBtn = document.getElementById('info-view-btn') as HTMLButtonElement | null;
        const feedBtn = document.getElementById('feed-view-btn') as HTMLButtonElement | null;
        const overviewBtn = document.getElementById('overview-view-btn') as HTMLButtonElement | null;
        const overviewGridWrapper = document.getElementById('overview-grid-wrapper');

        if (!appContainer || !identityHeaderArea || !mainHeaderArea || !dividerArea || !infoContentArea || !feedContentArea || !overviewContentArea || !infoBtn || !feedBtn || !overviewBtn || !overviewGridWrapper) {
            console.error("Essential elements missing for view switching script."); return;
        }

        const MOBILE_BREAKPOINT = 768;
        let wasMobile = window.innerWidth <= MOBILE_BREAKPOINT;

        function isMobile(): boolean { return window.innerWidth <= MOBILE_BREAKPOINT; }
        function isDesktop(): boolean { return !isMobile(); }

        function setActiveButton(activeBtn: HTMLButtonElement | null): void {
            [infoBtn, feedBtn, overviewBtn].forEach(btn => {
                if (btn) { btn.classList.toggle('active', btn === activeBtn); }
            });
        }

        function setMainView(view: 'feed' | 'overview' | 'info'): void {
            console.log("%cSetting view:", "color: blue; font-weight: bold;", view, "isMobile:", isMobile());
            if (!appContainer) return;
            appContainer.classList.remove('view-feed', 'view-overview', 'view-info', 'is-mobile', 'is-desktop');
            const elementsToReset = [
                identityHeaderArea, mainHeaderArea, dividerArea,
                infoContentArea, feedContentArea, overviewContentArea
            ];
            elementsToReset.forEach(el => { if (el) { el.style.display = ''; } });
            if (isMobile()) { appContainer.classList.add('is-mobile'); } else { appContainer.classList.add('is-desktop'); }
            if (view === 'overview') {
                appContainer.classList.add('view-overview');
                setActiveButton(overviewBtn);
            } else if (view === 'info' && isMobile()) {
                appContainer.classList.add('view-info');
                setActiveButton(infoBtn);
            } else {
                appContainer.classList.add('view-feed');
                setActiveButton(feedBtn);
            }
        }

        overviewBtn.addEventListener('click', () => setMainView('overview'));
        feedBtn.addEventListener('click', () => setMainView('feed'));
        infoBtn.addEventListener('click', () => { if (isMobile()) { setMainView('info'); } else { setMainView('feed'); } });

        // --- UPDATED Grid Click Logic ---
        if (overviewGridWrapper) {
            overviewGridWrapper.addEventListener('click', (event: MouseEvent) => {
                if (!(event.target instanceof Element)) return;

                const gridItemLink = event.target.closest<HTMLAnchorElement>('.grid-item');
                
                if (!gridItemLink || !gridItemLink.dataset.targetId || !feedContentArea) {
                    if (gridItemLink && !gridItemLink.dataset.targetId) {
                        console.error("Grid item link missing 'data-target-id'.");
                    }
                    if (!feedContentArea) {
                         console.error("Feed content area not found for scrolling.");
                    }
                    return;
                }
                
                event.preventDefault();
                const targetId = gridItemLink.dataset.targetId;

                // 1. Switch view first
                setMainView('feed');

                // 2. Defer scrolling until after the next browser paint cycle.
                // This allows the DOM to update with the new view before we try to find and scroll to the element.
                requestAnimationFrame(() => {
                    // An additional small delay can sometimes be necessary if requestAnimationFrame alone
                    // isn't enough for all CSS transitions/layout shifts to complete.
                    // Start with a minimal timeout, or remove if requestAnimationFrame is sufficient.
                    setTimeout(() => {
                        const targetFeedElement = document.getElementById(targetId);

                        if (targetFeedElement && feedContentArea.contains(targetFeedElement)) {
                            if (targetFeedElement.classList.contains('feed-entry')) {
                                targetFeedElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                            } else {
                                console.warn(`Element with ID '${targetId}' found, but lacks 'feed-entry' class. Still attempting scroll.`);
                                targetFeedElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                            }
                        } else if (targetFeedElement) {
                            console.error(`Element ID '${targetId}' found, but not within #feed-content-area.`);
                        } else {
                            console.error(`Target element with ID '${targetId}' not found in the document.`);
                        }
                    }, 50); // Small delay for rendering, adjust or remove if not needed
                });
            });
        }

        console.log("Initializing view...");
        setMainView('feed');
        const resizeObserver = new ResizeObserver(() => {
            const isNowMobile = isMobile();
            if (isNowMobile !== wasMobile) {
                setMainView('feed');
                wasMobile = isNowMobile;
            }
        });
        resizeObserver.observe(document.body);
        
        // The gallery logic is now self-contained within FeedEntry.astro's script
        // No global gallery initialization is needed here anymore.
    });
</script>