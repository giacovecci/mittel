---
// src/pages/index.astro (New Landing Page)
import { getEntry } from 'astro:content';
import LandingLayout from '../layouts/LandingLayout.astro';

const landingPageEntry = await getEntry('general_content', 'landing_page');

const defaultSiteName = "Piotr Żakowiecki";
const defaultTagline = "field producer · researcher · videojournalist";
const defaultLocation = "Berlin/Warsaw";
const defaultBgImage = "/uploads/placeholder-landing-bg.jpg";
const defaultBgImageAlt = "Abstract background image";

const siteName = landingPageEntry?.data.landingPageSiteName || defaultSiteName;
const tagline = landingPageEntry?.data.landingPageTagline || defaultTagline;
const location = landingPageEntry?.data.landingPageLocation || defaultLocation;
const landingBgImage = landingPageEntry?.data.landingPageBackgroundImage || defaultBgImage;
const landingBgImageAlt = landingPageEntry?.data.landingPageBackgroundImageAlt || defaultBgImageAlt;

// SVG Icon variables removed
---
<LandingLayout title={`${siteName} | Welcome`} backgroundImageUrl={landingBgImage} backgroundAltText={landingBgImageAlt}>
  
  {/* MODIFIED: Theme Toggle Button - now text-based */}
  <button type="button" class="theme-toggle-button-fixed" id="theme-toggle-btn-fixed" aria-label="Toggle theme">
    {/* Text will be injected here by JS */}
  </button>

  <main class="landing-main-content-box">
    <header class="landing-identity-content">
      <h1 class="site-name">{siteName}</h1>
      <p class="tagline">{tagline}</p>
      <p class="location">{location}</p>
    </header>

    <nav class="landing-navigation-buttons">
      <a href="/portfolio" class="landing-button portfolio-button">
        Portfolio
      </a>
      <a href="/portfolio#show-contact" class="landing-button work-button">
        Work With Me
      </a>
    </nav>
  </main>

  <style>
    /* MODIFIED: Styles for the fixed theme toggle button (text-based) */
    .theme-toggle-button-fixed {
      position: fixed;
      top: var(--spacing-md);
      right: var(--spacing-md);
      z-index: 100; 
      background-color: rgba(var(--color-text-unified-rgb), 0.1); /* Subtle background */
      border: 1px solid var(--color-border-subtle);
      color: var(--color-text-unified); 
      padding: var(--spacing-xs) var(--spacing-sm); /* Padding for text */
      cursor: pointer;
      border-radius: var(--border-radius-sm); /* Standard border radius */
      font-size: 0.8rem; /* Smaller font for a corner button */
      font-weight: var(--font-weight-medium);
      line-height: 1.2;
      min-width: 80px; /* Ensure it's not too small */
      text-align: center;
      transition: color 0.3s ease, background-color 0.3s ease, border-color 0.3s ease;
    }
    .theme-toggle-button-fixed:hover {
      background-color: var(--color-surface-light-hover);
      border-color: var(--color-accent-hover-custom);
    }
    /* Removed .theme-icon-svg-container styles */

    /* Styles for .landing-main-content-box and its children remain the same */
    .landing-main-content-box { 
      background-color: rgba(0, 0, 0, 0.65); 
      padding: var(--spacing-xl) var(--spacing-lg);
      border-radius: var(--border-radius-sm);
      max-width: 650px; 
      width: 90%;
      box-shadow: 0 5px 20px rgba(0,0,0,0.4);
      transition: background-color 0.3s ease;
      position: relative; 
      z-index: 10;
      display: flex; 
      flex-direction: column; 
      align-items: center; 
    }
    html.light-mode .landing-main-content-box { 
        background-color: rgba(255, 255, 255, 0.75); 
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    }
    .landing-identity-content { 
      margin-bottom: var(--spacing-lg); 
      width: 100%; 
    }
    .landing-identity-content .site-name {
      font-size: clamp(2rem, 1.5rem + 2vw, 3rem);
      color: var(--color-text-unified); 
      margin-bottom: var(--spacing-xs);
      font-weight: var(--font-weight-bold);
      line-height: 1.2;
      text-align: center;
    }
    .landing-identity-content .tagline {
      font-size: clamp(1rem, 0.8rem + 0.8vw, 1.3rem);
      color: var(--color-accent); 
      margin-bottom: var(--spacing-xxs);
      text-align: center; 
      hyphens: none;
      line-height: 1.3;
    }
    .landing-identity-content .location {
      font-size: clamp(0.9rem, 0.7rem + 0.6vw, 1.1rem);
      color: var(--color-text-secondary); 
      margin-bottom: 0;
      text-align: center; 
      hyphens: none;
      line-height: 1.3;
    }
    .landing-navigation-buttons {
      display: flex;
      flex-direction: column; 
      align-items: center; 
      gap: var(--spacing-md);
      width: 100%; 
    }
    .landing-button {
      display: inline-block;
      padding: var(--spacing-sm) var(--spacing-lg);
      border: 1px solid var(--color-border-subtle); 
      border-radius: var(--border-radius-sm);
      color: var(--color-text-unified);
      background-color: rgba(var(--color-text-unified-rgb), 0.1); 
      text-decoration: none;
      font-weight: var(--font-weight-medium);
      transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;
      width: 100%; 
      max-width: 320px; 
      text-align: center;
      cursor: pointer;
      font-size: 1rem;
      line-height: 1.5;
      box-sizing: border-box;
    }
    .landing-button:hover {
      background-color: var(--color-surface-light-hover);
      border-color: var(--color-accent-hover-custom);
      color: var(--color-accent-hover-custom);
    }
    @media (min-width: 768px) { 
      .landing-navigation-buttons {
        flex-direction: row; 
        justify-content: center; 
        gap: var(--spacing-lg);
      }
      .landing-button { 
        width: auto; 
        min-width: 200px; 
      }
    }
    @media (max-width: 480px) {
        .landing-button {
            min-width: 160px; 
            font-size: 0.9rem; 
            padding: var(--spacing-xs) var(--spacing-sm);
        }
    }
  </style>

  <script> // MODIFIED: define:vars removed, script simplified
    const themeToggleButtonFixed = document.getElementById('theme-toggle-btn-fixed');
    // const themeIconFixedSpan = document.getElementById('theme-icon-fixed'); // No longer needed

    function updateButtonText(theme) { // Renamed from updateButtonIcon
      if (themeToggleButtonFixed) {
        // If light theme is active, button text is "Dark Mode" (to switch to dark)
        // If dark theme is active, button text is "Light Mode" (to switch to light)
        themeToggleButtonFixed.textContent = theme === 'light' ? 'Dark Mode' : 'Light Mode'; 
        themeToggleButtonFixed.setAttribute('aria-label', theme === 'light' ? 'Switch to dark mode' : 'Switch to light mode');
      }
    }

    // Initial button text based on theme from inline script in <head> of LandingLayout.astro
    if (typeof window.currentTheme !== 'undefined' && themeToggleButtonFixed) {
      updateButtonText(window.currentTheme);
    } else if (themeToggleButtonFixed) { 
      const initialTheme = localStorage.getItem('theme-preference') || (window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark');
      updateButtonText(initialTheme);
    }
    
    themeToggleButtonFixed?.addEventListener('click', () => {
      if (typeof window.toggleTheme === 'function') {
        window.toggleTheme(); 
      }
    });

    document.addEventListener('themechanged', (e) => {
      if (e.detail && typeof e.detail.theme !== 'undefined') {
        updateButtonText(e.detail.theme);
      }
    });
  </script>
</LandingLayout>