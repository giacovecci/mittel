---
// src/pages/index.astro
import { getCollection } from 'astro:content'; // Import Astro's content collection function
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import StaticInfo from '../components/StaticInfo.astro';
import FeedEntry from '../components/FeedEntry.astro';
import OverviewGrid from '../components/OverviewGrid.astro';
import type { CollectionEntry } from 'astro:content'; // Import type for better safety

// Fetch all entries from the 'feed' collection
const feedEntries: CollectionEntry<'feed'>[] = await getCollection('feed');

// Optional: Sort entries by date, newest first (ensure 'date' field exists in frontmatter)
// feedEntries.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

// --- Prepare data for components ---

// 1. Data for OverviewGrid: Map fetched entries to the structure OverviewGrid expects
//    (Ensure GridItem.astro uses `item.id` for the link/data-target-id and `item.imageUrl` for the image)
const overviewItems = feedEntries.map(entry => ({
    id: entry.slug, // Use slug as the unique ID for linking
    title: entry.data.title || 'Untitled', // Use entry title
    imageUrl: entry.data.thumbnail || '/placeholder.jpg', // Use thumbnail from frontmatter, fallback to placeholder
    altText: entry.data.title || 'Feed item thumbnail' // Use title for alt text, or provide a generic one
}));

// 2. Data for FeedEntry: We will pass the full entry object to FeedEntry
//    It contains both `slug` (for the ID) and `data` (for title, date, contentBlocks)
---
<BaseLayout title="My Portfolio - Home">
    <Header />

    {/* Use 'feed-active' (default) or 'overview-active' on main */}
    <main id="main-content" class="feed-active">
        <div class="vertical-divider"></div>

        {/* Left Column: Static Info */}
        <aside id="info-content" class="left-column">
            <StaticInfo />
        </aside>

        {/* Right Column: Scrollable Feed */}
        <section id="feed-content" class="right-column">
            {/* Loop through fetched entries and pass the full entry object */}
            {feedEntries.map(entry => (
                <FeedEntry entry={entry} />
                /* Pass the whole entry object. FeedEntry will use entry.slug for its ID
                   and entry.data for its content. */
            ))}
        </section>

        {/* Full Width Overview Grid */}
        <div id="overview-content">
            {/* Pass the specifically mapped 'overviewItems' array */}
            <OverviewGrid items={overviewItems} />
        </div>
    </main>
</BaseLayout>

{/* Styles remain unchanged - keep your existing <style> block */}
<style>
   /* --- KEEP YOUR EXISTING CSS RULES HERE --- */
    :root { /* Define fallbacks if needed */
        --content-padding-x: 1.25rem;
        --column-gap: 1.25rem;
        /* Get estimate from BaseLayout/Header */
        --header-height-estimate-desktop: 3.5rem;
        --header-height-estimate-mobile-px: 92px; /* Match BaseLayout/Header */
        --scrollbar-track-color: #222;
        --scrollbar-thumb-color: #555;
        --scrollbar-width: 8px;
    }

    main {
        padding: 1rem var(--content-padding-x) 1.25rem;
        position: relative;
        box-sizing: border-box;
        /* --- Desktop: Fixed height, flex for split view --- */
        height: calc(100vh - var(--header-height-estimate-desktop) - 1rem - 1.25rem);
        overflow: hidden; /* Hide main overflow */
        display: flex; /* Default flex for desktop */
        gap: var(--column-gap);
    }

    /* --- Default Content Visibility (Desktop Feed View) --- */
    #info-content { display: block; width: 50%; overflow: hidden; padding-right: calc(var(--column-gap) / 2); }
    #feed-content { display: block; width: 50%; overflow-y: auto; padding-left: calc(var(--column-gap) / 2); scroll-behavior: smooth; }
    #overview-content { display: none; width: 100%; height: 100%; overflow-y: auto; } /* Hidden by default */

    /* --- Desktop Overview View --- */
    main.overview-active { display: block; /* Override flex */ }
    main.overview-active #info-content,
    main.overview-active #feed-content { display: none; }
    main.overview-active #overview-content { display: block; }
    main.overview-active .vertical-divider { display: none; }

    /* Vertical Divider Styling */
    .vertical-divider {
        position: absolute; top: 1rem; bottom: 1.25rem;
        left: 50%; transform: translateX(-50%);
        width: 0.125rem; background-color: #ccc; z-index: 999;
    }

    /* Scrollbar styles */
    #feed-content, #overview-content {
        scrollbar-width: thin;
        scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);
    }
    #feed-content::-webkit-scrollbar, #overview-content::-webkit-scrollbar { width: var(--scrollbar-width); }
    #feed-content::-webkit-scrollbar-track, #overview-content::-webkit-scrollbar-track { background: var(--scrollbar-track-color); }
    #feed-content::-webkit-scrollbar-thumb, #overview-content::-webkit-scrollbar-thumb { background-color: var(--scrollbar-thumb-color); border-radius: calc(var(--scrollbar-width) / 2); border: 2px solid var(--scrollbar-track-color); }

    /* ================================== */
    /* --- MOBILE STYLES (max-width: 768px) --- */
    /* ================================== */
    @media (max-width: 768px) {
        main {
            display: block; /* Stack everything */
            height: auto; /* Allow content height */
            overflow-y: visible; /* Let body scroll */
            /* --- Add top/bottom padding to main container --- */
            padding: 1rem var(--content-padding-x); /* Adjust 1rem as needed */
            position: relative;
            transform: none;
        }

        /* Stack columns, reset desktop specifics */
        #info-content, #feed-content, #overview-content {
            width: 100%;
            height: auto;
            overflow-y: visible;
            padding: 0; /* Keep internal padding reset */
            /* --- Remove specific margin-top logic --- */
            /* Spacing is now handled by main's padding-top */
            /* Optionally add margin-bottom for spacing between sections if multiple could be visible */
            margin-bottom: 1.5rem; /* Example spacing below each section */
        }
        /* Ensure last element has no bottom margin */
        #info-content:last-child,
        #feed-content:last-child,
        #overview-content:last-child {
            margin-bottom: 0;
        }


        /* --- Mobile Content Visibility Rules (Remain the same) --- */
        main.feed-active #info-content { display: none; }
        main.feed-active #feed-content { display: block; }
        main.feed-active #overview-content { display: none; }

        main.overview-active #info-content,
        main.overview-active #feed-content { display: none; }
        main.overview-active #overview-content { display: block; }

        main.info-visible #info-content { display: block; }
        main.info-visible #feed-content { display: none; }
        main.info-visible #overview-content { display: none; }

        /* Hide desktop divider */
        .vertical-divider { display: none; }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Get elements
        const mainElement = document.getElementById('main-content');
        const infoBtn = document.getElementById('info-view-btn') as HTMLButtonElement | null;
        const feedBtn = document.getElementById('feed-view-btn') as HTMLButtonElement | null;
        const overviewBtn = document.getElementById('overview-view-btn') as HTMLButtonElement | null;
        const overviewGridWrapper = document.getElementById('overview-grid-wrapper'); // Make sure OverviewGrid.astro has this ID on its wrapper
        const infoContent = document.getElementById('info-content');
        const feedContent = document.getElementById('feed-content'); // Scroll target

        // --- Critical Check: Ensure all essential elements exist ---
        if (!mainElement || !infoBtn || !feedBtn || !overviewBtn || !overviewGridWrapper || !infoContent || !feedContent) {
            console.error("Essential elements missing, script cannot run. Check IDs in index.astro HTML.");
            return; // Stop script execution
        }

        // --- Constants and State ---
        const MOBILE_BREAKPOINT = 768;
        let currentMobileInfoVisible = false;

        // --- Type-Safe Functions ---
        function isMobileView(): boolean {
            return window.innerWidth <= MOBILE_BREAKPOINT;
        }

        function setActiveButton(activeBtn: HTMLButtonElement | null): void {
            [infoBtn, feedBtn, overviewBtn].forEach(btn => {
                if (btn) { // Check button exists
                    btn.classList.toggle('active', btn === activeBtn);
                }
            });
        }

        function setMainView(view: 'feed' | 'overview'): void {
            // Use non-null assertion since we checked mainElement exists
            mainElement!.classList.remove('feed-active', 'overview-active', 'info-visible');

            if (view === 'overview') {
                mainElement!.classList.add('overview-active');
                setActiveButton(overviewBtn);
                currentMobileInfoVisible = false; // Reset info state
            } else { // Feed view
                mainElement!.classList.add('feed-active');
                // Restore info visibility if needed on mobile feed view
                if (isMobileView() && currentMobileInfoVisible) {
                    mainElement!.classList.add('info-visible');
                    setActiveButton(infoBtn);
                } else {
                    // Check if feedBtn exists before setting it active
                    if(feedBtn) setActiveButton(feedBtn); // Default to feed button active
                }
            }
            console.log(`Main view set to: ${view}`);
        }

        function toggleMobileInfoFeed(showInfo: boolean): void {
            if (!isMobileView()) return;
            currentMobileInfoVisible = showInfo;
            // Use non-null assertion since we checked mainElement exists
            mainElement!.classList.toggle('info-visible', showInfo);

            // Check if buttons exist before setting active
            setActiveButton(showInfo ? infoBtn : feedBtn);
            console.log(`Mobile info visibility toggled: ${showInfo}`);

            if (mainElement!.classList.contains('overview-active')) {
                setMainView('feed');
            }
        }

        // --- Event Listeners ---
        // Check if buttons exist before adding listeners
        if (overviewBtn) {
            overviewBtn.addEventListener('click', () => { setMainView('overview'); });
        }
        if (feedBtn) {
            feedBtn.addEventListener('click', () => {
                setMainView('feed');
                if (isMobileView()) { toggleMobileInfoFeed(false); }
            });
        }
        if (infoBtn) {
            infoBtn.addEventListener('click', () => { toggleMobileInfoFeed(true); });
        }

        // Ensure the event listener for grid items uses the correct selector and attribute
        // Check if overviewGridWrapper exists before adding listener
        if (overviewGridWrapper) {
            overviewGridWrapper.addEventListener('click', (event: MouseEvent) => {
                if (event.target instanceof Element) {
                    // Ensure GridItem.astro's clickable element (likely <a>) has class 'grid-item' and 'data-target-id' attribute
                    const gridItemLink = event.target.closest<HTMLAnchorElement>('.grid-item');
                     if (gridItemLink && gridItemLink.dataset.targetId) { // Check dataset.targetId exists
                         event.preventDefault();
                         const targetId = gridItemLink.dataset.targetId; // e.g., "project-alpha"

                         // Find the feed entry article by its ID
                         const targetFeedElement = document.getElementById(targetId); // This ID must match the <article id={entry.slug}> in FeedEntry.astro

                         if (targetFeedElement) {
                             setMainView('feed');
                             if (isMobileView()) { toggleMobileInfoFeed(false); }
                             requestAnimationFrame(() => {
                                // Scroll the FEED COLUMN container, not the element itself directly into view if it has padding etc.
                                // Or use scrollIntoView if the container scrolls properly
                                 targetFeedElement.scrollIntoView({ behavior: 'smooth', block: 'start' });

                                // Alternative: scroll feed container
                                // const feedContainer = document.getElementById('feed-content');
                                // const offsetTop = targetFeedElement.offsetTop;
                                // feedContainer?.scrollTo({ top: offsetTop - 20, behavior: 'smooth'}); // Adjust offset as needed
                             });
                         } else { console.error(`Target element #${targetId} not found. Check FeedEntry ID.`); }
                     } else if (gridItemLink) {
                          console.error("Grid item link clicked, but missing 'data-target-id'. Check GridItem.astro.");
                     }
                }
            });
        } else {
             console.error("Overview grid wrapper not found, click listener not attached.");
        }


        // --- Initial Setup ---
        console.log("Initializing view...");
        setMainView('feed');
        if (isMobileView()) { toggleMobileInfoFeed(false); }
        else { setActiveButton(feedBtn); } // Check if feedBtn exists
        console.log("Portfolio script initialized successfully.");

    }); // End DOMContentLoaded
</script>