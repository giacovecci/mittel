---
// src/pages/index.astro (New Landing Page)
import { getEntry }_ from 'astro:content';
import LandingLayout from '../layouts/LandingLayout.astro';

// Fetch landing page content from CMS
const landingPageEntry = await getEntry('general_content', 'landing_page');

// Default values if CMS content is not found or fields are empty
const defaultSiteName = "Piotr Żakowiecki";
const defaultTagline = "field producer ● researcher ● videojournalist";
const defaultLocation = "Berlin/Warsaw";
const defaultBgImage = "/uploads/placeholder-landing-bg.jpg"; // Ensure this exists
const defaultBgImageAlt = "Abstract background image";

const siteName = landingPageEntry?.data.landingPageSiteName || defaultSiteName;
const tagline = landingPageEntry?.data.landingPageTagline || defaultTagline;
const location = landingPageEntry?.data.landingPageLocation || defaultLocation;
const landingBgImage = landingPageEntry?.data.landingPageBackgroundImage || defaultBgImage;
const landingBgImageAlt = landingPageEntry?.data.landingPageBackgroundImageAlt || defaultBgImageAlt; // Alt text for background image (used by layout if needed)

---
<LandingLayout title={`${siteName} | Welcome`} backgroundImageUrl={landingBgImage} backgroundAltText={landingBgImageAlt}>
  <main class="landing-content-wrapper">
    <header class="landing-identity">
      <h1 class="site-name">{siteName}</h1>
      <p class="tagline">{tagline}</p>
      <p class="location">{location}</p>
    </header>

    <nav class="landing-navigation">
      <a href="/portfolio" class="landing-button portfolio-button">
        Portfolio >
      </a>
      <a href="/portfolio#show-contact" class="landing-button work-button">
        Work With Me >
      </a>
      <button type="button" class="landing-button theme-toggle-button" id="theme-toggle-btn-landing">
        {/* Text will be set by script */}
      </button>
    </nav>
  </main>

  <style>
    /* ... (styles from Phase 1 & 2 remain the same) ... */
    .landing-content-wrapper {
      background-color: rgba(0, 0, 0, 0.65); 
      padding: var(--spacing-xl) var(--spacing-lg);
      border-radius: var(--border-radius-sm);
      max-width: 650px; 
      width: 90%;
      box-shadow: 0 5px 20px rgba(0,0,0,0.4);
      transition: background-color 0.3s ease; 
    }
    html.light-mode .landing-content-wrapper { 
        background-color: rgba(255, 255, 255, 0.75); 
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    }
    .landing-identity .site-name {
      font-size: clamp(2rem, 1.5rem + 2vw, 3rem);
      color: var(--color-text-unified); 
      margin-bottom: var(--spacing-xs);
      font-weight: var(--font-weight-bold);
      line-height: 1.2;
    }
    .landing-identity .tagline {
      font-size: clamp(1rem, 0.8rem + 0.8vw, 1.3rem);
      color: var(--color-accent); 
      margin-bottom: var(--spacing-xxs);
      text-align: center; 
      hyphens: none;
      line-height: 1.3;
    }
    .landing-identity .location {
      font-size: clamp(0.9rem, 0.7rem + 0.6vw, 1.1rem);
      color: var(--color-text-secondary); 
      margin-bottom: 0;
      text-align: center; 
      hyphens: none;
      line-height: 1.3;
    }
    .landing-navigation {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-md);
      align-items: center; 
    }
    .landing-button {
      display: inline-block;
      padding: var(--spacing-sm) var(--spacing-lg);
      border: 1px solid var(--color-border-subtle); 
      border-radius: var(--border-radius-sm);
      color: var(--color-text-unified);
      background-color: rgba(var(--color-text-unified-rgb), 0.1); 
      text-decoration: none;
      font-weight: var(--font-weight-medium);
      transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;
      width: 100%;
      max-width: 300px;
      text-align: center;
      cursor: pointer;
      font-size: 1rem;
      line-height: 1.5;
      box-sizing: border-box;
    }
    .landing-button:hover {
      background-color: var(--color-surface-light-hover);
      border-color: var(--color-accent-hover-custom);
      color: var(--color-accent-hover-custom);
    }
    .landing-button.theme-toggle-button {
      background-color: rgba(var(--color-text-unified-rgb), 0.05);
      max-width: 200px;
    }
    @media (min-width: 600px) {
      .landing-navigation {
        flex-direction: row; 
        justify-content: center;
        gap: var(--spacing-lg);
      }
      .landing-button {
        width: auto; 
        min-width: 160px; 
      }
       .landing-button.theme-toggle-button {
         min-width: 120px;
       }
    }
  </style>

  <script>
    // Script for theme toggle button text update remains the same
    const themeToggleButtonLanding = document.getElementById('theme-toggle-btn-landing');

    function updateButtonText(theme) {
      if (themeToggleButtonLanding) {
        themeToggleButtonLanding.textContent = theme === 'light' ? 'Dark Mode' : 'Light Mode';
      }
    }

    if (typeof window.currentTheme !== 'undefined') {
      updateButtonText(window.currentTheme);
    } else {
      const initialTheme = localStorage.getItem('theme-preference') || (window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark');
      updateButtonText(initialTheme);
    }
    
    themeToggleButtonLanding?.addEventListener('click', () => {
      if (typeof window.toggleTheme === 'function') {
        window.toggleTheme();
      }
    });

    document.addEventListener('themechanged', (e) => {
      updateButtonText(e.detail.theme);
    });
  </script>
</LandingLayout>