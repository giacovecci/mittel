---
// src/pages/index.astro
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import IdentityHeader from '../components/IdentityHeader.astro';
import Header from '../components/Header.astro';
import StaticInfo from '../components/StaticInfo.astro';
import FeedEntry from '../components/FeedEntry.astro';
import OverviewGrid from '../components/OverviewGrid.astro';
import type { CollectionEntry } from 'astro:content';

// Data Fetching
const feedEntriesFetched: CollectionEntry<'feed'>[] = await getCollection('feed');
const feedEntries = feedEntriesFetched.sort((a, b) => {
    const dateA = a.data.date ? new Date(a.data.date).getTime() : 0;
    const dateB = b.data.date ? new Date(b.data.date).getTime() : 0;
    return dateB - dateA;
});
const overviewItems = feedEntries.map(entry => ({
    id: entry.slug,
    title: entry.data.title || 'Untitled',
    imageUrl: entry.data.thumbnail || '/placeholder.jpg',
    altText: entry.data.title || 'Feed item thumbnail'
}));
---
<BaseLayout title="Å»akowiecki | fixer supreme XD">

    {/* Slot for Identity Header */}
    <div slot="identity-header">
        <IdentityHeader />
    </div>

    {/* Slot for Main Header (Nav/Contact) */}
    <div slot="main-header">
        <Header />
    </div>

    {/* Slot for Info Content Area */}
    <div slot="info-content" id="info-content-wrapper"> {/* Use wrapper ID if needed */}
        <StaticInfo />
    </div>

    {/* Slot for Feed Content Area */}
    <section slot="feed-content" id="feed-content-wrapper"> {/* Use wrapper ID if needed */}
        {feedEntries.map(entry => (
            <FeedEntry entry={entry} />
        ))}
    </section>

    {/* Slot for Overview Content Area */}
    <div slot="overview-content" id="overview-content-wrapper"> {/* Use wrapper ID if needed */}
        <div id="overview-grid-wrapper">
            <OverviewGrid items={overviewItems} />
        </div>
    </div>

</BaseLayout>

{/* --- Script for View Switching --- */}
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Selectors (Keep as before)
        const appContainer = document.getElementById('app-container');
        const identityHeaderArea = document.getElementById('identity-header-area');
        const mainHeaderArea = document.getElementById('main-header-area');
        const dividerArea = document.getElementById('divider-area');
        const infoContentArea = document.getElementById('info-content-area');
        const feedContentArea = document.getElementById('feed-content-area');
        const overviewContentArea = document.getElementById('overview-content-area');
        const infoBtn = document.getElementById('info-view-btn') as HTMLButtonElement | null;
        const feedBtn = document.getElementById('feed-view-btn') as HTMLButtonElement | null;
        const overviewBtn = document.getElementById('overview-view-btn') as HTMLButtonElement | null;
        const overviewGridWrapper = document.getElementById('overview-grid-wrapper');

        // Null Check (Keep as before)
        if (!appContainer || !identityHeaderArea || !mainHeaderArea || !dividerArea || !infoContentArea || !feedContentArea || !overviewContentArea || !infoBtn || !feedBtn || !overviewBtn || !overviewGridWrapper) {
            console.error("Essential elements missing for view switching script."); return;
        }

        const MOBILE_BREAKPOINT = 768;
        let wasMobile = window.innerWidth <= MOBILE_BREAKPOINT;

        function isMobile(): boolean { return window.innerWidth <= MOBILE_BREAKPOINT; }
        function isDesktop(): boolean { return !isMobile(); }

        function setActiveButton(activeBtn: HTMLButtonElement | null): void {
            [infoBtn, feedBtn, overviewBtn].forEach(btn => {
                if (btn) { btn.classList.toggle('active', btn === activeBtn); }
            });
        }

        function setMainView(view: 'feed' | 'overview' | 'info'): void {
            // (Keep the setMainView function exactly as it was in the previous step)
            console.log("%cSetting view:", "color: blue; font-weight: bold;", view, "isMobile:", isMobile());
            if (!appContainer) return;
            appContainer.classList.remove('view-feed', 'view-overview', 'view-info', 'is-mobile', 'is-desktop');
            const elementsToReset = [
                identityHeaderArea, mainHeaderArea, dividerArea,
                infoContentArea, feedContentArea, overviewContentArea
            ];
            elementsToReset.forEach(el => { if (el) { el.style.display = ''; } });
            if (isMobile()) { appContainer.classList.add('is-mobile'); } else { appContainer.classList.add('is-desktop'); }
            if (view === 'overview') {
                console.log("  Applying OVERVIEW class...");
                appContainer.classList.add('view-overview');
                setActiveButton(overviewBtn);
            } else if (view === 'info' && isMobile()) {
                console.log("  Applying INFO class (Mobile)...");
                appContainer.classList.add('view-info');
                setActiveButton(infoBtn);
            } else {
                console.log("  Applying FEED class (Default/Desktop)...");
                appContainer.classList.add('view-feed');
                setActiveButton(feedBtn);
            }
            console.log("Current appContainer classes:", appContainer.className);
        }

        // Event Listeners (Keep view switching listeners as before)
        overviewBtn.addEventListener('click', () => setMainView('overview'));
        feedBtn.addEventListener('click', () => setMainView('feed'));
        infoBtn.addEventListener('click', () => { if (isMobile()) { setMainView('info'); } else { setMainView('feed'); } });


        // --- UPDATED Grid Click Logic ---
        if (overviewGridWrapper) {
            overviewGridWrapper.addEventListener('click', (event: MouseEvent) => {
                console.log("Overview grid clicked.");
                if (event.target instanceof Element) {
                    const gridItemLink = event.target.closest<HTMLAnchorElement>('.grid-item');
                    // Ensure feedContentArea exists before proceeding
                    if (gridItemLink && gridItemLink.dataset.targetId && feedContentArea) {
                        event.preventDefault();
                        const targetId = gridItemLink.dataset.targetId;
                        console.log("Target ID from grid item:", targetId);

                        // 1. Switch view first
                        setMainView('feed');

                        // 2. Wait for rendering and scroll
                        requestAnimationFrame(() => {
                            setTimeout(() => {
                                // --- Use document.getElementById() ---
                                const targetFeedElement = document.getElementById(targetId);

                                // --- Check if found AND is within feedContentArea ---
                                if (targetFeedElement && feedContentArea.contains(targetFeedElement)) {
                                     // Optional: Check class for extra safety, though ID should be unique
                                     if (targetFeedElement.classList.contains('feed-entry')) {
                                        console.log("Target feed element found by ID:", targetFeedElement); // DEBUG
                                        targetFeedElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                                        console.log("scrollIntoView called."); // DEBUG
                                     } else {
                                         console.warn(`Element with ID '${targetId}' found, but lacks 'feed-entry' class.`);
                                         // Still try to scroll? Decide based on strictness needed.
                                         // targetFeedElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                                     }
                                } else if (targetFeedElement) {
                                    // Found element by ID, but it's not in the feed area (shouldn't happen with Astro slugs)
                                    console.error(`Element ID '${targetId}' found, but not within #feed-content-area.`);
                                } else {
                                    // Element not found anywhere
                                    console.error(`Target element with ID '${targetId}' not found in the document.`);
                                }
                            }, 100); // Keep delay for now, seems reasonable
                        });
                    } else if (gridItemLink) {
                        console.error("Grid item link missing 'data-target-id'.");
                    } else if (!feedContentArea) {
                         console.error("Feed content area not found for scrolling.");
                    }
                }
            });
        }

        // Initial View & Resize Handling (Keep as before)
        console.log("Initializing view...");
        setMainView('feed');
        const resizeObserver = new ResizeObserver(() => {
            const isNowMobile = isMobile();
            if (isNowMobile !== wasMobile) {
                console.log(`Resize detected: Switched state. Resetting view to feed.`);
                setMainView('feed');
                wasMobile = isNowMobile;
            }
        });
        resizeObserver.observe(document.body);

        // Gallery Logic (Keep as is)
        // ...
    });
</script>