---
// src/pages/index.astro
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import StaticInfo from '../components/StaticInfo.astro';
import FeedEntry from '../components/FeedEntry.astro';
import OverviewGrid from '../components/OverviewGrid.astro';
import type { CollectionEntry } from 'astro:content';

const feedEntriesFetched: CollectionEntry<'feed'>[] = await getCollection('feed');

// --- CHANGE: Uncommented the sorting line below ---
// Sort entries by date (newest first). Added safety checks for missing dates.
const feedEntries = feedEntriesFetched.sort((a, b) => {
    const dateA = a.data.date ? new Date(a.data.date).getTime() : 0;
    const dateB = b.data.date ? new Date(b.data.date).getTime() : 0;
    return dateB - dateA; // Sorts descending (newest first)
});
// --- END CHANGE ---

const overviewItems = feedEntries.map(entry => ({
    id: entry.slug,
    title: entry.data.title || 'Untitled',
    imageUrl: entry.data.thumbnail || '/placeholder.jpg', // Ensure a fallback image path if needed
    altText: entry.data.title || 'Feed item thumbnail'
}));
---
<BaseLayout title="Å»akowiecki | fixer supreme XD">
    <Header />

    <main id="main-content" class="feed-active">
        <div class="vertical-divider"></div>

        <aside id="info-content" class="left-column">
            <StaticInfo />
        </aside>

        <section id="feed-content" class="right-column">
            {feedEntries.map(entry => (
                <FeedEntry entry={entry} />
            ))}
        </section>

        <div id="overview-content">
            <OverviewGrid items={overviewItems} />
        </div>
    </main>
</BaseLayout>

{/* --- Keep existing <style> and <script> blocks unchanged --- */}
<style>
    /* --- Base Variables --- */
    :root {
        --content-padding-x: 1.25rem;
        --column-gap: 1.25rem;
        --header-height-estimate-desktop: 3.5rem;
        --header-height-estimate-mobile-px: 92px;
        --mobile-content-top-margin: 6rem; /* Default mobile margin */
        --scrollbar-track-color: #222;
        --scrollbar-thumb-color: #555;
        --scrollbar-width: 8px;
        --desktop-main-padding-top: 2rem;
        --desktop-main-padding-bottom: 1.25rem;
        --content-padding-x-mobile: var(--spacing-md); /* Ensure mobile padding is defined */
    }

    /* --- DESKTOP / DEFAULT STYLES --- */
    main {
        padding: var(--desktop-main-padding-top) var(--content-padding-x) var(--desktop-main-padding-bottom);
        position: relative; box-sizing: border-box;
        height: calc(100vh - var(--header-height-estimate-desktop) - var(--desktop-main-padding-top) - var(--desktop-main-padding-bottom));
        overflow: hidden; display: flex; gap: var(--column-gap);
    }
    #info-content { display: block; width: 50%; overflow: hidden; padding-right: calc(var(--column-gap) / 2); }
    #feed-content { display: block; width: 50%; overflow-y: auto; padding-left: calc(var(--column-gap) / 2); scroll-behavior: smooth; }
    #overview-content { display: none; width: 100%; height: 100%; overflow-y: auto; }
    main.overview-active { display: block; }
    main.overview-active #info-content, main.overview-active #feed-content { display: none; }
    main.overview-active #overview-content { display: block; }
    main.overview-active .vertical-divider { display: none; }
    .vertical-divider {
        position: absolute; top: var(--desktop-main-padding-top); bottom: var(--desktop-main-padding-bottom);
        left: 50%; transform: translateX(-50%); width: 0.125rem; background-color: #ccc; z-index: 999;
    }
    #feed-content, #overview-content {
        scrollbar-width: thin; scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);
    }
    #feed-content::-webkit-scrollbar, #overview-content::-webkit-scrollbar { width: var(--scrollbar-width); }
    #feed-content::-webkit-scrollbar-track, #overview-content::-webkit-scrollbar-track { background: var(--scrollbar-track-color); }
    #feed-content::-webkit-scrollbar-thumb, #overview-content::-webkit-scrollbar-thumb { background-color: var(--scrollbar-thumb-color); border-radius: calc(var(--scrollbar-width) / 2); border: 2px solid var(--scrollbar-track-color); }

    /* ================================== */
    /* --- MOBILE - PORTRAIT ONLY --- */
    /* ================================== */
    @media (max-width: 768px) and (orientation: portrait) {
        main {
            /* --- Apply stacking for PORTRAIT mobile --- */
            display: block; height: auto; overflow-y: visible;
            padding: 0 var(--content-padding-x-mobile);
            position: relative; transform: none;
        }
        #info-content, #feed-content, #overview-content {
            width: 100%; height: auto; overflow-y: visible; padding: 0;
            margin-top: var(--mobile-content-top-margin); /* Keep large margin for stacked */
            margin-bottom: 1.5rem;
        }
        #info-content:last-child, #feed-content:last-child, #overview-content:last-child {
            margin-bottom: 0;
        }
        /* Visibility rules remain same for portrait mobile */
        main.feed-active #info-content { display: none; }
        main.feed-active #feed-content { display: block; }
        main.feed-active #overview-content { display: none; }
        main.overview-active #info-content, main.overview-active #feed-content { display: none; }
        main.overview-active #overview-content { display: block; }
        main.info-visible #info-content { display: block; }
        main.info-visible #feed-content { display: none; }
        main.info-visible #overview-content { display: none; }
        .vertical-divider { display: none; } /* Hide divider in portrait */
    }

    /* ================================== */
    /* --- MOBILE - LANDSCAPE --- */
    /* --- Keep desktop-like layout but adjust padding/margins --- */
    /* ================================== */
    @media (max-width: 768px) and (orientation: landscape) {
         /* --- NEW: Define reduced top padding for narrow landscape --- */
         :root { /* Define within this scope */
             --narrow-landscape-main-padding-top: var(--spacing-sm); /* e.g., 0.75rem */
         }

         main {
             display: flex;
             /* --- Use REDUCED top padding --- */
             padding-top: var(--narrow-landscape-main-padding-top);
             /* Keep original horizontal/bottom padding */
             padding-left: var(--content-padding-x);
             padding-right: var(--content-padding-x);
             padding-bottom: var(--desktop-main-padding-bottom);
             /* --- Adjust height calculation for REDUCED top padding --- */
             height: calc(100vh - var(--header-height-estimate-desktop) - var(--narrow-landscape-main-padding-top) - var(--desktop-main-padding-bottom));
             gap: var(--column-gap);
         }
          /* Keep desktop widths/display */
         #info-content { display: block; width: 50%; overflow: hidden; padding-right: calc(var(--column-gap) / 2); margin: 0; }
         #feed-content { display: block; width: 50%; overflow-y: auto; padding-left: calc(var(--column-gap) / 2); scroll-behavior: smooth; margin: 0; }
         #overview-content { display: none; width: 100%; height: 100%; overflow-y: auto; margin: 0; }

          /* Keep desktop visibility rules */
         main.overview-active { display: block; }
         main.overview-active #info-content, main.overview-active #feed-content { display: none; }
         main.overview-active #overview-content { display: block; }
         main.overview-active .vertical-divider { display: none; }

         .vertical-divider {
             display: block;
              /* --- Adjust divider position for REDUCED top padding --- */
             top: var(--narrow-landscape-main-padding-top);
             bottom: var(--desktop-main-padding-bottom);
         }
         main.overview-active .vertical-divider { display: none; }

         main.feed-active #info-content { display: block; }
         main.feed-active #feed-content { display: block; }
         main.feed-active #overview-content { display: none; }
     }

</style>

<script>
    // --- KEEP YOUR EXISTING SCRIPT BLOCK UNCHANGED ---
    document.addEventListener('DOMContentLoaded', () => {
        const mainElement = document.getElementById('main-content');
        const infoBtn = document.getElementById('info-view-btn') as HTMLButtonElement | null;
        const feedBtn = document.getElementById('feed-view-btn') as HTMLButtonElement | null;
        const overviewBtn = document.getElementById('overview-view-btn') as HTMLButtonElement | null;
        const overviewGridWrapper = document.getElementById('overview-grid-wrapper');
        const infoContent = document.getElementById('info-content');
        const feedContent = document.getElementById('feed-content');

        if (!mainElement || !infoBtn || !feedBtn || !overviewBtn || !overviewGridWrapper || !infoContent || !feedContent) {
            console.error("Essential elements missing, script cannot run. Check IDs in index.astro HTML.");
            return;
        }

        const MOBILE_BREAKPOINT = 768;
        let currentMobileInfoVisible = false;

        function isMobileView(): boolean {
            return window.innerWidth <= MOBILE_BREAKPOINT;
        }

        function setActiveButton(activeBtn: HTMLButtonElement | null): void {
            [infoBtn, feedBtn, overviewBtn].forEach(btn => {
                if (btn) {
                    btn.classList.toggle('active', btn === activeBtn);
                }
            });
        }

        function setMainView(view: 'feed' | 'overview'): void {
            mainElement!.classList.remove('feed-active', 'overview-active', 'info-visible');

            if (view === 'overview') {
                mainElement!.classList.add('overview-active');
                setActiveButton(overviewBtn);
                currentMobileInfoVisible = false;
            } else {
                mainElement!.classList.add('feed-active');
                if (isMobileView() && currentMobileInfoVisible) {
                    mainElement!.classList.add('info-visible');
                    setActiveButton(infoBtn);
                } else {
                    if(feedBtn) setActiveButton(feedBtn);
                }
            }
        }

        function toggleMobileInfoFeed(showInfo: boolean): void {
            if (!isMobileView()) return;
            currentMobileInfoVisible = showInfo;
            mainElement!.classList.toggle('info-visible', showInfo);
            setActiveButton(showInfo ? infoBtn : feedBtn);

            if (mainElement!.classList.contains('overview-active')) {
                setMainView('feed');
            }
        }

        if (overviewBtn) {
            overviewBtn.addEventListener('click', () => { setMainView('overview'); });
        }
        if (feedBtn) {
            feedBtn.addEventListener('click', () => {
                setMainView('feed');
                if (isMobileView()) { toggleMobileInfoFeed(false); }
            });
        }
        if (infoBtn) {
            infoBtn.addEventListener('click', () => { toggleMobileInfoFeed(true); });
        }

        if (overviewGridWrapper) {
            overviewGridWrapper.addEventListener('click', (event: MouseEvent) => {
                if (event.target instanceof Element) {
                    const gridItemLink = event.target.closest<HTMLAnchorElement>('.grid-item');
                     if (gridItemLink && gridItemLink.dataset.targetId) {
                         event.preventDefault();
                         const targetId = gridItemLink.dataset.targetId;
                         const targetFeedElement = document.getElementById(targetId);

                         if (targetFeedElement) {
                             setMainView('feed');
                             if (isMobileView()) { toggleMobileInfoFeed(false); }
                             requestAnimationFrame(() => {
                                 targetFeedElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                             });
                         } else { console.error(`Target element #${targetId} not found. Check FeedEntry ID.`); }
                     } else if (gridItemLink) {
                          console.error("Grid item link clicked, but missing 'data-target-id'. Check GridItem.astro.");
                     }
                }
            });
        } else {
             console.error("Overview grid wrapper not found, click listener not attached.");
        }

        setMainView('feed');
        if (isMobileView()) { toggleMobileInfoFeed(false); }
        else { if(feedBtn) setActiveButton(feedBtn); }
    });
</script>