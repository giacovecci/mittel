---
// src/pages/index.astro
import { getEntry } from 'astro:content';
import LandingLayout from '../layouts/LandingLayout.astro';

const landingPageEntry = await getEntry('general_content', 'landing_page');

const defaultSiteName = "Piotr Żakowiecki";
const defaultTagline = "field producer · researcher · videojournalist";
const defaultLocation = "Berlin/Warsaw";
const defaultBgImage = "/uploads/placeholder-landing-bg.jpg";
const defaultBgImageAlt = "Abstract background image";

const siteName = landingPageEntry?.data.landingPageSiteName || defaultSiteName;
const tagline = landingPageEntry?.data.landingPageTagline || defaultTagline;
const location = landingPageEntry?.data.landingPageLocation || defaultLocation;
const landingBgImage = landingPageEntry?.data.landingPageBackgroundImage || defaultBgImage;
const landingBgImageAlt = landingPageEntry?.data.landingPageBackgroundImageAlt || defaultBgImageAlt;
---
<LandingLayout title={`${siteName} | Welcome`} backgroundImageUrl={landingBgImage} backgroundAltText={landingBgImageAlt}>
  
  <button type="button" class="theme-toggle-button-fixed" id="theme-toggle-btn-fixed" aria-label="Toggle theme">
    {/* Text will be injected here by JS */}
  </button>

  <main class="landing-main-content-box">
    <header class="landing-identity-content">
      <h1 class="site-name">{siteName}</h1>
      <p class="tagline">{tagline}</p>
      <p class="location">{location}</p>
    </header>

    <nav class="landing-navigation-buttons">
      <a href="/portfolio" class="landing-button portfolio-button">
        View Portfolio
      </a>
      <a href="/portfolio#show-contact" class="landing-button work-button">
        Work With Me
      </a>
    </nav>
  </main>

  <style>
    /* ... (existing .theme-toggle-button-fixed styles) ... */
    .theme-toggle-button-fixed {
      position: fixed;
      top: var(--spacing-md);
      right: var(--spacing-md);
      z-index: 1000; 
      background-color: rgba(var(--color-text-unified-rgb), 0.1); 
      border: 1px solid var(--color-border-subtle);
      color: var(--color-text-unified); 
      padding: var(--spacing-xs) var(--spacing-sm); 
      cursor: pointer;
      border-radius: var(--border-radius-sm); 
      font-size: 0.8rem; 
      font-weight: var(--font-weight-medium);
      line-height: 1.2;
      min-width: 80px; 
      text-align: center;
      transition: color 0.3s ease, background-color 0.3s ease, border-color 0.3s ease;
    }
    .theme-toggle-button-fixed:hover {
      background-color: var(--color-surface-light-hover);
      border-color: var(--color-accent-hover-custom);
    }

    .landing-main-content-box { 
      /* Default (Desktop) styles */
      background-color: rgba(0, 0, 0, 0.65); 
      padding: var(--spacing-xl) var(--spacing-lg);
      border-radius: var(--border-radius-sm);
      max-width: 650px; 
      width: 90%; 
      box-shadow: 0 5px 20px rgba(0,0,0,0.4);
      transition: background-color 0.3s ease, height 0.3s ease, padding 0.3s ease; 
      position: relative; 
      z-index: 10;
      display: flex; 
      flex-direction: column; 
      align-items: center;
      justify-content: center; 
      min-width: 280px; 
    }
    html.light-mode .landing-main-content-box { 
        background-color: rgba(255, 255, 255, 0.75); 
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    }

    /* ... (existing .landing-identity-content and children styles) ... */
    .landing-identity-content { 
      margin-bottom: var(--spacing-lg); 
      width: 100%; 
    }
    .landing-identity-content .site-name {
      font-size: clamp(2rem, 1.5rem + 2vw, 3rem); color: var(--color-text-unified); 
      margin-bottom: var(--spacing-xs); font-weight: var(--font-weight-bold);
      line-height: 1.2; text-align: center;
    }
    .landing-identity-content .tagline {
      font-size: clamp(1rem, 0.8rem + 0.8vw, 1.3rem); color: var(--color-accent); 
      margin-bottom: var(--spacing-xxs); text-align: center; 
      hyphens: none; line-height: 1.3;
    }
    .landing-identity-content .location {
      font-size: clamp(0.9rem, 0.7rem + 0.6vw, 1.1rem); color: var(--color-text-secondary); 
      margin-bottom: 0; text-align: center; 
      hyphens: none; line-height: 1.3;
    }

    /* ... (existing .landing-navigation-buttons and .landing-button styles) ... */
    .landing-navigation-buttons {
      display: flex; flex-direction: column; 
      align-items: center; gap: var(--spacing-md);
      width: 100%; 
    }
    .landing-button {
      display: inline-block; padding: var(--spacing-sm) var(--spacing-lg);
      border: 1px solid var(--color-border-subtle); border-radius: var(--border-radius-sm);
      color: var(--color-text-unified); background-color: rgba(var(--color-text-unified-rgb), 0.1); 
      text-decoration: none; font-weight: var(--font-weight-medium);
      transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;
      width: 100%; max-width: 320px; 
      text-align: center; cursor: pointer;
      font-size: 1rem; line-height: 1.5; box-sizing: border-box;
    }
    .landing-button:hover {
      background-color: var(--color-surface-light-hover);
      border-color: var(--color-accent-hover-custom);
      color: var(--color-accent-hover-custom);
    }

    @media (min-width: 769px) { 
      .landing-navigation-buttons {
        flex-direction: row; justify-content: center; 
        gap: var(--spacing-lg);
      }
      .landing-button { 
        width: auto; min-width: 200px; 
      }
    }

    @media (max-width: 768px) {
        .landing-main-content-box {
            width: 100%; 
            max-width: none; 
            min-width: 0; 
            
            height: auto; /* Height determined by content */
            /* No fixed position, no margin-top: auto */
            /* flex-shrink: 0; /* Not strictly needed if parent is not constraining height */

            /* Restore semi-transparent background */
            background-color: rgba(0, 0, 0, 0.65); 
            /* Light mode semi-transparent background */
            /* html.light-mode will handle its specific semi-transparent color */
            
            /* Internal content centering is inherited */
            
            padding: var(--spacing-lg) var(--spacing-md); /* Restore original mobile padding */
            
            border-radius: var(--border-radius-sm) var(--border-radius-sm) 0 0; 
            margin-bottom: 0; /* Ensure it's flush if it reaches bottom of viewport */
            box-shadow: 0 -3px 10px rgba(0,0,0,0.2); 
            /* overflow-y: auto; /* Only if content *within this box* might exceed its own natural height and needs scroll */
        }
        html.light-mode .landing-main-content-box {
            /* This rule is already defined above for desktop, ensure it applies correctly for mobile too */
            background-color: rgba(255, 255, 255, 0.75); 
            box-shadow: 0 -3px 10px rgba(0,0,0,0.07);
        }

        .landing-identity-content {
            margin-bottom: var(--spacing-xs); 
        }
        .landing-identity-content .site-name { font-size: clamp(1.5rem, 1.2rem + 1.5vw, 2.5rem); }
        .landing-identity-content .tagline { font-size: clamp(0.9rem, 0.7rem + 0.7vw, 1.1rem); }
        .landing-identity-content .location { font-size: clamp(0.8rem, 0.6rem + 0.5vw, 1rem); }


        .landing-navigation-buttons {
            flex-direction: row; 
            justify-content: space-between; 
            gap: var(--spacing-sm); 
        }
        .landing-button {
            width: calc(50% - (var(--spacing-sm) / 2)); 
            max-width: none; 
            padding: var(--spacing-xs) var(--spacing-xs); 
            font-size: 0.8rem; 
        }
    }

    @media (max-width: 480px) { 
        .landing-main-content-box {
            padding: var(--spacing-md) var(--spacing-sm); /* Adjust padding for very small screens */
        }
        .landing-button {
            font-size: 0.9rem; 
            line-height: 1.2;
        }
        .landing-identity-content .site-name { font-size: clamp(1.3rem, 1rem + 1.2vw, 2rem); }
    }
  </style>

  <script> 
    const themeToggleButtonFixed = document.getElementById('theme-toggle-btn-fixed');

    function updateButtonText(theme: string) { 
      if (themeToggleButtonFixed) {
        themeToggleButtonFixed.textContent = theme === 'light' ? 'Dark Mode' : 'Light Mode'; 
        themeToggleButtonFixed.setAttribute('aria-label', theme === 'light' ? 'Switch to dark mode' : 'Switch to light mode');
      }
    }

    if (typeof window.currentTheme !== 'undefined' && themeToggleButtonFixed) {
      updateButtonText(window.currentTheme);
    } else if (themeToggleButtonFixed) { 
      const initialTheme = localStorage.getItem('theme-preference') || (window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark');
      updateButtonText(initialTheme);
    }
    
    themeToggleButtonFixed?.addEventListener('click', () => {
      if (typeof window.toggleTheme === 'function') {
        window.toggleTheme(); 
      }
    });

    document.addEventListener('themechanged', (e) => {
      const event = e as CustomEvent<{ theme: string }>; 
      
      if (event.detail && typeof event.detail.theme !== 'undefined') {
        updateButtonText(event.detail.theme);
      }
    });
  </script>
</LandingLayout>