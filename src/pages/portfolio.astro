---
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import IdentityHeader from '../components/IdentityHeader.astro';
import Header from '../components/Header.astro';
import StaticInfo from '../components/StaticInfo.astro';
import OverviewGrid from '../components/OverviewGrid.astro';
import HighlightsColumn from '../components/HighlightsColumn.astro';
import AboutSection from '../components/AboutSection.astro';
import AllFeedColumn from '../components/AllFeedColumn.astro';
import ContactSection from '../components/ContactSection.astro';
import type { CollectionEntry } from 'astro:content';

const feedEntriesFetched: CollectionEntry<'feed'>[] = await getCollection('feed');
const feedEntries = feedEntriesFetched.sort((a, b) => {
    const dateA = a.data.date ? new Date(a.data.date).getTime() : 0;
    const dateB = b.data.date ? new Date(b.data.date).getTime() : 0;
    return dateB - dateA;
});
const overviewItems = feedEntries.map(entry => ({
    id: entry.slug,
    title: entry.data.title || 'Untitled',
    imageUrl: entry.data.thumbnail || '/placeholder.jpg', 
    altText: entry.data.title || 'Feed item thumbnail'
}));
---
<BaseLayout title="Å»akowiecki | Portfolio">
    <div slot="identity-header"><IdentityHeader /></div>
    <div slot="main-header"><Header /></div>
    <div slot="info-content" id="info-content-wrapper"><StaticInfo /></div>
    <section slot="feed-content" id="feed-content-wrapper"></section>
    <div slot="overview-content" id="overview-content-wrapper">
        <div id="overview-grid-container"><OverviewGrid items={overviewItems} /></div>
    </div>
    <div slot="dynamic-content" id="dynamic-content-wrapper">
        <div class="mobile-section-separator" id="mobile-highlights-separator">
            <h3 class="mobile-section-separator-title">Recent Highlights</h3>
        </div>
        <div id="highlights-content-wrapper-actual"> <HighlightsColumn /> </div>
        <div id="about-content-wrapper-actual"> <AboutSection /> </div>
    </div>
    <div slot="all-feed-content" id="all-feed-content-wrapper">
        <AllFeedColumn />
    </div>
    <div slot="contact-content" id="contact-content-slot-wrapper">
        <ContactSection />
    </div>
</BaseLayout>

<style>
    #highlights-content-wrapper-actual,
    #about-content-wrapper-actual {
        display: none; 
    }
    #overview-grid-container :global(.grid-item) {
        cursor: pointer;
    }

    .mobile-section-separator {
        display: none; 
        margin-top: calc(var(--spacing-md) - var(--spacing-lg));
        border-top: 1px solid var(--color-border-subtle); 
        padding-top: var(--spacing-md); 
        margin-bottom: var(--spacing-md); 
    }

    .mobile-section-separator-title {
        font-size: 0.85em; 
        font-weight: var(--font-weight-medium);
        color: var(--color-text-secondary);
        text-align: left;
        margin-bottom: 0; 
        text-transform: uppercase;
        letter-spacing: 0.075em;
        line-height: 1.3; 
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const appContainer = document.getElementById('app-container');
        const infoContentArea = document.getElementById('info-content-area'); 
        const dynamicContentArea = document.getElementById('dynamic-content-area'); 
        const highlightsContentWrapper = document.getElementById('highlights-content-wrapper-actual');
        const aboutContentWrapper = document.getElementById('about-content-wrapper-actual');
        const allFeedContentArea = document.getElementById('all-feed-content-area');
        const overviewContentArea = document.getElementById('overview-content-area');
        const contactContentArea = document.getElementById('contact-content-area'); 
        const mobileHighlightsSeparator = document.getElementById('mobile-highlights-separator');

        const desktopHighlightsBtn = document.getElementById('highlights-view-btn-desktop');
        const desktopAllFeedBtn = document.getElementById('all-feed-view-btn-desktop');
        const desktopOverviewBtn = document.getElementById('overview-view-btn-desktop');
        const desktopAboutBtn = document.getElementById('about-view-btn-desktop');
        const desktopContactBtn = document.getElementById('contact-link-desktop');

        const hamburgerMenuBtn = document.getElementById('hamburger-menu-btn');
        const mobileNavPanel = document.getElementById('mobile-nav-panel');
        const mobileNavLinks = mobileNavPanel ? mobileNavPanel.querySelectorAll('.mobile-nav-link') : null;

        const overviewGridContainer = document.getElementById('overview-grid-container');
        const highlightsListWrapper = document.getElementById('highlights-content-wrapper-actual');
        const allFeedListWrapper = document.getElementById('all-feed-content-wrapper');
        
        const seeMoreProjectsBtnMobile = document.getElementById('see-more-projects-btn-mobile');

        if (!appContainer || !highlightsContentWrapper || !aboutContentWrapper || !contactContentArea ||
            !desktopHighlightsBtn || !desktopAllFeedBtn || !desktopOverviewBtn || !desktopAboutBtn || !desktopContactBtn ||
            !hamburgerMenuBtn || !mobileNavPanel || 
            !overviewGridContainer || !allFeedListWrapper || !mobileHighlightsSeparator ||
            !seeMoreProjectsBtnMobile 
            ) {
            console.error("Essential elements missing in portfolio.astro. Check IDs. Script will not run.");
            return; 
        }
        if (!mobileNavLinks) {
             console.warn("Mobile navigation links (mobileNavLinks) are null or undefined, possibly because mobileNavPanel was not found or has no matching children. Some mobile navigation functionality might be affected.");
        }

        const allDesktopButtonsTyped = [
            desktopHighlightsBtn, desktopAllFeedBtn, desktopOverviewBtn, desktopAboutBtn, desktopContactBtn
        ].filter(Boolean) as HTMLElement[]; 

        const MOBILE_BREAKPOINT = 768;
        let currentView = 'home'; 
        let wasMobile = window.innerWidth <= MOBILE_BREAKPOINT;

        function isMobile() { return window.innerWidth <= MOBILE_BREAKPOINT; }

        function updateActiveStates() {
            allDesktopButtonsTyped.forEach(btn => btn.classList.remove('active'));
            
            if (!isMobile()) {
                if (currentView === 'home') desktopHighlightsBtn!.classList.add('active');
                else if (currentView === 'all-feed') desktopAllFeedBtn!.classList.add('active');
                else if (currentView === 'overview') desktopOverviewBtn!.classList.add('active');
                else if (currentView === 'about') desktopAboutBtn!.classList.add('active');
                else if (currentView === 'contact') desktopContactBtn!.classList.add('active');
            } 

            mobileNavLinks?.forEach(link => { 
                const htmlLink = link as HTMLButtonElement; 
                htmlLink.classList.remove('active-menu-item');
                const linkTarget = htmlLink.dataset.viewtarget;
                let isActive = linkTarget === currentView;
                
                if ((currentView === 'home' || currentView === 'info') && linkTarget === 'info') {
                    isActive = true;
                }
                if (currentView === 'contact' && linkTarget === 'contact') {
                    isActive = true;
                }

                if (isActive) {
                    htmlLink.classList.add('active-menu-item');
                }
            });
        }
        
        function setMainView(view: string) {
            currentView = view;
            
            appContainer!.classList.remove('is-desktop', 'is-mobile', 'view-home', 'view-info', 'view-all-feed', 'view-overview', 'view-about', 'view-contact');

            highlightsContentWrapper!.style.display = 'none';
            aboutContentWrapper!.style.display = 'none';
            mobileHighlightsSeparator!.style.display = 'none';

            if (isMobile()) {
                appContainer!.classList.add('is-mobile');
                if (view === 'home' || view === 'info') { 
                    appContainer!.classList.add('view-info');
                    mobileHighlightsSeparator!.style.display = 'block';
                    highlightsContentWrapper!.style.display = 'block'; 
                } else if (view === 'about') {
                    appContainer!.classList.add('view-about');
                    aboutContentWrapper!.style.display = 'block'; 
                } else if (view === 'overview') {
                    appContainer!.classList.add('view-overview');
                } else if (view === 'all-feed') {
                    appContainer!.classList.add('view-all-feed');
                } else if (view === 'contact') {
                    appContainer!.classList.add('view-contact');
                }
            } else { 
                appContainer!.classList.add('is-desktop');
                if (view === 'home') {
                    appContainer!.classList.add('view-home');
                    highlightsContentWrapper!.style.display = 'block';
                } else if (view === 'about') {
                    appContainer!.classList.add('view-about');
                    aboutContentWrapper!.style.display = 'block';
                } else if (view === 'overview') {
                    appContainer!.classList.add('view-overview');
                } else if (view === 'all-feed') {
                    appContainer!.classList.add('view-all-feed');
                } else if (view === 'contact') {
                    appContainer!.classList.add('view-contact');
                }
            }
            
            updateActiveStates();

            const performScrollIfNeeded = () => {
                if (window.location.hash) { 
                    if (view !== 'all-feed' && view !== 'contact') {
                        window.scrollTo(0, 0);
                    }
                } else {
                    window.scrollTo(0, 0);
                }
            };
            
            // MODIFICATION: Nested setTimeout within requestAnimationFrame for scroll
            requestAnimationFrame(() => {
                setTimeout(performScrollIfNeeded, 0);
            });
        }

        function toggleMobileMenu(forceClose = false) {
            const isOpen = mobileNavPanel!.classList.contains('is-open');
            if (forceClose || isOpen) {
                mobileNavPanel!.classList.remove('is-open');
                hamburgerMenuBtn!.setAttribute('aria-expanded', 'false');
                hamburgerMenuBtn!.classList.remove('is-active');
                document.body.classList.remove('mobile-menu-open');
            } else {
                mobileNavPanel!.classList.add('is-open');
                hamburgerMenuBtn!.setAttribute('aria-expanded', 'true');
                hamburgerMenuBtn!.classList.add('is-active');
                document.body.classList.add('mobile-menu-open');
            }
        }

        hamburgerMenuBtn!.addEventListener('click', () => toggleMobileMenu());

        mobileNavLinks?.forEach(link => { 
            link.addEventListener('click', () => {
                const targetView = (link as HTMLButtonElement).dataset.viewtarget;
                if (targetView) {
                    setMainView(targetView);
                    toggleMobileMenu(true); 
                }
            });
        });

        desktopHighlightsBtn!.addEventListener('click', () => setMainView('home'));
        desktopAllFeedBtn!.addEventListener('click', () => setMainView('all-feed'));
        desktopOverviewBtn!.addEventListener('click', () => setMainView('overview'));
        desktopAboutBtn!.addEventListener('click', () => setMainView('about'));
        desktopContactBtn!.addEventListener('click', () => setMainView('contact'));
        
        let navigateToFeedItem = (targetId: string) => {
            if (window.location.hash === '#show-contact') {
                history.pushState("", document.title, window.location.pathname + window.location.search);
            }
            setMainView('all-feed'); 
            
            requestAnimationFrame(() => { 
                setTimeout(() => { 
                    const targetElement = document.getElementById(targetId);
                    if (targetElement && allFeedContentArea!.contains(targetElement)) { 
                        targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    } else { 
                        console.error(`Target feed element '${targetId}' not found or not in scroll container.`); 
                    }
                }, 100); 
            });
        };

        overviewGridContainer!.addEventListener('click', (event) => {
            if (!(event.target instanceof Element)) return; 
            const link = event.target.closest('a.grid-item');
            if (link && (link instanceof HTMLAnchorElement) && link.dataset.targetId) { 
                event.preventDefault();
                navigateToFeedItem(link.dataset.targetId);
            }
        });

        highlightsListWrapper!.addEventListener('click', (event) => {
            if (!(event.target instanceof Element)) return; 
            const link = event.target.closest('a.highlight-link-wrapper.is-clickable');
            if (link && (link instanceof HTMLAnchorElement) && link.dataset.targetId) { 
                event.preventDefault();
                navigateToFeedItem(link.dataset.targetId);
            }
        });
        
        if (seeMoreProjectsBtnMobile) {
            seeMoreProjectsBtnMobile.addEventListener('click', () => {
                setMainView('overview'); 
                if (mobileNavPanel && mobileNavPanel.classList.contains('is-open')) {
                    toggleMobileMenu(true); 
                }
            });
        }

        function handleInitialLoad() {
            const hash = window.location.hash;
            let initialTargetView = isMobile() ? 'info' : 'home'; 

            if (hash === '#show-contact') {
                initialTargetView = 'contact';
            }
            setMainView(initialTargetView);
        }
        
        handleInitialLoad(); 
        wasMobile = isMobile();

        const resizeObserver = new ResizeObserver(() => {
            const isNowMobile = isMobile();
            if (isNowMobile !== wasMobile) { 
                let targetView = currentView;
                if (isNowMobile) { 
                    if (currentView === 'home') targetView = 'info';
                } else { 
                    if (currentView === 'info') targetView = 'home';
                    toggleMobileMenu(true); 
                }
                setMainView(targetView); 
                wasMobile = isNowMobile;
            }
        });
        resizeObserver.observe(document.body);

        window.addEventListener('hashchange', () => {
            if (window.location.hash === '#show-contact') {
                setMainView('contact');
            }
        });
    });
</script>