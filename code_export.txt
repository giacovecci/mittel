---
// src/pages/index.astro
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import StaticInfo from '../components/StaticInfo.astro';
import FeedEntry from '../components/FeedEntry.astro';
import OverviewGrid from '../components/OverviewGrid.astro';
import type { CollectionEntry } from 'astro:content';

const feedEntriesFetched: CollectionEntry<'feed'>[] = await getCollection('feed');

// --- CHANGE: Uncommented the sorting line below ---
// Sort entries by date (newest first). Added safety checks for missing dates.
const feedEntries = feedEntriesFetched.sort((a, b) => {
    const dateA = a.data.date ? new Date(a.data.date).getTime() : 0;
    const dateB = b.data.date ? new Date(b.data.date).getTime() : 0;
    return dateB - dateA; // Sorts descending (newest first)
});
// --- END CHANGE ---

const overviewItems = feedEntries.map(entry => ({
    id: entry.slug,
    title: entry.data.title || 'Untitled',
    imageUrl: entry.data.thumbnail || '/placeholder.jpg', // Ensure a fallback image path if needed
    altText: entry.data.title || 'Feed item thumbnail'
}));
---
<BaseLayout title="Å»akowiecki | fixer supreme XD">
    <Header />

    <main id="main-content" class="feed-active">
        <div class="vertical-divider"></div>

        <aside id="info-content" class="left-column">
            <StaticInfo />
        </aside>

        <section id="feed-content" class="right-column">
            {feedEntries.map(entry => (
                <FeedEntry entry={entry} />
            ))}
        </section>

        <div id="overview-content">
            <OverviewGrid items={overviewItems} />
        </div>
    </main>
</BaseLayout>

{/* --- Keep existing <style> and <script> blocks unchanged --- */}
<style>
    /* --- Base Variables --- */
    :root {
        --content-padding-x: 1.25rem;
        --column-gap: 1.25rem;
        --header-height-estimate-desktop: 3.5rem;
        --header-height-estimate-mobile-px: 92px;
        --mobile-content-top-margin: 6rem; /* Default mobile margin */
        --scrollbar-track-color: #222;
        --scrollbar-thumb-color: #555;
        --scrollbar-width: 8px;
        --desktop-main-padding-top: 2rem;
        --desktop-main-padding-bottom: 1.25rem;
        --content-padding-x-mobile: var(--spacing-md); /* Ensure mobile padding is defined */
    }

    /* --- DESKTOP / DEFAULT STYLES --- */
    main {
        padding: var(--desktop-main-padding-top) var(--content-padding-x) var(--desktop-main-padding-bottom);
        position: relative; box-sizing: border-box;
        height: calc(100vh - var(--header-height-estimate-desktop) - var(--desktop-main-padding-top) - var(--desktop-main-padding-bottom));
        overflow: hidden; display: flex; gap: var(--column-gap);
    }
    #info-content { display: block; width: 50%; overflow: hidden; padding-right: calc(var(--column-gap) / 2); }
    #feed-content { display: block; width: 50%; overflow-y: auto; padding-left: calc(var(--column-gap) / 2); scroll-behavior: smooth; }
    #overview-content { display: none; width: 100%; height: 100%; overflow-y: auto; }
    main.overview-active { display: block; }
    main.overview-active #info-content, main.overview-active #feed-content { display: none; }
    main.overview-active #overview-content { display: block; }
    main.overview-active .vertical-divider { display: none; }
    .vertical-divider {
        position: absolute; top: var(--desktop-main-padding-top); bottom: var(--desktop-main-padding-bottom);
        left: 50%; transform: translateX(-50%); width: 0.125rem; background-color: #ccc; z-index: 999;
    }
    #feed-content, #overview-content {
        scrollbar-width: thin; scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);
    }
    #feed-content::-webkit-scrollbar, #overview-content::-webkit-scrollbar { width: var(--scrollbar-width); }
    #feed-content::-webkit-scrollbar-track, #overview-content::-webkit-scrollbar-track { background: var(--scrollbar-track-color); }
    #feed-content::-webkit-scrollbar-thumb, #overview-content::-webkit-scrollbar-thumb { background-color: var(--scrollbar-thumb-color); border-radius: calc(var(--scrollbar-width) / 2); border: 2px solid var(--scrollbar-track-color); }

    /* ================================== */
    /* --- MOBILE - PORTRAIT ONLY --- */
    /* ================================== */
    @media (max-width: 768px) and (orientation: portrait) {
        main {
            /* --- Apply stacking for PORTRAIT mobile --- */
            display: block; height: auto; overflow-y: visible;
            padding: 0 var(--content-padding-x-mobile);
            position: relative; transform: none;
        }
        #info-content, #feed-content, #overview-content {
            width: 100%; height: auto; overflow-y: visible; padding: 0;
            margin-top: var(--mobile-content-top-margin); /* Keep large margin for stacked */
            margin-bottom: 1.5rem;
        }
        #info-content:last-child, #feed-content:last-child, #overview-content:last-child {
            margin-bottom: 0;
        }
        /* Visibility rules remain same for portrait mobile */
        main.feed-active #info-content { display: none; }
        main.feed-active #feed-content { display: block; }
        main.feed-active #overview-content { display: none; }
        main.overview-active #info-content, main.overview-active #feed-content { display: none; }
        main.overview-active #overview-content { display: block; }
        main.info-visible #info-content { display: block; }
        main.info-visible #feed-content { display: none; }
        main.info-visible #overview-content { display: none; }
        .vertical-divider { display: none; } /* Hide divider in portrait */
    }

    /* ================================== */
    /* --- MOBILE - LANDSCAPE --- */
    /* --- Keep desktop-like layout but adjust padding/margins --- */
    /* ================================== */
    @media (max-width: 768px) and (orientation: landscape) {
         /* --- NEW: Define reduced top padding for narrow landscape --- */
         :root { /* Define within this scope */
             --narrow-landscape-main-padding-top: var(--spacing-sm); /* e.g., 0.75rem */
         }

         main {
             display: flex;
             /* --- Use REDUCED top padding --- */
             padding-top: var(--narrow-landscape-main-padding-top);
             /* Keep original horizontal/bottom padding */
             padding-left: var(--content-padding-x);
             padding-right: var(--content-padding-x);
             padding-bottom: var(--desktop-main-padding-bottom);
             /* --- Adjust height calculation for REDUCED top padding --- */
             height: calc(100vh - var(--header-height-estimate-desktop) - var(--narrow-landscape-main-padding-top) - var(--desktop-main-padding-bottom));
             gap: var(--column-gap);
         }
          /* Keep desktop widths/display */
         #info-content { display: block; width: 50%; overflow: hidden; padding-right: calc(var(--column-gap) / 2); margin: 0; }
         #feed-content { display: block; width: 50%; overflow-y: auto; padding-left: calc(var(--column-gap) / 2); scroll-behavior: smooth; margin: 0; }
         #overview-content { display: none; width: 100%; height: 100%; overflow-y: auto; margin: 0; }

          /* Keep desktop visibility rules */
         main.overview-active { display: block; }
         main.overview-active #info-content, main.overview-active #feed-content { display: none; }
         main.overview-active #overview-content { display: block; }
         main.overview-active .vertical-divider { display: none; }

         .vertical-divider {
             display: block;
              /* --- Adjust divider position for REDUCED top padding --- */
             top: var(--narrow-landscape-main-padding-top);
             bottom: var(--desktop-main-padding-bottom);
         }
         main.overview-active .vertical-divider { display: none; }

         main.feed-active #info-content { display: block; }
         main.feed-active #feed-content { display: block; }
         main.feed-active #overview-content { display: none; }
     }

</style>

<script>
    // --- KEEP YOUR EXISTING SCRIPT BLOCK UNCHANGED ---
    document.addEventListener('DOMContentLoaded', () => {
        const mainElement = document.getElementById('main-content');
        const infoBtn = document.getElementById('info-view-btn') as HTMLButtonElement | null;
        const feedBtn = document.getElementById('feed-view-btn') as HTMLButtonElement | null;
        const overviewBtn = document.getElementById('overview-view-btn') as HTMLButtonElement | null;
        const overviewGridWrapper = document.getElementById('overview-grid-wrapper');
        const infoContent = document.getElementById('info-content');
        const feedContent = document.getElementById('feed-content');

        if (!mainElement || !infoBtn || !feedBtn || !overviewBtn || !overviewGridWrapper || !infoContent || !feedContent) {
            console.error("Essential elements missing, script cannot run. Check IDs in index.astro HTML.");
            return;
        }

        const MOBILE_BREAKPOINT = 768;
        let currentMobileInfoVisible = false;

        function isMobileView(): boolean {
            return window.innerWidth <= MOBILE_BREAKPOINT;
        }

        function setActiveButton(activeBtn: HTMLButtonElement | null): void {
            [infoBtn, feedBtn, overviewBtn].forEach(btn => {
                if (btn) {
                    btn.classList.toggle('active', btn === activeBtn);
                }
            });
        }

        function setMainView(view: 'feed' | 'overview'): void {
            mainElement!.classList.remove('feed-active', 'overview-active', 'info-visible');

            if (view === 'overview') {
                mainElement!.classList.add('overview-active');
                setActiveButton(overviewBtn);
                currentMobileInfoVisible = false;
            } else {
                mainElement!.classList.add('feed-active');
                if (isMobileView() && currentMobileInfoVisible) {
                    mainElement!.classList.add('info-visible');
                    setActiveButton(infoBtn);
                } else {
                    if(feedBtn) setActiveButton(feedBtn);
                }
            }
        }

        function toggleMobileInfoFeed(showInfo: boolean): void {
            if (!isMobileView()) return;
            currentMobileInfoVisible = showInfo;
            mainElement!.classList.toggle('info-visible', showInfo);
            setActiveButton(showInfo ? infoBtn : feedBtn);

            if (mainElement!.classList.contains('overview-active')) {
                setMainView('feed');
            }
        }

        if (overviewBtn) {
            overviewBtn.addEventListener('click', () => { setMainView('overview'); });
        }
        if (feedBtn) {
            feedBtn.addEventListener('click', () => {
                setMainView('feed');
                if (isMobileView()) { toggleMobileInfoFeed(false); }
            });
        }
        if (infoBtn) {
            infoBtn.addEventListener('click', () => { toggleMobileInfoFeed(true); });
        }

        if (overviewGridWrapper) {
            overviewGridWrapper.addEventListener('click', (event: MouseEvent) => {
                if (event.target instanceof Element) {
                    const gridItemLink = event.target.closest<HTMLAnchorElement>('.grid-item');
                     if (gridItemLink && gridItemLink.dataset.targetId) {
                         event.preventDefault();
                         const targetId = gridItemLink.dataset.targetId;
                         const targetFeedElement = document.getElementById(targetId);

                         if (targetFeedElement) {
                             setMainView('feed');
                             if (isMobileView()) { toggleMobileInfoFeed(false); }
                             requestAnimationFrame(() => {
                                 targetFeedElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                             });
                         } else { console.error(`Target element #${targetId} not found. Check FeedEntry ID.`); }
                     } else if (gridItemLink) {
                          console.error("Grid item link clicked, but missing 'data-target-id'. Check GridItem.astro.");
                     }
                }
            });
        } else {
             console.error("Overview grid wrapper not found, click listener not attached.");
        }

        setMainView('feed');
        if (isMobileView()) { toggleMobileInfoFeed(false); }
        else { if(feedBtn) setActiveButton(feedBtn); }
    });
</script>/* src/styles/global.css */

/* 1. CSS Reset / Normalization */
*, *::before, *::after { box-sizing: border-box; }
body, h1, h2, h3, h4, h5, h6, p, ul, ol, figure, blockquote, dl, dd { margin: 0; }
button, input, textarea, select { font: inherit; margin: 0; }
ul, ol { padding: 0; list-style: none; }
img, video, picture, svg { display: block; max-width: 100%; height: auto; }
a { color: inherit; text-decoration: none; }
button { background: none; border: none; padding: 0; cursor: pointer; color: inherit; }

/* 2. CSS Custom Properties (Variables) */
:root {
  /* --- FONT STYLE --- */
  --font-family-unified: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
  /* Default/Desktop responsive size */
  --font-size-desktop-unified: clamp(1.1rem, 1rem + 0.2vw, 1.3rem);
  /* Mobile Responsive Sizes */
  --font-size-mobile-content-responsive: clamp(0.85rem, 0.75rem + 0.3vw, 1.0rem);
  --font-size-mobile-header-responsive: clamp(1.3rem, 1.1rem + 0.6vw, 1.6rem);
  /* Weights */
  --font-weight-unified: 700; /* Default weight */
  --font-weight-bold: 900;    /* Bold weight */
  --line-height-unified: 1.6;
  --color-text-unified: #ccc;

  /* Background & Border Colors */
  --color-background: #000000;
  --color-header-bg: #111111;
  --color-border: #555555;
  --line-thickness: 2px;

  /* Add these inside the :root { ... } block in global.css */
  --color-text-secondary: #aaa; /* Example: Lighter grey */
  --color-border-light: #444; /* Example: Slightly lighter border */
  --border-radius-sm: 4px; /* Example: Small border radius */
  --color-background-muted: #1a1a1a; /* Example: Darker background */
        
  /* Add these two lines inside the :root block in global.css */
  --color-surface-light: #2a2a2a; /* Light surface for grid items etc */
  --color-surface-light-hover: #383838; /* Hover state for light surface */

/* Also, move the RGB variable here from StaticInfo.astro */
  --color-text-unified-rgb: 204, 204, 204; /* Corresponds to #ccc */

  /* Accent for Hover/Active */
  --color-accent: #e70221;
  --color-text-hover: var(--color-accent);

  /* Spacing Unit */
  --spacing-unit: 1rem;
  /* Spacing Scale */
  --spacing-xxs: calc(0.25 * var(--spacing-unit));
  --spacing-xs: calc(0.5 * var(--spacing-unit));
  --spacing-sm: calc(0.75 * var(--spacing-unit));
  --spacing-md: var(--spacing-unit);
  --spacing-lg: calc(1.5 * var(--spacing-unit));
  --spacing-xl: calc(2 * var(--spacing-unit));
  --spacing-xxl: calc(3 * var(--spacing-unit));

  /* Layout Specific Variables */
  --content-padding-x-desktop: var(--spacing-lg);
  --content-padding-x-mobile: var(--spacing-md);
  --column-gap-desktop: var(--spacing-lg);
  --column-gap-mobile: var(--spacing-md);
}

/* 3. Core Body & Universal Text Styling */
html { scroll-behavior: smooth; }
body {
  background-color: var(--color-background);
  font-family: var(--font-family-unified);
  /* Apply Default/Desktop Size */
  font-size: var(--font-size-desktop-unified);
  font-weight: var(--font-weight-unified);
  line-height: var(--line-height-unified);
  color: var(--color-text-unified);
  min-height: 100vh;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  position: relative;
}

/* Default heading/paragraph styles */
h1, h2, h3, h4, h5, h6 {
    font-weight: var(--font-weight-bold);
    /* font-size: inherit; Let em control relative size */
    line-height: 1.3;
    margin-bottom: var(--spacing-sm);
}
/* Keep heading size relative to current context (body) */
h3 { font-size: 1.1em; }

p, li, dt, dd, span, label {
    font-weight: inherit;
    font-size: inherit; /* Inherit from parent */
    line-height: inherit;
    margin-bottom: var(--spacing-sm);
}

/* 4. Basic Link & Button Hover Styling */
a:hover,
button:hover { color: var(--color-text-hover); }
button.active { color: var(--color-text-hover); }
button { cursor: pointer; }

/* 5. Utility Classes */
.accent-text {
  color: var(--color-accent);
  /* Optional: Add font-weight if needed, e.g. */
  /* font-weight: var(--font-weight-bold); */
}

/* ================================== */
/* --- GLOBAL MOBILE OVERRIDES --- */
/* ================================== */
@media (max-width: 768px) {
    body {
        /* Apply Mobile Content Responsive Font Size */
        font-size: var(--font-size-mobile-content-responsive);
    }
    /* Example mobile heading adjustment if needed */
    /* h3 { font-size: 1.2em; } */
  }

  
/* ===================================================== */
/* --- Font Size Adjustment for Landscape Mobile/Tablet --- */
/* ===================================================== */
@media (max-width: 992px) and (orientation: landscape) {
  body {
      /* Apply a smaller fixed or clamped font size */
      font-size: 0.8rem; /* Example: Adjust as needed (e.g., 14px, 0.85rem) */
      /* You could also use clamp here if preferred: */
      /* font-size: clamp(0.8rem, 0.75rem + 0.15vw, 0.95rem); */
  }
}---
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { marked } from 'marked';

type ContentBlock = NonNullable<CollectionEntry<'feed'>['data']['contentBlocks']>[number];

interface Props {
    entry: CollectionEntry<'feed'>;
}

const { entry } = Astro.props;
const { slug, data } = entry;

const formattedDate = data.date
    ? new Date(data.date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    })
    : null;

function parseMarkdown(markdownString?: string): string {
    if (!markdownString) return '';
    try {
        const htmlResult = String(marked.parse(markdownString));
        return htmlResult;
    } catch (e) {
        console.error("Error parsing Markdown:", e);
        return '<p>Error rendering content.</p>';
    }
}
---
<article class="feed-entry" id={slug}>
    <h3>{data.title || 'Untitled Entry'}</h3>
    {formattedDate && (
        <time class="feed-entry-date" datetime={data.date?.toISOString()}>{formattedDate}</time>
    )}

    <div class="feed-entry-blocks">
        {data.contentBlocks && data.contentBlocks.length > 0 ? (
            data.contentBlocks.map((block: ContentBlock) => {
                switch (block.type) {
                    case 'twoColumn':
                        return (
                            <div class="content-block block-two-column">
                                {block.left && (
                                    <div class="column left-column" set:html={parseMarkdown(block.left)}></div>
                                )}
                                {block.right && (
                                    <div class="column right-column" set:html={parseMarkdown(block.right)}></div>
                                )}
                            </div>
                        );

                    case 'fullWidthImage':
                        return (
                            <div class="content-block block-full-width-image">
                                <Image
                                    src={block.image}
                                    alt={block.alt || ''}
                                    width={1200}
                                    height={900}
                                    format="webp"
                                    quality={80}
                                    loading="lazy"
                                    densities={[1, 1.5, 2]}
                                />
                            </div>
                        );

                    case 'fullWidthEmbed':
                        return block.embedCode ? (
                            <div class="content-block block-full-width-embed" set:html={block.embedCode}></div>
                        ) : null;

                    default:
                        // Log if an unexpected block type is encountered
                        console.warn("Unsupported content block type found:", block?.type || block); // <-- MODIFIED LINE
                         return (
                             <div class="content-block block-unknown">
                                 {/* Updated message for clarity */}
                                 <p><em>Unsupported block type: {block?.type || 'Unknown'}. Check config and component.</em></p>
                             </div>
                         );
                }
            })
        ) : (
             entry.body ? (
                 <div class="content-block markdown-content" set:html={parseMarkdown(entry.body)}></div>
             ) : (
                 <p><em>No content found for this entry.</em></p>
             )
        )}
    </div>

    <hr class="entry-separator" />
</article>

<style>
    /* --- Keep existing desktop styles --- */
    :root {
        --feed-entry-column-gap: var(--column-gap-desktop, var(--spacing-lg));
        /* These variables should be defined in global.css */
    }

    .feed-entry {
        margin-bottom: var(--spacing-xl);
        padding-bottom: var(--spacing-md);
        scroll-margin-top: 2rem; /* Desktop scroll margin */
    }

    .feed-entry h3 {
        margin-top: 0;
        margin-bottom: var(--spacing-xxs);
        font-weight: var(--font-weight-unified);
        font-size: 1.1em;
        line-height: 1.3;
    }

    .feed-entry-date {
        display: block;
        font-size: 0.9em;
        color: var(--color-accent); /* Use variable */
        margin-bottom: var(--spacing-md);
    }

    .feed-entry-blocks {
        margin-top: var(--spacing-lg);
    }

    .content-block {
        margin-bottom: var(--spacing-lg);
    }
    .content-block:last-child {
        margin-bottom: 0;
    }

    .block-two-column {
        display: flex;
        gap: var(--feed-entry-column-gap);
    }
    .block-two-column .column {
        flex: 1;
        min-width: 0;
    }
    .block-two-column .column > *:first-child { margin-top: 0; }
    .block-two-column .column > *:last-child { margin-bottom: 0; }

    /* Using :global() for nested markdown elements */
    .block-two-column .column :global(p),
    .block-two-column .column :global(li),
    .block-two-column .column :global(dt),
    .block-two-column .column :global(dd) {
        line-height: var(--line-height-unified); margin-bottom: var(--spacing-sm); font-size: 1em;
    }
     .block-two-column .column :global(h1),
     .block-two-column .column :global(h2),
     .block-two-column .column :global(h3),
     .block-two-column .column :global(h4) { margin-bottom: var(--spacing-xs); margin-top: var(--spacing-md); line-height: 1.2; }
     .block-two-column .column :global(ul),
     .block-two-column .column :global(ol) { margin-bottom: var(--spacing-sm); padding-left: var(--spacing-lg); }
     .block-two-column .column :global(li) > :global(p) { margin-bottom: var(--spacing-xxs); }
     .block-two-column .column :global(blockquote) {
         margin-left: var(--spacing-sm);
         padding-left: var(--spacing-md);
         border-left: 3px solid var(--color-border-light); /* Use variable */
         color: var(--color-text-secondary); /* Use variable */
         font-style: italic;
         margin-bottom: var(--spacing-sm);
     }

    .block-full-width-image img,
    .block-full-width-image picture {
        display: block;
        width: 100%;
        height: auto;
        border-radius: var(--border-radius-sm); /* Use variable */
        background-color: var(--color-border-light); /* Use variable */
    }
     .block-missing-image p { /* Style for missing image placeholder */
         font-style: italic;
         color: var(--color-text-secondary);
         background-color: var(--color-background-muted);
         padding: var(--spacing-md);
         border-radius: var(--border-radius-sm);
         text-align: center;
     }

     .block-full-width-embed {
         width: 100%;
         max-width: 100%;
         overflow: hidden;
         background-color: var(--color-border-light); /* Use variable */
    }
    .block-full-width-embed :global(iframe),
    .block-full-width-embed :global(video) {
        display: block !important;
        width: 100% !important;
        max-width: 100% !important;
        height: auto !important;
        aspect-ratio: 16 / 9;
        border: none;
        margin: 0;
    }

    /* Styles for Markdown rendered directly from entry.body */
    .markdown-content :global(p),
    .markdown-content :global(ul),
    .markdown-content :global(ol),
    .markdown-content :global(blockquote) {
         line-height: var(--line-height-unified);
         margin-bottom: var(--spacing-sm);
    }
    .markdown-content :global(h1),
    .markdown-content :global(h2),
    .markdown-content :global(h3),
    .markdown-content :global(h4) {
        margin-top: var(--spacing-lg);
        margin-bottom: var(--spacing-xs);
        line-height: 1.2;
    }
     .markdown-content :global(ul),
     .markdown-content :global(ol) {
         padding-left: var(--spacing-lg);
     }
     .markdown-content :global(li) > :global(p) {
         margin-bottom: var(--spacing-xxs);
     }
     .markdown-content :global(blockquote) {
          margin-left: var(--spacing-sm);
          padding-left: var(--spacing-md);
          border-left: 3px solid var(--color-border-light); /* Use variable */
          color: var(--color-text-secondary); /* Use variable */
          font-style: italic;
     }
     .markdown-content :global(img) {
         max-width: 100%;
         height: auto;
         display: block;
         margin-top: var(--spacing-md);
         margin-bottom: var(--spacing-md);
         border-radius: var(--border-radius-sm); /* Use variable */
     }

    .block-unknown p {
        font-style: italic;
        color: var(--color-text-secondary); /* Use variable */
        border: 1px dashed var(--color-border); /* Use variable */
        padding: var(--spacing-sm);
    }

    .entry-separator {
        border: none;
        border-top: var(--line-thickness) solid var(--color-border); /* Use variable */
        margin-top: var(--spacing-xl);
    }

    /* --- MOBILE STYLES --- */
    @media (max-width: 768px) {
        .feed-entry {
            margin-bottom: var(--spacing-lg);
            padding-bottom: var(--spacing-sm);
            /* --- UPDATED scroll-margin-top (Significantly Increased) --- */
            scroll-margin-top: calc(var(--header-height-estimate-mobile-px, 92px) + 6rem); /* Increased extra space to 6rem */
        }
        .feed-entry-blocks {
            margin-top: var(--spacing-md);
        }
        .content-block {
            margin-bottom: var(--spacing-md);
        }
        .block-two-column {
            flex-direction: column;
            gap: var(--spacing-md);
        }
        .entry-separator {
            margin-top: var(--spacing-lg);
        }
        .feed-entry-date {
             font-size: 0.85em;
        }
    }
</style>// src/content/config.ts
import { defineCollection, z } from 'astro:content';

const twoColumnBlockSchema = z.object({
    type: z.literal('twoColumn'),
    left: z.string().optional(),
    right: z.string().optional(),
});

const fullWidthImageBlockSchema = z.object({
    type: z.literal('fullWidthImage'),
    image: z.string(),
    alt: z.string().optional(),
});

const fullWidthEmbedBlockSchema = z.object({
    type: z.literal('fullWidthEmbed'),
    embedCode: z.string(),
});

// --- ADDED: Schema for Full Width Text Block ---
const fullWidthTextBlockSchema = z.object({
    type: z.literal('fullWidthText'),
    text: z.string(), // Markdown content
});
// --- END ADDED ---

// --- ADDED: Schema for Horizontal Gallery Block ---
const horizontalGalleryBlockSchema = z.object({
    type: z.literal('horizontalGallery'),
    images: z.array(
        z.object({
            image: z.string(), // Path to the image
            alt: z.string().optional(), // Alt text
        })
    ).optional(), // Allow the gallery to be empty
});
// --- END ADDED ---

const feedCollection = defineCollection({
    type: 'content',
    schema: z.object({
        title: z.string(),
        // If you had the optional _styling_note before, keep it, otherwise omit it
        // _styling_note: z.string().optional(),
        date: z.date().optional(),
        thumbnail: z.string().optional(),
        contentBlocks: z.array(
            z.discriminatedUnion('type', [
                twoColumnBlockSchema,
                fullWidthImageBlockSchema,
                fullWidthEmbedBlockSchema,
                // --- ADDED: Include new schemas in the union ---
                fullWidthTextBlockSchema,
                horizontalGalleryBlockSchema,
                // --- END ADDED ---
            ])
        ).optional(),
    }),
});

export const collections = {
    'feed': feedCollection,
};# public/admin/config.yml
backend:
  name: git-gateway
  repo: giacovecci/mittel # Make sure this is your correct repo
  branch: main
  identity_url: https://auth.decapbridge.com/sites/6f47cec6-ee71-4b7d-a4fb-b4518e61898e # Keep your specific URL
  gateway_url: https://gateway.decapbridge.com # Keep your specific URL
  commit_messages:
    create: Create {{collection}} â{{slug}}â - {{author-name}} <{{author-login}}> via DecapBridge
    update: Update {{collection}} â{{slug}}â - {{author-name}} <{{author-login}}> via DecapBridge
    delete: Delete {{collection}} â{{slug}}â - {{author-name}} <{{author-login}}> via DecapBridge
    uploadMedia: Upload â{{path}}â - {{author-name}} <{{author-login}}> via DecapBridge
    deleteMedia: Delete â{{path}}â - {{author-name}} <{{author-login}}> via DecapBridge
    openAuthoring: Message {{message}} - {{author-name}} <{{author-login}}> via DecapBridge

logo_url: https://decapbridge.com/decapcms-with-bridge.svg
site_url: https://mittel.reiseburo.workers.dev # Optional: Replace if different
publish_mode: editorial_workflow

media_folder: "public/uploads"
public_folder: "/uploads"

collections:
  - name: "feed"
    label: "Feed Entries"
    folder: "src/content/feed"
    create: true
    slug: "{{year}}-{{month}}-{{day}}-{{slug}}"
    fields:
      - { label: "Title", name: "title", widget: "string" }
      # Omit _styling_note field unless you explicitly want it back
      - { label: "Publish Date", name: "date", widget: "datetime", required: false }
      - { label: "Thumbnail Image", name: "thumbnail", widget: "image", required: false }
      - label: "Content Blocks"
        name: "contentBlocks"
        widget: "list"
        typeKey: type
        types:
          - label: "Two Column Block"
            name: "twoColumn"
            widget: "object"
            fields:
              - { label: "Left Column (Markdown)", name: "left", widget: "markdown", required: false }
              - { label: "Right Column (Markdown)", name: "right", widget: "markdown", required: false }
          - label: "Full Width Image"
            name: "fullWidthImage"
            widget: "object"
            fields:
              - { label: "Image", name: "image", widget: "image" }
              - { label: "Alt Text", name: "alt", widget: "string", required: false }
          - label: "Full Width Embed"
            name: "fullWidthEmbed"
            widget: "object"
            fields:
              - { label: "Embed Code (Raw HTML)", name: "embedCode", widget: "text" }
          # --- ADDED: Full Width Text Block Type ---
          - label: "Full Width Text"
            name: "fullWidthText"
            widget: "object"
            fields:
              - { label: "Text Content", name: "text", widget: "markdown" }
          # --- END ADDED ---
          # --- ADDED: Horizontal Gallery Block Type ---
          - label: "Horizontal Gallery"
            name: "horizontalGallery"
            widget: "object"
            fields:
              - label: "Images"
                name: "images"
                widget: "list"
                fields:
                  - { label: "Image", name: "image", widget: "image" }
                  - { label: "Alt Text", name: "alt", widget: "string", required: false }
          # --- END ADDED ------
// src/layouts/BaseLayout.astro
// Imports global.css, retains header padding logic
// Updated Font Import to include weight 500
interface Props {
    title?: string;
}
const { title = 'Portfolio' } = Astro.props;
---
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    {/* Import Google Fonts */}
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    {/* --- UPDATED: Added 500 weight --- */}
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <title>{title}</title>
    <style is:global>
      /* Import the global styles */
      @import '../styles/global.css'; /* Adjust path if needed */

      /* Keep header height estimation logic separate */
     :root {
        /* Define Header Heights */
        --header-height-estimate-desktop: 3.5rem;
        --header-height-estimate-mobile-px: 135px;

        /* Use desktop by default */
        --header-height-estimate: var(--header-height-estimate-desktop);

         /* Keep scrollbar variables if needed globally */
        --scrollbar-track-color: #222;
        --scrollbar-thumb-color: #555;
        --scrollbar-width: 8px;
    }

    body {
        /* Apply dynamic padding based on the current estimate */
        padding-top: var(--header-height-estimate);
        transition: padding-top 0.3s ease;
        /* Allow component styles to control scroll */
        overflow-y: hidden; /* Default for desktop split view */
    }

    /* Update header height variable on mobile */
    @media (max-width: 768px) {
         :root {
             /* Switch to mobile header estimate */
             --header-height-estimate: var(--header-height-estimate-mobile-px);
         }
         body {
            overflow-y: auto; /* ALLOW body scroll on mobile */
         }
    }
    </style>
</head>
<body>
    <slot />
</body>
</html>---
// src/components/Header.astro
const contactEmail = "hey@mittel.tv";
---
<header id="main-header">
    {/* Header Left */}
    <div class="header-left header-section">
         <div class="header-sub-col header-site-name-container">
             <span class="header-site-name-text">Piotr Å»akowiecki</span>
         </div>
         <div class="header-sub-col">
            <span class="header-tagline">field producer | videojournalist</span>
         </div>
    </div>

    {/* Header Right */}
    <div class="header-right header-section">
        <nav class="header-nav">
            <div class="header-sub-col info-button-mobile-container">
                <button type="button" id="info-view-btn" class="mobile-only">
                    <span class="arrow">â</span> Information
                </button>
            </div>
            <div class="header-sub-col feed-button-desktop-container">
                <button type="button" id="feed-view-btn" class="desktop-only">
                    Feed
                </button>
            </div>
            <div class="header-sub-col overview-button-container">
                 <button type="button" id="overview-view-btn">
                    <span class="arrow mobile-only">â</span> Overview
                 </button>
            </div>
        </nav>
        <div class="header-contact-item">
             <a href={`mailto:${contactEmail}`} id="contact-link">
                <span class="arrow mobile-only">â</span> Contact
             </a>
        </div>
    </div>
</header>

<style>
    :root {
        --header-padding-x-desktop: var(--content-padding-x-desktop, var(--spacing-lg));
        --header-padding-x-mobile: var(--content-padding-x-mobile, var(--spacing-md));
        --header-gap-desktop: var(--column-gap-desktop, var(--spacing-lg));
        --header-gap-mobile: var(--column-gap-mobile, var(--spacing-md));
        --header-internal-padding: calc(var(--header-gap-desktop) / 2);
        --arrow-spacing: var(--spacing-xs);
        --header-height-estimate-desktop: 3.5rem;
        --header-height-estimate-mobile-px: 92px;
        --font-size-mobile-header-responsive: clamp(1.3rem, 1.1rem + 0.6vw, 1.6rem); /* ensure defined */
    }

    /* --- DESKTOP / DEFAULT STYLES --- */
    header {
        position: fixed; top: 0; left: 0; width: 100%; z-index: 998;
        background-color: var(--color-header-bg, #000000);
        padding: 0 var(--header-padding-x-desktop); display: flex; align-items: center;
        min-height: var(--header-height-estimate-desktop);
        transition: padding 0.3s ease, min-height 0.3s ease; box-sizing: border-box;
    }
    .header-section {
        width: 50%; display: flex; align-items: center; gap: var(--header-gap-desktop); padding: var(--spacing-md) 0;
    }
    .header-left { padding-right: var(--header-internal-padding); }
    .header-right { justify-content: space-between; padding-left: var(--header-internal-padding); }
    .header-sub-col { flex-basis: 0; flex-grow: 1; min-width: 0; display: flex; align-items: center; }
    .feed-button-desktop-container, .overview-button-container { gap: var(--header-gap-desktop); }
    .info-button-mobile-container { display: none; } /* Hide mobile info button by default */
    .header-site-name-text { display: inline-block; margin: 0; padding: 0; line-height: 1.1; }
    .header-tagline { color: #aaa; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; display: block; line-height: inherit; margin-bottom: 0; }
    .header-nav { flex-grow: 1; display: flex; min-width: 0; align-items: center; gap: var(--header-gap-desktop); }
    .header-contact-item { flex-shrink: 0; text-align: right; display: flex; align-items: center; }
    .header-contact-item a { color: inherit; text-decoration: none; line-height: inherit; margin: 0; }
    .header-nav button { margin: 0; }
    .mobile-only, .arrow.mobile-only { display: none; } /* Hide mobile arrows/buttons by default */
    .desktop-only { display: inline-block; } /* Show desktop feed button by default */
    header::before, header::after { content: ''; position: absolute; bottom: 0; height: var(--line-thickness); background-color: var(--color-border); display: block; opacity: 1; transition: left 0.3s ease, right 0.3s ease, opacity 0.3s ease; }
    header::before { left: var(--header-padding-x-desktop); right: calc(50% + var(--header-gap-desktop) / 2); }
    header::after { left: calc(50% + var(--header-gap-desktop) / 2); right: var(--header-padding-x-desktop); }
    .arrow { display: inline-block; margin-right: var(--arrow-spacing); }

    /* ================================== */
    /* --- MOBILE - PORTRAIT ONLY --- */
    /* ================================== */
    @media (max-width: 768px) and (orientation: portrait) {
        /* --- Apply stacked layout for PORTRAIT mobile --- */
        header {
            min-height: var(--header-height-estimate-mobile-px); display: flex; flex-direction: row; justify-content: space-between;
            align-items: baseline; padding: var(--spacing-sm) var(--header-padding-x-mobile); position: fixed;
            font-size: var(--font-size-mobile-header-responsive);
        }
        header::after { content: ''; position: absolute; bottom: 0; left: var(--header-padding-x-mobile); right: var(--header-padding-x-mobile); height: var(--line-thickness); background-color: var(--color-border); display: block; opacity: 1; z-index: 1; }
        header::before { display: none; } /* Hide desktop border */
        .header-section { width: auto; flex: 0 0 50%; min-width: 0; padding: 0; margin: 0; display: flex; align-items: baseline; gap: 0; }
        .header-left { align-items: baseline; word-break: normal; }
        .header-left .header-sub-col:last-child, .header-tagline { display: none; } /* Hide tagline */
        .header-site-name-container { width: 100%; display: block; text-align: left; align-items: baseline; }
        .header-site-name-text { display: block; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; line-height: 1.2; word-break: normal; visibility: visible; color: inherit; margin: 0; padding: 0; }
        .header-right { flex: 0 0 50%; flex-shrink: 0; min-width: 0; padding: 0; margin: 0; display: flex; flex-direction: column; align-items: flex-end; gap: var(--spacing-xxs); word-break: normal; }
        .header-nav { order: 1; display: flex; flex-direction: column; align-items: flex-end; width: auto; gap: var(--spacing-xxs); }
        .header-nav .header-sub-col { flex-basis: auto; flex-grow: 0; width: auto; justify-content: flex-end; display: flex; align-items: baseline; }
        .feed-button-desktop-container { display: none !important; } /* Hide desktop feed button */
        .info-button-mobile-container { display: flex !important; } /* Show mobile info button */
        .overview-button-container { display: flex; }
        .header-nav button, .header-contact-item a { text-align: right; padding: var(--spacing-xxs) 0; width: auto; line-height: 1.3; display: inline-flex; align-items: baseline; margin: 0; }
        .header-nav button { padding-left: 0; padding-right: 0; }
        .header-contact-item { order: 2; text-align: right; display: block; }
        .mobile-only, .arrow.mobile-only { display: inline-block !important; } /* Show mobile arrows/buttons */
        .desktop-only { display: none !important; } /* Hide desktop feed button */
        .arrow { margin-right: var(--arrow-spacing); }
    }
    /* --- NO specific landscape override needed here anymore --- */
    /* --- Landscape will use the default desktop styles --- */

</style>---
// src/components/StaticInfo.astro
const introText = "Good that you're here. I'll gladly help you out with a variety of tasks related to on-the-ground reporting and media production in Poland, Germany and beyond. Clients who have relied on my services include Channel 4 News, NPR, The New York Times, The Washington Post and many others. Have a look at some of my recent work highlights and don't hesitate to get in touch if I can support your assignment."
---
<div class="static-info-wrapper">
    <div class="static-column static-column-left">
        <div class="placeholder-visual">STATIC VISUAL</div>
    </div>
    <div class="static-column static-column-right">
        <p>{introText}</p>
    </div>
</div>

<style>
    /* --- DESKTOP / DEFAULT / LANDSCAPE --- */
    .static-info-wrapper {
        display: flex;
        flex-direction: row; /* Default: side-by-side */
        gap: var(--column-gap-desktop); /* Use layout variable */
        height: 100%;
    }
    .static-column {
        flex-basis: 0;
        flex-grow: 1;
        min-width: 0;
    }
    .static-column p {
        margin-top: 0;
        line-height: var(--line-height-unified);
    }
    .placeholder-visual {
        width: 100%;
        min-height: 200px;
        background-color: rgba(var(--color-text-unified-rgb, 204, 204, 204), 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.9em;
        color: rgba(var(--color-text-unified-rgb, 204, 204, 204), 0.6);
        border: var(--line-thickness) dashed var(--color-border);
        padding: var(--spacing-md);
    }
    /* Ensure RGB var is defined globally */

    /* ================================== */
    /* --- MOBILE - PORTRAIT ONLY --- */
    /* ================================== */
    @media (max-width: 768px) and (orientation: portrait) {
        .static-info-wrapper {
             flex-direction: column; /* Stack columns in portrait */
             gap: var(--spacing-lg);
        }
        .placeholder-visual {
            min-height: 150px;
        }
    }
     /* --- NO specific landscape override needed, uses default --- */
</style>---
// src/components/OverviewGrid.astro
import GridItem from './GridItem.astro';

export interface Props {
    items: Array<{ id: string; title: string; imageUrl?: string; altText?: string; }>;
}
const { items = [] } = Astro.props;
---
<div id="overview-grid-wrapper" class="overview-grid-wrapper">
    {items.length > 0 ? (
        <div class="overview-grid">
            {items.map(item => (
                <GridItem item={item} />
            ))}
        </div>
    ) : (
        <p>No overview items found.</p>
    )}
</div>

<style>
    .overview-grid-wrapper {
      padding: 0;
    }

    /* --- DESKTOP / DEFAULT / LANDSCAPE --- */
    .overview-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr); /* Default: 4 columns */
        gap: 1.5rem; /* Default gap */
        /* Removed debug border */
    }

    /* ================================== */
    /* --- MOBILE - PORTRAIT ONLY --- */
    /* ================================== */
    @media (max-width: 768px) and (orientation: portrait) {
        .overview-grid {
            grid-template-columns: repeat(2, 1fr); /* Mobile Portrait: 2 columns */
            gap: 1rem; /* Mobile gap */
        }
    }
     /* Removed landscape specific rule - landscape uses default */
     /* Removed max-width: 480px rule */
</style>---
// src/components/GridItem.astro
export interface Props {
    item: { id: string; title: string; imageUrl?: string; altText?: string; };
}
const { item } = Astro.props;
const itemLink = `#${item.id}`;
---
<a href={itemLink} class="grid-item" data-target-id={item.id}>
    <div class="grid-item-thumbnail">
        {item.imageUrl ? (
            <img src={item.imageUrl} alt={item.altText ?? `Thumbnail for ${item.title}`} loading="lazy" />
        ) : (
            <span class="placeholder-text">THUMB</span>
        )}
    </div>
    <div class="grid-item-label">{item.title ?? 'Untitled'}</div>
</a>

<style>
    /* Ensure variables used below are defined in global.css */

    .grid-item {
        display: block;
        text-decoration: none;
        color: inherit;
        text-align: center;
        /* --- RESTORED BACKGROUND and BORDER --- */
        background-color: var(--color-surface-light);
        border: var(--line-thickness) solid var(--color-border);
        padding: var(--spacing-xs); /* Keep padding */
        /* --- RESTORED TRANSITION --- */
        transition: background-color 0.2s ease, border-color 0.2s ease;
        box-sizing: border-box;
        overflow: hidden; /* Keep overflow hidden */
    }

    .grid-item-thumbnail {
        aspect-ratio: 1 / 1;
        background-color: rgba(var(--color-text-unified-rgb), 0.1);
        margin-bottom: var(--spacing-xs);
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        /* Removed internal border, main border is on .grid-item */
        /* border: 1px solid rgba(var(--color-text-unified-rgb), 0.2); */
        width: 100%;
    }
     .grid-item-thumbnail .placeholder-text {
        font-size: 0.8em;
        color: rgba(var(--color-text-unified-rgb), 0.6);
     }

    .grid-item-thumbnail img {
        display: block;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .grid-item-label {
        font-size: 0.9em;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        color: var(--color-text-unified);
        padding: 0 var(--spacing-xxs);
        display: block;
        width: 100%;
    }

    /* --- RESTORED HOVER STYLE --- */
    .grid-item:hover {
        background-color: var(--color-surface-light-hover); /* Use variable */
        /* border-color: var(--color-accent); */ /* Keep optional border commented */
    }

     /* --- Mobile Adjustments --- */
     @media (max-width: 768px) {
        .grid-item {
            padding: var(--spacing-xxs);
        }
        .grid-item-thumbnail {
            margin-bottom: var(--spacing-xxs);
        }
        .grid-item-label {
            font-size: 0.85em;
        }
     }
</style><!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="robots" content="noindex" />
  <title>Content Manager</title>

  <!-- Stylesheet link removed from here -->

  <style>
    /* Preview pane specific adjustments if needed */
    .nc-preview-pane-container > div {
        padding: 0 !important;
    }
    .feed-entry-preview-wrapper {
        padding: 1rem;
        background-color: var(--color-background, white);
    }
  </style>

</head>
<body>
  <!-- Load Marked library from CDN -->
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

  <!-- Decap CMS Core Script -->
  <script src="https://unpkg.com/decap-cms@^3.1.0/dist/decap-cms.js"></script>

  <!-- Custom Preview Registration Script -->
  <script type="module">
    console.log("Admin script started.");

    if (typeof marked === 'undefined') {
      console.error("Marked library not loaded!");
    } else {
        console.log("Marked library loaded.");
    }

    const CMS = window.CMS;
    const h = window.h;

    if (!CMS || !h) {
        console.error("CMS object or h function not found. Preview registration failed.");
    } else {
        console.log("CMS object and h function found.");

        // --- Register the stylesheet DIRECTLY for the preview pane ---
        try {
            CMS.registerPreviewStyle('/admin-preview.css'); // Use the stable path
            console.log("Registered preview style: /admin-preview.css");
        } catch (error) {
            console.error("Error registering preview style:", error);
        }
        // --- End of stylesheet registration ---
      
        // --- Define the Feed Entry Preview Function ---
        const FeedEntryPreview = (props) => {
            // console.log("FeedEntryPreview props:", props); // Debug: See what props are passed
            const { entry, getAsset } = props;
            if (!entry || !entry.getIn) {
                console.error("Invalid 'entry' object in preview props:", entry);
                return h('div', {}, 'Error: Invalid data received for preview.');
            }

            // --- Extract Data ---
            const title = entry.getIn(['data', 'title'], 'Untitled Entry');
            const dateValue = entry.getIn(['data', 'date'], null);
            const rawThumbnail = entry.getIn(['data', 'thumbnail'], null);
            const contentBlocksData = entry.getIn(['data', 'contentBlocks'], null); // Get Immutable List/Map or null

            // --- Process Data ---
            const formattedDate = dateValue
                ? new Date(dateValue).toLocaleDateString('en-US', {
                    year: 'numeric', month: 'long', day: 'numeric'
                  })
                : null;
            const thumbnailUrl = rawThumbnail ? getAsset(rawThumbnail)?.url || rawThumbnail : null;

            // Helper to parse markdown
            function parseMarkdownClient(markdownString) {
                if (!markdownString || typeof marked === 'undefined') return '';
                try {
                    return marked.parse(markdownString);
                } catch (e) {
                    console.error("Markdown preview parsing error:", e);
                    return '<p><em>Error parsing markdown</em></p>';
                }
            }

            // --- Render Content Blocks ---
            let blockElements = [];
            if (contentBlocksData && typeof contentBlocksData.map === 'function') { // Check if it's map-able (Immutable List)
                blockElements = contentBlocksData.map((block) => {
                    if (!block || typeof block.get !== 'function') return null; // Check if block is valid (Immutable Map)

                    const blockType = block.get('type');
                    switch (blockType) {
                        case 'twoColumn':
                            const leftContent = block.get('left');
                            const rightContent = block.get('right');
                            return h('div', { className: 'content-block block-two-column' },
                                leftContent ? h('div', { className: 'column left-column', dangerouslySetInnerHTML: { __html: parseMarkdownClient(leftContent) } }) : null,
                                rightContent ? h('div', { className: 'column right-column', dangerouslySetInnerHTML: { __html: parseMarkdownClient(rightContent) } }) : null
                            );
                        case 'fullWidthImage':
                            const rawImagePath = block.get('image');
                            const altText = block.get('alt') || '';
                            const imageUrl = rawImagePath ? getAsset(rawImagePath)?.url || rawImagePath : null;
                            return h('div', { className: 'content-block block-full-width-image' },
                                imageUrl ? h('img', { src: imageUrl, alt: altText, style: { display: 'block', width: '100%', height: 'auto', borderRadius: 'var(--border-radius-sm)', backgroundColor: 'var(--color-border-light)' } }) : h('p', {}, 'Image not available')
                            );
                        case 'fullWidthEmbed':
                            const embedCode = block.get('embedCode');
                            return h('div', { className: 'content-block block-full-width-embed', dangerouslySetInnerHTML: { __html: embedCode || '' } });
                        default:
                            return h('div', { className: 'content-block block-unknown' },
                                h('p', {}, h('em', {}, `Unsupported block preview: ${blockType || 'Unknown'}`))
                            );
                    }
                }).filter(el => el !== null); // Filter out any nulls from invalid blocks
            } else {
                 blockElements = [h('p', {}, h('em', {}, 'No content blocks added yet.'))];
            }


            // --- Assemble Preview using h() ---
            // Wrap everything in a div to apply padding/background safely
            return h('div', { className: 'feed-entry-preview-wrapper' },
                h('article', { className: 'feed-entry' },
                    // Title
                    h('h3', {}, title),
                    // Date
                    formattedDate ? h('time', { className: 'feed-entry-date' }, formattedDate) : null,
                    // Thumbnail
                    thumbnailUrl ? h('div', { className: 'thumbnail', style: { marginBottom: '1.5rem', backgroundColor: 'var(--color-border-light)' } },
                        h('img', { src: thumbnailUrl, alt: `Thumbnail for ${title}`, style: { display: 'block', width: '100%', height: 'auto', maxWidth: '100%', objectFit: 'cover' } })
                    ) : null,
                    // Content Blocks
                    h('div', { className: 'feed-entry-blocks' }, ...blockElements), // Spread the array of block elements
                    // Separator
                    h('hr', { className: 'entry-separator' })
                )
            );
        }; // End of FeedEntryPreview function definition

        // --- Register the Preview Component ---
        try {
            CMS.registerPreviewTemplate('feed', FeedEntryPreview);
            console.log("Feed entry preview template (JS function) registered successfully.");
        } catch (error) {
             console.error("Error registering preview template:", error);
        }

    } // End of CMS/h check
  </script>
</body>
</html>---
title: Into the disaster zone with De Standaard
date: 2024-09-21T01:01:00.000Z
thumbnail: /uploads/ds-2409-thumb.jpg
_styling_note: Use `<span class="accent-text">Your Text Here</span>` within
  Markdown fields to make text red.
contentBlocks:
  - type: twoColumn
    left: >-
      I accompanied Samira Ataei, a foreign correspondent for the Belgian daily
      De Standaard, on an assignment covering the flooding in the Polish region
      of Lower Silesia.


      My responsibilities included preliminary research and planning, local fixing (interviews and locations), translating, security and logistics.


      We managed to reach and report from some hard to reach heavily-affected locations, including Stronie ÅlÄskie and Lewin Brzeski; tie in national politics, by accessing the former mayor of WrocÅaw Bogdan Zdrojewski as well as PaweÅ Kukiz, who we met serendipitously volunteering in his home town; and give voice to a number of horrendously affected local residents.
    right: |-
      <span class="accent-text">Client:</span> De Standaard

      <span class="accent-text">Reporter:</span> Samira Ataei
  - type: fullWidthText
    text: >-
      Samira's coverage is available here:


      https://www.standaard.be/buitenland/polen-meet-schade-op-na-doortocht-storm-boris-in-tien-minuten-verdween-alles/40798272.html


      https://www.standaard.be/buitenland/polen-na-de-doortocht-van-boris-amfibietanks-rijden-door-de-ondergelopen-straten/40795737.html


      https://www.standaard.be/buitenland/waterramp-brengt-polen-bijeen-zonder-elkaar-stellen-we-weinig-voor/40808193.html


      https://www.standaard.be/nieuws/waterbom-boris-de-modder-de-miserie-en-de-vraag-naar-de-oorzaak/36219843.html
---
